#include "parser.h"
#include <iostream>
#include <sstream>
#include "Debugdefine.h"

namespace llvmpy
{

//===----------------------------------------------------------------------===//
// 静态成员初始化
//===----------------------------------------------------------------------===//

PyParserRegistry<PyTokenType, ExprAST> PyParser::exprRegistry;
PyParserRegistry<PyTokenType, StmtAST> PyParser::stmtRegistry;
std::unordered_map<PyTokenType, PyOperatorInfo> PyParser::operatorRegistry;
bool PyParser::isInitialized = false;

//===----------------------------------------------------------------------===//
// PyParseError 类实现
//===----------------------------------------------------------------------===//

std::string PyParseError::formatError() const
{
    std::stringstream ss;
    ss << "Parser error at line " << getLine() << ", column " << getColumn() << ": " << what();
    return ss.str();
}

//===----------------------------------------------------------------------===//
// 注册表初始化和管理方法
//===----------------------------------------------------------------------===//

void PyParser::initializeRegistries()
{
    if (isInitialized) return;
    
    // 表达式解析器注册
    registerExprParser(TOK_INTEGER, [](PyParser& p) { return p.parseNumberExpr(); });
    registerExprParser(TOK_FLOAT, [](PyParser& p) { return p.parseNumberExpr(); });
    registerExprParser(TOK_NUMBER, [](PyParser& p) { return p.parseNumberExpr(); });
    registerExprParser(TOK_IDENTIFIER, [](PyParser& p) { return p.parseIdentifierExpr(); });
    registerExprParser(TOK_LPAREN, [](PyParser& p) { return p.parseParenExpr(); });
    registerExprParser(TOK_STRING, [](PyParser& p) { return p.parseStringExpr(); });
    registerExprParser(TOK_MINUS, [](PyParser& p) { return p.parseUnaryExpr(); });
    registerExprParser(TOK_BOOL, [](PyParser& p) { return p.parseBoolExpr(); });
    registerExprParser(TOK_NONE, [](PyParser& p) { return p.parseNoneExpr(); });
    registerExprParser(TOK_LBRACK, [](PyParser& p) { return p.parseListExpr(); });
    
    // 语句解析器注册 - 标识符特殊处理
    registerStmtParser(TOK_IDENTIFIER, [](PyParser& p) -> std::unique_ptr<StmtAST> {
        // 保存当前状态用于回溯
        auto state = p.saveState();
        std::string idName = p.getCurrentToken().value;
        int line = p.getCurrentToken().line;
        int column = p.getCurrentToken().column;
        
        // 消费标识符
        p.nextToken();
        
        // 索引赋值: a[index] = value
        if (p.getCurrentToken().type == TOK_LBRACK) {
            auto target = p.makeExpr<VariableExprAST>(idName);
            
            p.nextToken(); // 消费 '['
            auto index = p.parseExpression();
            if (!index) return nullptr;
            
            if (!p.expectToken(TOK_RBRACK, "Expected ']' after index")) {
                return nullptr;
            }
            
            // 赋值
            if (p.getCurrentToken().type == TOK_ASSIGN) {
                p.nextToken(); // 消费 '='
                auto value = p.parseExpression();
                if (!value) return nullptr;
                
                // 处理可能的换行
                if (p.getCurrentToken().type == TOK_NEWLINE) {
                    p.nextToken();
                }
                
                return p.makeStmt<IndexAssignStmtAST>(
                    std::move(target), std::move(index), std::move(value));
            }
            
            // 不是赋值，回溯并当作表达式处理
            p.restoreState(state);
            return p.parseExpressionStmt();
        }
        // 普通赋值: a = value
        else if (p.getCurrentToken().type == TOK_ASSIGN) {
            return p.parseAssignStmt(idName);
        }
        // 表达式语句
        else {
            p.restoreState(state);
            return p.parseExpressionStmt();
        }
    });
    
    // 其他语句解析器注册
    registerStmtParser(TOK_RETURN, [](PyParser& p) { return p.parseReturnStmt(); });
    registerStmtParser(TOK_IF, [](PyParser& p) { return p.parseIfStmt(); });
    registerStmtParser(TOK_WHILE, [](PyParser& p) { return p.parseWhileStmt(); });
    registerStmtParser(TOK_FOR, [](PyParser& p) { return p.parseForStmt(); });
    registerStmtParser(TOK_PRINT, [](PyParser& p) { return p.parsePrintStmt(); });
    registerStmtParser(TOK_IMPORT, [](PyParser& p) { return p.parseImportStmt(); });
    registerStmtParser(TOK_PASS, [](PyParser& p) { return p.parsePassStmt(); });
    registerStmtParser(TOK_CLASS, [](PyParser& p) { return p.parseClassDefinition(); });
    
    // 可能作为表达式语句开头的其他token类型
    registerStmtParser(TOK_INTEGER, [](PyParser& p) { return p.parseExpressionStmt(); });
    registerStmtParser(TOK_FLOAT, [](PyParser& p) { return p.parseExpressionStmt(); });
    registerStmtParser(TOK_STRING, [](PyParser& p) { return p.parseExpressionStmt(); });
    registerStmtParser(TOK_LPAREN, [](PyParser& p) { return p.parseExpressionStmt(); });
    registerStmtParser(TOK_MINUS, [](PyParser& p) { return p.parseExpressionStmt(); });
    registerStmtParser(TOK_LBRACK, [](PyParser& p) { return p.parseExpressionStmt(); });

    // 操作符信息注册
    registerOperator(TOK_PLUS, '+', 20);
    registerOperator(TOK_MINUS, '-', 20);
    registerOperator(TOK_MUL, '*', 40);
    registerOperator(TOK_DIV, '/', 40);
    registerOperator(TOK_MOD, '%', 40);
    registerOperator(TOK_LT, '<', 10);
    registerOperator(TOK_GT, '>', 10);
    registerOperator(TOK_LE, 'l', 10);           // 用'l'表示<=
    registerOperator(TOK_GE, 'g', 10);           // 用'g'表示>=
    registerOperator(TOK_EQ, 'e', 10);           // 用'e'表示==
    registerOperator(TOK_NEQ, 'n', 10);          // 用'n'表示!=
    registerOperator(TOK_POWER, '^', 60, true);  // 幂运算符是右结合的
    
    isInitialized = true;
}

void PyParser::registerExprParser(PyTokenType type, PyExprParserFunc parser)
{
    exprRegistry.registerParser(type, std::move(parser));
}

void PyParser::registerStmtParser(PyTokenType type, PyStmtParserFunc parser)
{
    stmtRegistry.registerParser(type, std::move(parser));
}

void PyParser::registerOperator(PyTokenType type, char symbol, int precedence, bool rightAssoc)
{
    operatorRegistry[type] = PyOperatorInfo(symbol, precedence, rightAssoc);
}

//===----------------------------------------------------------------------===//
// PyParser 类实现
//===----------------------------------------------------------------------===//

PyParser::PyParser(PyLexer& l) : lexer(l), currentToken(TOK_EOF, "", 1, 1)
{
    // 确保注册表已初始化
    initializeRegistries();

    // 获取第一个token
    nextToken();
}

void PyParser::nextToken()
{
    currentToken = lexer.getNextToken();

#ifdef DEBUG
    // 添加调试输出
    std::cerr << "Debug: Next token: '" << currentToken.value
              << "' type: " << lexer.getTokenName(currentToken.type)
              << " at line " << currentToken.line
              << ", col " << currentToken.column << std::endl;
#endif
}

bool PyParser::expectToken(PyTokenType type, const std::string& errorMessage)
{
    if (currentToken.type != type)
    {
        logParseError<ASTNode>(errorMessage);
        return false;
    }
    nextToken();  // 消费预期的token
    return true;
}

bool PyParser::match(PyTokenType type)
{
    if (currentToken.type != type)
    {
        return false;
    }
    nextToken();  // 消费匹配的token
    return true;
}

void PyParser::skipNewlines()
{
    while (currentToken.type == TOK_NEWLINE)
    {
        nextToken();
    }
}

PyParser::PyParserState PyParser::saveState() const
{
    return PyParserState(currentToken, lexer.peekPosition());
}

void PyParser::restoreState(const PyParserState& state)
{
    currentToken = state.token;
    lexer.resetPosition(state.lexerPosition);
}

void PyParser::dumpCurrentToken() const
{
    std::cerr << "Current Token: type=" << lexer.getTokenName(currentToken.type)
              << ", value='" << currentToken.value
              << "', line=" << currentToken.line
              << ", col=" << currentToken.column << std::endl;
}

//===----------------------------------------------------------------------===//
// 表达式解析方法
//===----------------------------------------------------------------------===//

std::unique_ptr<ExprAST> PyParser::parseNumberExpr()
{
    double value = std::stod(currentToken.value);
    auto result = makeExpr<NumberExprAST>(value);
    nextToken();  // 消费数字
    return result;
}

std::unique_ptr<ExprAST> PyParser::parseParenExpr()
{
    int line = currentToken.line;
    int column = currentToken.column;

    nextToken();  // 消费'('

    auto expr = parseExpression();
    if (!expr)
        return nullptr;

    if (!expectToken(TOK_RPAREN, "Expected ')'"))
        return nullptr;

    expr->setLocation(line, column);
    return expr;
}

std::unique_ptr<ExprAST> PyParser::parseIdentifierExpr()
{
    std::string idName = currentToken.value;
    int line = currentToken.line;
    int column = currentToken.column;

    nextToken();  // 消费标识符

    // 函数调用
    if (currentToken.type == TOK_LPAREN)
    {
        nextToken();  // 消费'('
        std::vector<std::unique_ptr<ExprAST>> args;
        
        // 处理空参数列表
        if (currentToken.type != TOK_RPAREN) {
            while (true) {
                auto arg = parseExpression();
                if (!arg) return nullptr;
                args.push_back(std::move(arg));
                
                if (currentToken.type == TOK_RPAREN)
                    break;
                
                if (!expectToken(TOK_COMMA, "Expected ',' or ')' in argument list"))
                    return nullptr;
            }
        }
        
        // 消费右括号
        if (!expectToken(TOK_RPAREN, "Expected ')' after arguments"))
            return nullptr;
        
        auto callExpr = makeExpr<CallExprAST>(idName, std::move(args));
        return callExpr;
    }

    // 索引操作
    if (currentToken.type == TOK_LBRACK)
    {
        auto varExpr = makeExpr<VariableExprAST>(idName);
        return parseIndexExpr(std::move(varExpr));
    }

    // 简单变量引用
    return makeExpr<VariableExprAST>(idName);
}

std::unique_ptr<ExprAST> PyParser::parseStringExpr()
{
    // 实现字符串解析
    std::string strValue = currentToken.value;
    auto result = makeExpr<StringExprAST>(strValue);
    nextToken();  // 消费字符串
    return result;
}

std::unique_ptr<ExprAST> PyParser::parseBoolExpr()
{
    // 实现布尔值解析
    bool boolValue = (currentToken.value == "True");
    auto result = makeExpr<BoolExprAST>(boolValue);
    nextToken();  // 消费布尔值
    return result;
}

std::unique_ptr<ExprAST> PyParser::parseNoneExpr()
{
    // 实现None值解析
    auto result = makeExpr<NoneExprAST>();
    nextToken();  // 消费None
    return result;
}

std::unique_ptr<ExprAST> PyParser::parseUnaryExpr()
{
    // 记录操作符位置
    char opCode = '-'; // 默认为负号
    
    nextToken();  // 消费操作符

    // 解析操作数
    auto operand = parsePrimary();
    if (!operand)
        return nullptr;

    // 创建一元表达式
    return makeExpr<UnaryExprAST>(opCode, std::move(operand));
}

std::unique_ptr<ExprAST> PyParser::parsePrimary()
{
    // 通过查找注册表获取并调用适当的解析函数
    auto parser = exprRegistry.getParser(currentToken.type);
    if (parser) {
        return parser(*this);
    }

    // 没有匹配的解析器，报告错误
    return logParseError<ExprAST>("Unexpected token when expecting an expression: " + 
                                lexer.getTokenName(currentToken.type));
}

std::unique_ptr<ExprAST> PyParser::parseBinOpRHS(int exprPrec, std::unique_ptr<ExprAST> LHS)
{
    while (true)
    {
        // 获取当前token对应的操作符信息
        auto it = operatorRegistry.find(currentToken.type);
        if (it == operatorRegistry.end())
            return LHS;
            
        const PyOperatorInfo& opInfo = it->second;
        
        // 获取当前token的操作符优先级
        int tokPrec = opInfo.precedence;

        // 如果优先级过低，则返回当前的LHS
        if (tokPrec < exprPrec)
            return LHS;

        // 保存操作符信息
        PyTokenType opToken = currentToken.type;
        char binOp = opInfo.symbol;
        bool isRightAssoc = opInfo.rightAssoc;
        
        int line = currentToken.line;
        int column = currentToken.column;

        nextToken();  // 消费操作符

        // 解析RHS
        auto RHS = parsePrimary();
        if (!RHS)
            return nullptr;

        // 比较下一个操作符的优先级
        it = operatorRegistry.find(currentToken.type);
        int nextPrec = (it != operatorRegistry.end()) ? it->second.precedence : -1;

        // 处理右结合性和优先级
        if ((!isRightAssoc && tokPrec < nextPrec) || 
            (isRightAssoc && tokPrec <= nextPrec))
        {
            int newPrec = tokPrec + (!isRightAssoc ? 1 : 0);
            RHS = parseBinOpRHS(newPrec, std::move(RHS));
            if (!RHS)
                return nullptr;
        }

        // 构建二元表达式
        auto binExpr = makeExpr<BinaryExprAST>(binOp, std::move(LHS), std::move(RHS));
        binExpr->setLocation(line, column);
        LHS = std::move(binExpr);
    }
}

std::unique_ptr<ExprAST> PyParser::parseExpression()
{
    auto LHS = parsePrimary();
    if (!LHS)
        return nullptr;

    return parseBinOpRHS(0, std::move(LHS));
}

// 解析列表字面量
std::unique_ptr<ExprAST> PyParser::parseListExpr()
{
    int line = currentToken.line;
    int column = currentToken.column;
    
    nextToken();  // 消费'['
    
    std::vector<std::unique_ptr<ExprAST>> elements;
    
    // 处理空列表
    if (currentToken.type == TOK_RBRACK) {
        nextToken();  // 消费']'
        auto listExpr = makeExpr<ListExprAST>(std::move(elements));
        listExpr->setHeapAllocation(true);  // 列表总是要堆分配
        return listExpr;
    }
    
    // 解析列表元素
    while (true) {
        auto element = parseExpression();
        if (!element) return nullptr;
        elements.push_back(std::move(element));
        
        if (currentToken.type == TOK_RBRACK)
            break;
            
        if (!expectToken(TOK_COMMA, "Expected ',' or ']' in list literal"))
            return nullptr;
            
        // 处理可能的尾随逗号
        if (currentToken.type == TOK_RBRACK)
            break;
    }
    
    if (!expectToken(TOK_RBRACK, "Expected ']' at end of list literal"))
        return nullptr;
        
    auto listExpr = makeExpr<ListExprAST>(std::move(elements));
    listExpr->setHeapAllocation(true);  // 列表总是要堆分配
    return listExpr;
}

// 解析索引表达式
std::unique_ptr<ExprAST> PyParser::parseIndexExpr(std::unique_ptr<ExprAST> target)
{
    nextToken();  // 消费'['
    
    auto index = parseExpression();
    if (!index) return nullptr;
    
    if (!expectToken(TOK_RBRACK, "Expected ']' after index expression"))
        return nullptr;
        
    return makeExpr<IndexExprAST>(std::move(target), std::move(index));
}

//===----------------------------------------------------------------------===//
// 语句解析方法
//===----------------------------------------------------------------------===//

std::unique_ptr<StmtAST> PyParser::parseStatement()
{
    // 使用注册表查找解析器
    auto parser = stmtRegistry.getParser(currentToken.type);
    if (parser) {
        return parser(*this);
    }

    // 没有匹配的解析器，报告错误
    return logParseError<StmtAST>("Unknown statement type: " + 
                                lexer.getTokenName(currentToken.type));
}

std::unique_ptr<StmtAST> PyParser::parseExpressionStmt()
{
    auto expr = parseExpression();
    if (!expr)
        return nullptr;

    // 可选的分号/换行
    if (currentToken.type == TOK_NEWLINE)
        nextToken();  // 消费换行

    return makeStmt<ExprStmtAST>(std::move(expr));
}

std::unique_ptr<StmtAST> PyParser::parseReturnStmt()
{
    int line = currentToken.line;
    int column = currentToken.column;

    nextToken();  // 消费'return'

    // 处理空return语句
    if (currentToken.type == TOK_NEWLINE) {
        nextToken();  // 消费换行
        auto noneExpr = makeExpr<NoneExprAST>();
        auto stmt = makeStmt<ReturnStmtAST>(std::move(noneExpr));
        return stmt;
    }

    auto value = parseExpression();
    if (!value)
        return nullptr;

    // 确保语句后有NEWLINE，并消费它
    if (currentToken.type == TOK_NEWLINE)
        nextToken();  // 消费换行

    auto stmt = makeStmt<ReturnStmtAST>(std::move(value));
    return stmt;
}

std::unique_ptr<StmtAST> PyParser::parseIfStmt()
{
    nextToken();  // 消费'if'

    // 解析条件表达式
    auto condition = parseExpression();
    if (!condition)
        return nullptr;

    // 检查冒号
    if (!expectToken(TOK_COLON, "Expected ':' after if condition"))
        return nullptr;

    // 跳过到行尾的所有token
    while (currentToken.type != TOK_NEWLINE && currentToken.type != TOK_EOF)
        nextToken();

    // 检查换行
    if (!expectToken(TOK_NEWLINE, "Expected newline after ':'"))
        return nullptr;

    // 解析if语句体
    auto thenBody = parseBlock();
    
    // 处理elif部分
    std::vector<std::unique_ptr<StmtAST>> elseBody;
    while (currentToken.type == TOK_ELIF) {
        auto elifStmt = parseElifPart();
        if (!elifStmt)
            return nullptr;
        elseBody.push_back(std::move(elifStmt));
    }

    // 处理else部分
    if (currentToken.type == TOK_ELSE) {
        if (parseElsePart(elseBody) == nullptr)
            return nullptr;
    }

    return makeStmt<IfStmtAST>(std::move(condition), 
                             std::move(thenBody), 
                             std::move(elseBody));
}

std::unique_ptr<StmtAST> PyParser::parseElifPart()
{
    nextToken();  // 消费'elif'

    // 解析条件表达式
    auto condition = parseExpression();
    if (!condition)
        return nullptr;

    // 检查冒号
    if (!expectToken(TOK_COLON, "Expected ':' after elif condition"))
        return nullptr;

    // 跳过到行尾的所有token
    while (currentToken.type != TOK_NEWLINE && currentToken.type != TOK_EOF)
        nextToken();

    // 检查换行
    if (!expectToken(TOK_NEWLINE, "Expected newline after ':'"))
        return nullptr;

    // 解析elif语句体
    auto thenBody = parseBlock();
    
    // elif语句本质上是一个没有else的if语句
    return makeStmt<IfStmtAST>(std::move(condition), 
                             std::move(thenBody), 
                             std::vector<std::unique_ptr<StmtAST>>());
}

std::unique_ptr<StmtAST> PyParser::parseElsePart(std::vector<std::unique_ptr<StmtAST>>& elseBody)
{
    nextToken();  // 消费'else'

    // 检查冒号
    if (!expectToken(TOK_COLON, "Expected ':' after 'else'"))
        return nullptr;

    // 跳过到行尾的所有token
    while (currentToken.type != TOK_NEWLINE && currentToken.type != TOK_EOF)
        nextToken();

    // 检查换行
    if (!expectToken(TOK_NEWLINE, "Expected newline after 'else:'"))
        return nullptr;

    // 解析else语句体
    auto elseStmts = parseBlock();
    
    // 将解析到的else语句添加到传入的elseBody中
    for (auto& stmt : elseStmts) {
        elseBody.push_back(std::move(stmt));
    }

    // 返回一个空语句，表示else部分已处理
    return makeStmt<PassStmtAST>();
}

std::unique_ptr<StmtAST> PyParser::parseWhileStmt()
{
    nextToken();  // 消费'while'

    // 解析条件表达式
    auto condition = parseExpression();
    if (!condition)
        return nullptr;

    // 检查冒号
    if (!expectToken(TOK_COLON, "Expected ':' after while condition"))
        return nullptr;

    // 跳过到行尾的所有token
    while (currentToken.type != TOK_NEWLINE && currentToken.type != TOK_EOF)
        nextToken();

    // 检查换行
    if (!expectToken(TOK_NEWLINE, "Expected newline after ':'"))
        return nullptr;

    // 解析while语句体
    auto body = parseBlock();
    
    return makeStmt<WhileStmtAST>(std::move(condition), std::move(body));
}

std::unique_ptr<StmtAST> PyParser::parsePrintStmt()
{
    nextToken();  // 消费'print'

    // 检查左括号
    if (!expectToken(TOK_LPAREN, "Expected '(' after 'print'"))
        return nullptr;

    // 解析打印的表达式
    auto expr = parseExpression();
    if (!expr)
        return nullptr;

    // 检查右括号
    if (!expectToken(TOK_RPAREN, "Expected ')' after print expression"))
        return nullptr;

    // 可选的分号/换行
    if (currentToken.type == TOK_NEWLINE)
        nextToken();  // 消费换行

    return makeStmt<PrintStmtAST>(std::move(expr));
}

std::unique_ptr<StmtAST> PyParser::parseAssignStmt(const std::string& varName)
{
    // 当前token应该是ASSIGN (=)
    if (currentToken.type != TOK_ASSIGN) {
        return logParseError<StmtAST>("Expected '=' in assignment");
    }
    
    nextToken();  // 消费'='
    
    auto value = parseExpression();
    if (!value)
        return nullptr;
    
    // 检查可能的类型注解
    std::shared_ptr<PyType> typeAnnotation = tryParseTypeAnnotation();
    
    // 可选的换行
    if (currentToken.type == TOK_NEWLINE)
        nextToken();  // 消费换行
    
    // 创建带类型注解的赋值语句
    auto stmt = makeStmt<AssignStmtAST>(varName, std::move(value));
    
    // 如果有类型注解，存储起来
    if (typeAnnotation) {
        // 使用typeAnnotation (需要扩展AssignStmtAST以支持类型注解)
    }
    
    return stmt;
}

std::unique_ptr<StmtAST> PyParser::parseForStmt()
{
    // For语句暂时不实现，返回错误
    return logParseError<StmtAST>("For statements not yet implemented");
}

std::unique_ptr<StmtAST> PyParser::parseImportStmt()
{
    nextToken();  // 消费'import'

    // 导入的模块名必须是标识符
    if (currentToken.type != TOK_IDENTIFIER) {
        return logParseError<StmtAST>("Expected module name after 'import'");
    }
    
    std::string moduleName = currentToken.value;
    nextToken();  // 消费模块名
    
    // 检查是否有别名
    std::string alias = "";
    if (currentToken.type == TOK_AS) {
        nextToken();  // 消费'as'
        
        if (currentToken.type != TOK_IDENTIFIER) {
            return logParseError<StmtAST>("Expected identifier after 'as'");
        }
        
        alias = currentToken.value;
        nextToken();  // 消费别名
    }
    
    // 可选的换行
    if (currentToken.type == TOK_NEWLINE)
        nextToken();  // 消费换行
    
    return makeStmt<ImportStmtAST>(moduleName, alias);
}

std::unique_ptr<StmtAST> PyParser::parsePassStmt()
{
    nextToken();  // 消费'pass'
    
    // 可选的换行
    if (currentToken.type == TOK_NEWLINE)
        nextToken();  // 消费换行
    
    return makeStmt<PassStmtAST>();
}

std::unique_ptr<StmtAST> PyParser::parseClassDefinition()
{
    nextToken();  // 消费'class'
    
    // 类名必须是标识符
    if (currentToken.type != TOK_IDENTIFIER) {
        return logParseError<StmtAST>("Expected class name after 'class'");
    }
    
    std::string className = currentToken.value;
    nextToken();  // 消费类名
    
    // 解析可能的基类列表
    std::vector<std::string> baseClasses;
    if (currentToken.type == TOK_LPAREN) {
        nextToken();  // 消费'('
        
        // 空的基类列表
        if (currentToken.type != TOK_RPAREN) {
            while (true) {
                if (currentToken.type != TOK_IDENTIFIER) {
                    return logParseError<StmtAST>("Expected base class name in inheritance list");
                }
                
                baseClasses.push_back(currentToken.value);
                nextToken();  // 消费基类名
                
                if (currentToken.type == TOK_RPAREN)
                    break;
                    
                if (!expectToken(TOK_COMMA, "Expected ')' or ',' in base class list"))
                    return nullptr;
            }
        }
        
        nextToken();  // 消费')'
    }
    
    // 检查冒号
    if (!expectToken(TOK_COLON, "Expected ':' after class definition"))
        return nullptr;
        
    // 跳过到行尾的所有token
    while (currentToken.type != TOK_NEWLINE && currentToken.type != TOK_EOF)
        nextToken();
        
    // 检查换行
    if (!expectToken(TOK_NEWLINE, "Expected newline after ':'"))
        return nullptr;
        
    // 检查缩进
    if (!expectToken(TOK_INDENT, "Expected indented block after class definition"))
        return nullptr;
        
    // 解析类体
    std::vector<std::unique_ptr<StmtAST>> classBody;
    std::vector<std::unique_ptr<FunctionAST>> methods;
    
    while (currentToken.type != TOK_DEDENT && currentToken.type != TOK_EOF) {
        // 跳过空行
        if (currentToken.type == TOK_NEWLINE) {
            nextToken();
            continue;
        }
        
        // 如果遇到dedent，说明块结束了
        if (currentToken.type == TOK_DEDENT || currentToken.type == TOK_EOF)
            break;
            
        // 解析方法定义 (以def开头)
        if (currentToken.type == TOK_DEF) {
            auto method = parseFunction();
            if (!method)
                return nullptr;
                
            methods.push_back(std::move(method));
        }
        // 解析其他类体语句
        else {
            auto stmt = parseStatement();
            if (!stmt)
                return nullptr;
                
            classBody.push_back(std::move(stmt));
        }
    }
    
    // 检查dedent
    if (!expectToken(TOK_DEDENT, "Expected dedent after class body"))
        return nullptr;
        
    return makeStmt<ClassStmtAST>(className, baseClasses, 
                                std::move(classBody), 
                                std::move(methods));
}

std::vector<ParamAST> PyParser::parseParameters()
{
    std::vector<ParamAST> params;
    
    if (!expectToken(TOK_LPAREN, "Expected '(' in parameter list"))
        return params;
        
    // 空参数列表
    if (currentToken.type == TOK_RPAREN) {
        nextToken();  // 消费')'
        return params;
    }
    
    // 解析参数列表
    while (true) {
        if (currentToken.type != TOK_IDENTIFIER) {
            logParseError<ParamAST>("Expected parameter name");
            return params;
        }
        
        std::string paramName = currentToken.value;
        nextToken();  // 消费参数名
        
        // 检查是否有类型注解
        std::string typeName = "";
        if (currentToken.type == TOK_COLON) {
            nextToken();  // 消费':'
            
            if (currentToken.type != TOK_IDENTIFIER) {
                logParseError<ParamAST>("Expected type name after ':'");
                return params;
            }
            
            typeName = currentToken.value;
            nextToken();  // 消费类型名
        }
        
        params.emplace_back(paramName, typeName);
        
        if (currentToken.type == TOK_RPAREN)
            break;
            
        if (!expectToken(TOK_COMMA, "Expected ')' or ',' in parameter list"))
            return params;
    }
    
    nextToken();  // 消费')'
    return params;
}

std::string PyParser::parseReturnTypeAnnotation()
{
    std::string returnType = "";
    
    if (currentToken.type == TOK_ARROW) {
        nextToken();  // 消费'->'
        
        if (currentToken.type != TOK_IDENTIFIER) {
            logParseError<std::string>("Expected return type after '->'");
            return returnType;
        }
        
        returnType = currentToken.value;
        nextToken();  // 消费返回类型
    }
    
    return returnType;
}

std::unique_ptr<FunctionAST> PyParser::parseFunction()
{
    nextToken();  // 消费'def'
    
    // 函数名必须是标识符
    if (currentToken.type != TOK_IDENTIFIER) {
        return logParseError<FunctionAST>("Expected function name after 'def'");
    }
    
    std::string funcName = currentToken.value;
    nextToken();  // 消费函数名
    
    // 解析参数列表
    auto params = parseParameters();
    
    // 解析可能的返回类型注解
    std::string returnType = parseReturnTypeAnnotation();
    
    // 检查冒号
    if (!expectToken(TOK_COLON, "Expected ':' after function signature"))
        return nullptr;
        
    // 跳过到行尾的所有token
    while (currentToken.type != TOK_NEWLINE && currentToken.type != TOK_EOF)
        nextToken();
        
    // 检查换行
    if (!expectToken(TOK_NEWLINE, "Expected newline after ':'"))
        return nullptr;
        
    // 解析函数体
    auto body = parseBlock();
    
    // 创建函数AST
    auto result = std::make_unique<FunctionAST>(funcName, std::move(params), 
                                              returnType, std::move(body));
    result->setLocation(currentToken.line, currentToken.column);
    
        // 设置返回类型自动推断标志
        if (returnType == "auto" || returnType.empty()) {
            result->resolveParamTypes();
        }
    
    return result;
}

std::vector<std::unique_ptr<StmtAST>> PyParser::parseBlock()
{
    std::vector<std::unique_ptr<StmtAST>> statements;
    
    // 块必须以缩进开始
    if (!expectToken(TOK_INDENT, "Expected indented block"))
        return statements;
    
    // 解析块中的所有语句，直到遇到dedent
    while (currentToken.type != TOK_DEDENT && currentToken.type != TOK_EOF) {
        // 跳过空行
        if (currentToken.type == TOK_NEWLINE) {
            nextToken();
            continue;
        }
        
        // 解析语句
        auto stmt = parseStatement();
        if (!stmt)
            continue; // 错误恢复 - 继续解析其余语句
        
        statements.push_back(std::move(stmt));
    }
    
    // 消费dedent
    if (currentToken.type == TOK_DEDENT)
        nextToken();
    
    return statements;
}

std::unique_ptr<ModuleAST> PyParser::parseModule()
{
    std::string moduleName = "main"; // 默认模块名
    std::vector<std::unique_ptr<StmtAST>> topLevelStmts;
    std::vector<std::unique_ptr<FunctionAST>> functions;
    
    // 解析文件中的所有语句
    while (currentToken.type != TOK_EOF) {
        // 跳过多余的空行
        if (currentToken.type == TOK_NEWLINE) {
            nextToken();
            continue;
        }
        
        // 解析函数定义
        if (currentToken.type == TOK_DEF) {
            auto func = parseFunction();
            if (func)
                functions.push_back(std::move(func));
        }
        // 解析类定义（类也是顶级语句）
        else if (currentToken.type == TOK_CLASS) {
            auto classStmt = parseClassDefinition();
            if (classStmt)
                topLevelStmts.push_back(std::move(classStmt));
        }
        // 解析其他顶级语句
        else {
            auto stmt = parseStatement();
            if (stmt)
                topLevelStmts.push_back(std::move(stmt));
        }
    }
    
    // 创建模块AST
    auto module = std::make_unique<ModuleAST>(moduleName, 
                                             std::move(topLevelStmts), 
                                             std::move(functions));
    return module;
}
std::shared_ptr<PyType> PyParser::tryParseTypeAnnotation()
{
    // 保存当前解析状态以便回溯
    auto state = saveState();
    
    // 尝试解析类型注解
    if (currentToken.type == TOK_COLON) {
        nextToken(); // 消费冒号
        
        auto typeAnnotation = parseTypeAnnotation();
        if (typeAnnotation) {
            return typeAnnotation;
        }
    }
    
    // 没有解析到类型注解，恢复状态
    restoreState(state);
    return nullptr;
}

std::shared_ptr<PyType> PyParser::parseTypeAnnotation()
{
    // 基本类型直接对应标识符
    if (currentToken.type == TOK_IDENTIFIER) {
        std::string typeName = currentToken.value;
        nextToken(); // 消费类型名
        
        // 检查是否有泛型参数，如list[int]
        if (currentToken.type == TOK_LBRACK) {
            nextToken(); // 消费'['
            
            // 解析列表元素类型
            if (typeName == "list") {
                auto elemType = parseTypeAnnotation();
                if (!elemType) {
                    return logParseError<PyType>("Expected type in list[]");
                }
                
                if (!expectToken(TOK_RBRACK, "Expected ']' after list element type"))
                    return nullptr;
                
                return PyType::getList(elemType);
            }
            // 解析字典类型：dict[KeyType, ValueType]
            else if (typeName == "dict") {
                auto keyType = parseTypeAnnotation();
                if (!keyType) {
                    return logParseError<PyType>("Expected key type in dict[]");
                }
                
                if (!expectToken(TOK_COMMA, "Expected ',' after dict key type"))
                    return nullptr;
                
                auto valueType = parseTypeAnnotation();
                if (!valueType) {
                    return logParseError<PyType>("Expected value type in dict[]");
                }
                
                if (!expectToken(TOK_RBRACK, "Expected ']' after dict value type"))
                    return nullptr;
                
                return PyType::getDict(keyType, valueType);
            }
            else {
                return logParseError<PyType>("Unsupported generic type: " + typeName);
            }
        }
        
        // 处理基本类型
        return PyType::fromString(typeName);
    }
    
    return logParseError<PyType>("Expected type name");
}

//===----------------------------------------------------------------------===//
// PyTypeParser 类实现
//===----------------------------------------------------------------------===//

std::shared_ptr<PyType> PyTypeParser::parseType(const std::string& typeStr)
{
    // 如果类型字符串为空，返回Any类型
    if (typeStr.empty()) {
        return PyType::getAny();
    }
    
    // 检查是否是列表类型
    size_t listPos = typeStr.find("list[");
    if (listPos == 0 && typeStr.back() == ']') {
        return parseListType(typeStr);
    }
    
    // 检查是否是字典类型
    size_t dictPos = typeStr.find("dict[");
    if (dictPos == 0 && typeStr.back() == ']') {
        return parseDictType(typeStr);
    }
    
    // 处理基本类型
    return parsePrimitiveType(typeStr);
}

std::shared_ptr<PyType> PyTypeParser::parsePrimitiveType(const std::string& name)
{
    if (name == "int") return PyType::getInt();
    if (name == "float" || name == "double") return PyType::getDouble();
    if (name == "bool") return PyType::getBool();
    if (name == "str" || name == "string") return PyType::getString();
    if (name == "None" || name == "void") return PyType::getVoid();
    if (name == "any" || name == "Any") return PyType::getAny();
    
    // 未知类型当作动态类型处理
    return PyType::getAny();
}

std::shared_ptr<PyType> PyTypeParser::parseListType(const std::string& typeStr)
{
    // 从list[ElementType]中提取ElementType
    size_t start = typeStr.find('[') + 1;
    size_t end = typeStr.rfind(']');
    
    if (start >= end || start == std::string::npos || end == std::string::npos) {
        // 解析错误，返回列表<any>类型
        return PyType::getList(PyType::getAny());
    }
    
    std::string elementTypeStr = typeStr.substr(start, end - start);
    auto elementType = parseType(elementTypeStr);
    
    return PyType::getList(elementType);
}

std::shared_ptr<PyType> PyTypeParser::parseDictType(const std::string& typeStr)
{
    // 从dict[KeyType, ValueType]中提取KeyType和ValueType
    size_t start = typeStr.find('[') + 1;
    size_t end = typeStr.rfind(']');
    
    if (start >= end || start == std::string::npos || end == std::string::npos) {
        // 解析错误，返回dict<any, any>类型
        return PyType::getDict(PyType::getAny(), PyType::getAny());
    }
    
    std::string innerTypes = typeStr.substr(start, end - start);
    
    // 查找逗号分隔的两个类型
    size_t commaPos = innerTypes.find(',');
    if (commaPos == std::string::npos) {
        // 解析错误，返回dict<any, any>类型
        return PyType::getDict(PyType::getAny(), PyType::getAny());
    }
    
    std::string keyTypeStr = innerTypes.substr(0, commaPos);
    std::string valueTypeStr = innerTypes.substr(commaPos + 1);
    
    // 去除可能的空格
    keyTypeStr.erase(remove_if(keyTypeStr.begin(), keyTypeStr.end(), isspace), keyTypeStr.end());
    valueTypeStr.erase(remove_if(valueTypeStr.begin(), valueTypeStr.end(), isspace), valueTypeStr.end());
    
    auto keyType = parseType(keyTypeStr);
    auto valueType = parseType(valueTypeStr);
    
    return PyType::getDict(keyType, valueType);
}

template<typename T>
std::vector<T> PyParser::parseDelimitedList(PyTokenType start, PyTokenType end, PyTokenType separator,
                                          std::function<T()> parseElement)
{
    std::vector<T> elements;
    
    // 消费开始标记
    if (!expectToken(start, "Expected delimiter"))
        return elements;
    
    // 处理空列表
    if (currentToken.type == end) {
        nextToken(); // 消费结束标记
        return elements;
    }
    
    // 解析元素列表
    while (true) {
        // 解析一个元素
        auto element = parseElement();
        elements.push_back(std::move(element));
        
        // 如果遇到结束标记，退出循环
        if (currentToken.type == end)
            break;
        
        // 否则应该遇到分隔符
        if (!expectToken(separator, "Expected separator or end delimiter"))
            break;
        
        // 处理可能的尾随分隔符
        if (currentToken.type == end)
            break;
    }
    
    // 消费结束标记
    if (!expectToken(end, "Expected end delimiter"))
        return elements;
    
    return elements;
}

}
