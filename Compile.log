DEBUG Mode: Using provided input file: test.py
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - Entering generateModule. isEntryPoint=true
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - Module resources initialized (runtime functions, global ctor).
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Context saved *before* __llvmpy_entry setup: Func=<null Function>, IP=<invalid IP>
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Processing as entry point module.
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Got entry function: __llvmpy_entry
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Created new entry block for __llvmpy_entry: entry
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Set initial insert point in __llvmpy_entry.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Set current function to __llvmpy_entry. Saved context: Func=<null Function>, IP=<invalid IP>
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Starting statement loop in __llvmpy_entry. Initial block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 12 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'print_test_result'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'print_test_result' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'print_test_result' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'print_test_result'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'print_test_result'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'print_test_result.L12.C1' for Python name 'print_test_result'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'print_test_result'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int, int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'print_test_result.L12.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: print_test_result.L12.C1 with name 'print_test_result.L12.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568072224 -> LLVM Func print_test_result.L12.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'print_test_result.L12.C1'...
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: print_test_result.L12.C1
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 2 at line 4
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: entry, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %passed_val)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from entry on   %condval = call i1 @py_object_to_bool(ptr %passed_val) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement exists (not null). Kind: 13
DEBUG:        Else statement is NOT IfStmtAST. Treating as final 'else' block.
DEBUG:            Else statement is BlockStmtAST. Calling handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for else block. Current block: else
DEBUG:        Final 'else' block (else) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Generating cleanups for scope level 3 in block ifcont
Debug [PySymbolTable]: Generating DecRef for local var 'passed' in scope 3
Debug [PySymbolTable]: Generating DecRef for local var 'test_name' in scope 3
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Checking for default return for 'print_test_result.L12.C1'. Last block: ifcont
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Adding default return to block ifcont
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Cleaning up function resources for 'print_test_result.L12.C1'...
[HdlFuncDef] CurFunc: print_test_result.L12.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'print_test_result.L12.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'print_test_result.L12.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'print_test_result' (LLVM: print_test_result.L12.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'print_test_result'. Got LLVM Func: define internal ptr @print_test_result.L12.C1(ptr %0, ptr %1) {
entry:
  %passed.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  store ptr %0, ptr %test_name.addr, align 8
  call void @py_incref(ptr %0)
  store ptr %1, ptr %passed.addr, align 8
  call void @py_incref(ptr %1)
  %passed_val = load ptr, ptr %passed.addr, align 8
  %condval = call i1 @py_object_to_bool(ptr %passed_val)
  br i1 %condval, label %then, label %else

ifcont:                                           ; preds = %else, %then
  %passed_scope_end_load = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_scope_end_load)
  %test_name_scope_end_load = load ptr, ptr %test_name.addr, align 8
  call void @py_decref(ptr %test_name_scope_end_load)
  %none = call ptr @py_get_none()
  ret ptr %none

then:                                             ; preds = %entry
  %str_obj = call ptr @py_create_string(ptr @str_const)
  call void @py_print_object(ptr %str_obj)
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  call void @py_print_object(ptr %test_name_val)
  br label %ifcont

else:                                             ; preds = %entry
  %str_obj1 = call ptr @py_create_string(ptr @str_const.1)
  call void @py_print_object(ptr %str_obj1)
  %test_name_val2 = load ptr, ptr %test_name.addr, align 8
  call void @py_print_object(ptr %test_name_val2)
  br label %ifcont
}
 ('print_test_result.L12.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'print_test_result'...
Debug [CodeGenType]: Resolved static FunctionType for 'print_test_result' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'print_test_result'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'print_test_result.L12.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'print_test_result'. Value:   %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'print_test_result' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @print_test_result_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @print_test_result_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'print_test_result' to storage: @print_test_result_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'print_test_result'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'print_test_result'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 34 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'test_for_else_normal_completion'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'test_for_else_normal_completion' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'test_for_else_normal_completion' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'test_for_else_normal_completion'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'test_for_else_normal_completion'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'test_for_else_normal_completion.L34.C1' for Python name 'test_for_else_normal_completion'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'test_for_else_normal_completion'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'test_for_else_normal_completion.L34.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: test_for_else_normal_completion.L34.C1 with name 'test_for_else_normal_completion.L34.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568143872 -> LLVM Func test_for_else_normal_completion.L34.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'test_for_else_normal_completion.L34.C1'...
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: test_for_else_normal_completion.L34.C1
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 13
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 14
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 15
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 16
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 27 at line 17
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.body
Debug [PySymbolTable]: Generating DecRef for local var 'loop_executed_count' in scope 4
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.else
Debug [PySymbolTable]: Generating DecRef for local var 'else_executed' in scope 4
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 8 at line 22
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 2 at line 23
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: for.end, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from for.end on   %condval = call i1 @py_object_to_bool(ptr %cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont9
DEBUG:    [Pre] Original Insert BB: then, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont9
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval10 = call i1 @py_object_to_bool(ptr %else_executed_val)
DEBUG:      [2] Created blocks: thenBB=then11, elseEntryBB=else12
DEBUG:      [3] Creating CondBr from then on   %condval10 = call i1 @py_object_to_bool(ptr %else_executed_val) ? then11 : else12
DEBUG:      [4] Handling 'then' branch (Block: then11)
DEBUG:          Set insert point to: then11
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then11
DEBUG:          'then' block (then11) did not terminate. Creating Br to finalMergeBB (ifcont9)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else12)
DEBUG:          Set insert point to: else12
DEBUG:          Else statement exists (not null). Kind: 13
DEBUG:          Else statement is NOT IfStmtAST. Treating as final 'else' block.
DEBUG:              Else statement is BlockStmtAST. Calling handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:              Returned from handleBlock for else block. Current block: else12
DEBUG:          Final 'else' block (else12) did not terminate. Creating Br to finalMergeBB (ifcont9)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else12
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont9)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont9
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont9
DEBUG:        'then' block (ifcont9) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement exists (not null). Kind: 13
DEBUG:        Else statement is NOT IfStmtAST. Treating as final 'else' block.
DEBUG:            Else statement is BlockStmtAST. Calling handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for else block. Current block: else
DEBUG:        Final 'else' block (else) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Body: Handling Stmt Kind 9 at line 0
[HdlCallExpr] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Generating runtime call via py_call_function for 'print_test_result'
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Body: Handling Stmt Kind 6 at line 33
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Checking for default return for 'test_for_else_normal_completion.L34.C1'. Last block: ifcont
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Cleaning up function resources for 'test_for_else_normal_completion.L34.C1'...
[HdlFuncDef] CurFunc: test_for_else_normal_completion.L34.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'test_for_else_normal_completion.L34.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'test_for_else_normal_completion.L34.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'test_for_else_normal_completion' (LLVM: test_for_else_normal_completion.L34.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'test_for_else_normal_completion'. Got LLVM Func: define internal ptr @test_for_else_normal_completion.L34.C1() {
entry:
  %callargs_array = alloca ptr, i32 2, align 8
  %passed.addr = alloca ptr, align 8
  %item.addr = alloca ptr, align 8
  %else_executed.addr = alloca ptr, align 8
  %loop_executed_count.addr = alloca ptr, align 8
  %items.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.2)
  store ptr %str_obj, ptr %test_name.addr, align 8
  call void @py_incref(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.3, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.4, i32 10)
  %list_obj = call ptr @py_create_list(i32 3, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  store ptr %list_obj, ptr %items.addr, align 8
  call void @py_incref(ptr %list_obj)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.5, i32 10)
  store ptr %int_obj_from_str3, ptr %loop_executed_count.addr, align 8
  call void @py_incref(ptr %int_obj_from_str3)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %items_val = load ptr, ptr %items.addr, align 8
  %iterator = call ptr @py_iter(ptr %items_val)
  %is_iter_null = icmp eq ptr %iterator, null
  br i1 %is_iter_null, label %iter.error, label %iter.ok

iter.error:                                       ; preds = %entry
  call void @py_runtime_error(ptr @TypeError_NotIterable_str, i32 17)
  unreachable

iter.ok:                                          ; preds = %entry
  br label %for.header

for.header:                                       ; preds = %for.body, %iter.ok
  %next_item_or_stop = call ptr @py_next(ptr %iterator)
  %is_stop_iteration = icmp eq ptr %next_item_or_stop, null
  br i1 %is_stop_iteration, label %for.stop_iteration, label %for.body

for.body:                                         ; preds = %for.header
  store ptr null, ptr %item.addr, align 8
  %old_item = load ptr, ptr %item.addr, align 8
  call void @py_decref(ptr %old_item)
  store ptr %next_item_or_stop, ptr %item.addr, align 8
  call void @py_incref(ptr %next_item_or_stop)
  %loop_executed_count_val = load ptr, ptr %loop_executed_count.addr, align 8
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.6, i32 10)
  %binop_result = call ptr @py_object_add(ptr %loop_executed_count_val, ptr %int_obj_from_str4), !py.type !0
  %loop_executed_count_old = load ptr, ptr %loop_executed_count.addr, align 8
  call void @py_decref(ptr %loop_executed_count_old)
  store ptr %binop_result, ptr %loop_executed_count.addr, align 8
  call void @py_incref(ptr %binop_result)
  %loop_executed_count_scope_end_load = load ptr, ptr %loop_executed_count.addr, align 8
  call void @py_decref(ptr %loop_executed_count_scope_end_load)
  br label %for.header

for.end:                                          ; preds = %for.else
  %bool_obj6 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj6, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj6)
  %loop_executed_count_val7 = load ptr, ptr %loop_executed_count.addr, align 8
  %int_obj_from_str8 = call ptr @py_create_int_bystring(ptr @int_str_const.7, i32 10)
  %cmp_result = call ptr @py_object_compare(ptr %loop_executed_count_val7, ptr %int_obj_from_str8, i32 0), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval, label %then, label %else

for.stop_iteration:                               ; preds = %for.header
  call void @py_decref(ptr %iterator)
  br label %for.else

for.else:                                         ; preds = %for.stop_iteration
  %bool_obj5 = call ptr @py_create_bool(i1 true)
  %else_executed_old = load ptr, ptr %else_executed.addr, align 8
  call void @py_decref(ptr %else_executed_old)
  store ptr %bool_obj5, ptr %else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj5)
  %else_executed_scope_end_load = load ptr, ptr %else_executed.addr, align 8
  call void @py_decref(ptr %else_executed_scope_end_load)
  br label %for.end

ifcont:                                           ; preds = %else, %ifcont9
  %print_test_result_callable_loaded = load ptr, ptr @print_test_result_obj_gv, align 8
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  %passed_val = load ptr, ptr %passed.addr, align 8
  call void @py_incref(ptr %test_name_val)
  call void @py_incref(ptr %passed_val)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %test_name_val, ptr %arg_ptr_0, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array, i32 1
  store ptr %passed_val, ptr %arg_ptr_1, align 8
  %call_result = call ptr @py_call_function(ptr %print_test_result_callable_loaded, i32 2, ptr %callargs_array)
  %passed_val18 = load ptr, ptr %passed.addr, align 8
  ret ptr %passed_val18

then:                                             ; preds = %for.end
  %else_executed_val = load ptr, ptr %else_executed.addr, align 8
  %condval10 = call i1 @py_object_to_bool(ptr %else_executed_val)
  br i1 %condval10, label %then11, label %else12

else:                                             ; preds = %for.end
  %bool_obj16 = call ptr @py_create_bool(i1 false)
  %passed_old17 = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old17)
  store ptr %bool_obj16, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj16)
  br label %ifcont

ifcont9:                                          ; preds = %else12, %then11
  br label %ifcont

then11:                                           ; preds = %then
  %bool_obj13 = call ptr @py_create_bool(i1 true)
  %passed_old = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old)
  store ptr %bool_obj13, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj13)
  br label %ifcont9

else12:                                           ; preds = %then
  %bool_obj14 = call ptr @py_create_bool(i1 false)
  %passed_old15 = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old15)
  store ptr %bool_obj14, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj14)
  br label %ifcont9
}
 ('test_for_else_normal_completion.L34.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'test_for_else_normal_completion'...
Debug [CodeGenType]: Resolved static FunctionType for 'test_for_else_normal_completion' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'test_for_else_normal_completion'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'test_for_else_normal_completion.L34.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'test_for_else_normal_completion'. Value:   %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'test_for_else_normal_completion' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @test_for_else_normal_completion_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @test_for_else_normal_completion_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'test_for_else_normal_completion' to storage: @test_for_else_normal_completion_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'test_for_else_normal_completion'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'test_for_else_normal_completion'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 58 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'test_for_else_with_break'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'test_for_else_with_break' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'test_for_else_with_break' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'test_for_else_with_break'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'test_for_else_with_break'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'test_for_else_with_break.L58.C1' for Python name 'test_for_else_with_break'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'test_for_else_with_break'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'test_for_else_with_break.L58.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: test_for_else_with_break.L58.C1 with name 'test_for_else_with_break.L58.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568148944 -> LLVM Func test_for_else_with_break.L58.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'test_for_else_with_break.L58.C1'...
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: test_for_else_with_break.L58.C1
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 35
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 36
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 37
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 38
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 27 at line 39
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: for.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from for.body on   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) already terminated.
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block ifcont
Debug [PySymbolTable]: Generating DecRef for local var 'loop_executed_count' in scope 4
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.else
Debug [PySymbolTable]: Generating DecRef for local var 'else_executed' in scope 4
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 8 at line 49
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 2 at line 50
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont10
DEBUG:    [Pre] Original Insert BB: for.end, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont10
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval13 = call i1 @py_object_to_bool(ptr %cmp_result)
DEBUG:    [2] Created blocks: thenBB=then14, elseEntryBB=else15
DEBUG:    [3] Creating CondBr from for.end on   %condval13 = call i1 @py_object_to_bool(ptr %cmp_result) ? then14 : else15
DEBUG:    [4] Handling 'then' branch (Block: then14)
DEBUG:        Set insert point to: then14
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont16
DEBUG:    [Pre] Original Insert BB: then14, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont16
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval17 = call i1 @py_object_to_bool(ptr %unaryop_result)
DEBUG:      [2] Created blocks: thenBB=then18, elseEntryBB=else19
DEBUG:      [3] Creating CondBr from then14 on   %condval17 = call i1 @py_object_to_bool(ptr %unaryop_result) ? then18 : else19
DEBUG:      [4] Handling 'then' branch (Block: then18)
DEBUG:          Set insert point to: then18
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then18
DEBUG:          'then' block (then18) did not terminate. Creating Br to finalMergeBB (ifcont16)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else19)
DEBUG:          Set insert point to: else19
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else19) to finalMergeBB (ifcont16)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else19
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont16)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont16
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont16
DEBUG:        'then' block (ifcont16) did not terminate. Creating Br to finalMergeBB (ifcont10)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else15)
DEBUG:        Set insert point to: else15
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else15) to finalMergeBB (ifcont10)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else15
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont10)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont10
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: ifcont10, CurIP: {Block: ifcont10, Point: end} - Body: Handling Stmt Kind 9 at line 0
[HdlCallExpr] CurFunc: test_for_else_with_break.L58.C1, CurBlock: ifcont10, CurIP: {Block: ifcont10, Point: end} - Generating runtime call via py_call_function for 'print_test_result'
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: ifcont10, CurIP: {Block: ifcont10, Point: end} - Body: Handling Stmt Kind 6 at line 57
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: ifcont10, CurIP: {Block: ifcont10, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: ifcont10, CurIP: {Block: ifcont10, Point: end} - Checking for default return for 'test_for_else_with_break.L58.C1'. Last block: ifcont10
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: ifcont10, CurIP: {Block: ifcont10, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: ifcont10, CurIP: {Block: ifcont10, Point: end} - Cleaning up function resources for 'test_for_else_with_break.L58.C1'...
[HdlFuncDef] CurFunc: test_for_else_with_break.L58.C1, CurBlock: ifcont10, CurIP: {Block: ifcont10, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'test_for_else_with_break.L58.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'test_for_else_with_break.L58.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'test_for_else_with_break' (LLVM: test_for_else_with_break.L58.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'test_for_else_with_break'. Got LLVM Func: define internal ptr @test_for_else_with_break.L58.C1() {
entry:
  %callargs_array = alloca ptr, i32 2, align 8
  %passed.addr = alloca ptr, align 8
  %item.addr = alloca ptr, align 8
  %else_executed.addr = alloca ptr, align 8
  %loop_executed_count.addr = alloca ptr, align 8
  %items.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.8)
  store ptr %str_obj, ptr %test_name.addr, align 8
  call void @py_incref(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.9, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.10, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.11, i32 10)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.12, i32 10)
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.13, i32 10)
  %list_obj = call ptr @py_create_list(i32 5, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %3 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str3)
  %4 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str4)
  store ptr %list_obj, ptr %items.addr, align 8
  call void @py_incref(ptr %list_obj)
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.14, i32 10)
  store ptr %int_obj_from_str5, ptr %loop_executed_count.addr, align 8
  call void @py_incref(ptr %int_obj_from_str5)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %items_val = load ptr, ptr %items.addr, align 8
  %iterator = call ptr @py_iter(ptr %items_val)
  %is_iter_null = icmp eq ptr %iterator, null
  br i1 %is_iter_null, label %iter.error, label %iter.ok

iter.error:                                       ; preds = %entry
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.15, i32 39)
  unreachable

iter.ok:                                          ; preds = %entry
  br label %for.header

for.header:                                       ; preds = %ifcont, %iter.ok
  %next_item_or_stop = call ptr @py_next(ptr %iterator)
  %is_stop_iteration = icmp eq ptr %next_item_or_stop, null
  br i1 %is_stop_iteration, label %for.stop_iteration, label %for.body

for.body:                                         ; preds = %for.header
  store ptr null, ptr %item.addr, align 8
  %old_item = load ptr, ptr %item.addr, align 8
  call void @py_decref(ptr %old_item)
  store ptr %next_item_or_stop, ptr %item.addr, align 8
  call void @py_incref(ptr %next_item_or_stop)
  %item_val = load ptr, ptr %item.addr, align 8
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.16, i32 10)
  %any_cmp_result = call ptr @py_object_compare(ptr %item_val, ptr %int_obj_from_str6, i32 0), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %then, label %else

for.end:                                          ; preds = %for.else, %then
  %bool_obj9 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj9, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj9)
  %loop_executed_count_val11 = load ptr, ptr %loop_executed_count.addr, align 8
  %int_obj_from_str12 = call ptr @py_create_int_bystring(ptr @int_str_const.18, i32 10)
  %cmp_result = call ptr @py_object_compare(ptr %loop_executed_count_val11, ptr %int_obj_from_str12, i32 0), !py.type !1
  %condval13 = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval13, label %then14, label %else15

for.stop_iteration:                               ; preds = %for.header
  call void @py_decref(ptr %iterator)
  br label %for.else

for.else:                                         ; preds = %for.stop_iteration
  %bool_obj8 = call ptr @py_create_bool(i1 true)
  %else_executed_old = load ptr, ptr %else_executed.addr, align 8
  call void @py_decref(ptr %else_executed_old)
  store ptr %bool_obj8, ptr %else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj8)
  %else_executed_scope_end_load = load ptr, ptr %else_executed.addr, align 8
  call void @py_decref(ptr %else_executed_scope_end_load)
  br label %for.end

ifcont:                                           ; preds = %else
  %loop_executed_count_val = load ptr, ptr %loop_executed_count.addr, align 8
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.17, i32 10)
  %binop_result = call ptr @py_object_add(ptr %loop_executed_count_val, ptr %int_obj_from_str7), !py.type !0
  %loop_executed_count_old = load ptr, ptr %loop_executed_count.addr, align 8
  call void @py_decref(ptr %loop_executed_count_old)
  store ptr %binop_result, ptr %loop_executed_count.addr, align 8
  call void @py_incref(ptr %binop_result)
  %loop_executed_count_scope_end_load = load ptr, ptr %loop_executed_count.addr, align 8
  call void @py_decref(ptr %loop_executed_count_scope_end_load)
  br label %for.header

then:                                             ; preds = %for.body
  br label %for.end

else:                                             ; preds = %for.body
  br label %ifcont

ifcont10:                                         ; preds = %else15, %ifcont16
  %print_test_result_callable_loaded = load ptr, ptr @print_test_result_obj_gv, align 8
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  %passed_val = load ptr, ptr %passed.addr, align 8
  call void @py_incref(ptr %test_name_val)
  call void @py_incref(ptr %passed_val)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %test_name_val, ptr %arg_ptr_0, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array, i32 1
  store ptr %passed_val, ptr %arg_ptr_1, align 8
  %call_result = call ptr @py_call_function(ptr %print_test_result_callable_loaded, i32 2, ptr %callargs_array)
  %passed_val21 = load ptr, ptr %passed.addr, align 8
  ret ptr %passed_val21

then14:                                           ; preds = %for.end
  %else_executed_val = load ptr, ptr %else_executed.addr, align 8
  %unaryop_result = call ptr @py_object_not(ptr %else_executed_val)
  %condval17 = call i1 @py_object_to_bool(ptr %unaryop_result)
  br i1 %condval17, label %then18, label %else19

else15:                                           ; preds = %for.end
  br label %ifcont10

ifcont16:                                         ; preds = %else19, %then18
  br label %ifcont10

then18:                                           ; preds = %then14
  %bool_obj20 = call ptr @py_create_bool(i1 true)
  %passed_old = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old)
  store ptr %bool_obj20, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj20)
  br label %ifcont16

else19:                                           ; preds = %then14
  br label %ifcont16
}
 ('test_for_else_with_break.L58.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'test_for_else_with_break'...
Debug [CodeGenType]: Resolved static FunctionType for 'test_for_else_with_break' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'test_for_else_with_break'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'test_for_else_with_break.L58.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'test_for_else_with_break'. Value:   %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'test_for_else_with_break' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @test_for_else_with_break_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @test_for_else_with_break_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'test_for_else_with_break' to storage: @test_for_else_with_break_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'test_for_else_with_break'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'test_for_else_with_break'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 81 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'test_for_else_with_continue'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'test_for_else_with_continue' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'test_for_else_with_continue' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'test_for_else_with_continue'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'test_for_else_with_continue'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'test_for_else_with_continue.L81.C1' for Python name 'test_for_else_with_continue'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'test_for_else_with_continue'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'test_for_else_with_continue.L81.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: test_for_else_with_continue.L81.C1 with name 'test_for_else_with_continue.L81.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568153920 -> LLVM Func test_for_else_with_continue.L81.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'test_for_else_with_continue.L81.C1'...
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: test_for_else_with_continue.L81.C1
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 59
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 60
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 61
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 62
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 27 at line 63
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: for.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from for.body on   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) already terminated.
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block ifcont
Debug [PySymbolTable]: Generating DecRef for local var 'processed_sum' in scope 4
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.else
Debug [PySymbolTable]: Generating DecRef for local var 'else_executed' in scope 4
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 8 at line 71
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 2 at line 72
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont12
DEBUG:    [Pre] Original Insert BB: for.end, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont12
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval15 = call i1 @py_object_to_bool(ptr %cmp_result)
DEBUG:    [2] Created blocks: thenBB=then16, elseEntryBB=else17
DEBUG:    [3] Creating CondBr from for.end on   %condval15 = call i1 @py_object_to_bool(ptr %cmp_result) ? then16 : else17
DEBUG:    [4] Handling 'then' branch (Block: then16)
DEBUG:        Set insert point to: then16
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont18
DEBUG:    [Pre] Original Insert BB: then16, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont18
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval19 = call i1 @py_object_to_bool(ptr %else_executed_val)
DEBUG:      [2] Created blocks: thenBB=then20, elseEntryBB=else21
DEBUG:      [3] Creating CondBr from then16 on   %condval19 = call i1 @py_object_to_bool(ptr %else_executed_val) ? then20 : else21
DEBUG:      [4] Handling 'then' branch (Block: then20)
DEBUG:          Set insert point to: then20
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then20
DEBUG:          'then' block (then20) did not terminate. Creating Br to finalMergeBB (ifcont18)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else21)
DEBUG:          Set insert point to: else21
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else21) to finalMergeBB (ifcont18)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else21
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont18)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont18
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont18
DEBUG:        'then' block (ifcont18) did not terminate. Creating Br to finalMergeBB (ifcont12)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else17)
DEBUG:        Set insert point to: else17
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else17) to finalMergeBB (ifcont12)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else17
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont12)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont12
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: ifcont12, CurIP: {Block: ifcont12, Point: end} - Body: Handling Stmt Kind 9 at line 0
[HdlCallExpr] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: ifcont12, CurIP: {Block: ifcont12, Point: end} - Generating runtime call via py_call_function for 'print_test_result'
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: ifcont12, CurIP: {Block: ifcont12, Point: end} - Body: Handling Stmt Kind 6 at line 79
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: ifcont12, CurIP: {Block: ifcont12, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: ifcont12, CurIP: {Block: ifcont12, Point: end} - Checking for default return for 'test_for_else_with_continue.L81.C1'. Last block: ifcont12
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: ifcont12, CurIP: {Block: ifcont12, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: ifcont12, CurIP: {Block: ifcont12, Point: end} - Cleaning up function resources for 'test_for_else_with_continue.L81.C1'...
[HdlFuncDef] CurFunc: test_for_else_with_continue.L81.C1, CurBlock: ifcont12, CurIP: {Block: ifcont12, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'test_for_else_with_continue.L81.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'test_for_else_with_continue.L81.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'test_for_else_with_continue' (LLVM: test_for_else_with_continue.L81.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'test_for_else_with_continue'. Got LLVM Func: define internal ptr @test_for_else_with_continue.L81.C1() {
entry:
  %callargs_array = alloca ptr, i32 2, align 8
  %passed.addr = alloca ptr, align 8
  %item.addr = alloca ptr, align 8
  %else_executed.addr = alloca ptr, align 8
  %processed_sum.addr = alloca ptr, align 8
  %items.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.19)
  store ptr %str_obj, ptr %test_name.addr, align 8
  call void @py_incref(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.20, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.21, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.22, i32 10)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.23, i32 10)
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.24, i32 10)
  %list_obj = call ptr @py_create_list(i32 5, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %3 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str3)
  %4 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str4)
  store ptr %list_obj, ptr %items.addr, align 8
  call void @py_incref(ptr %list_obj)
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.25, i32 10)
  store ptr %int_obj_from_str5, ptr %processed_sum.addr, align 8
  call void @py_incref(ptr %int_obj_from_str5)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %items_val = load ptr, ptr %items.addr, align 8
  %iterator = call ptr @py_iter(ptr %items_val)
  %is_iter_null = icmp eq ptr %iterator, null
  br i1 %is_iter_null, label %iter.error, label %iter.ok

iter.error:                                       ; preds = %entry
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.26, i32 63)
  unreachable

iter.ok:                                          ; preds = %entry
  br label %for.header

for.header:                                       ; preds = %ifcont, %then, %iter.ok
  %next_item_or_stop = call ptr @py_next(ptr %iterator)
  %is_stop_iteration = icmp eq ptr %next_item_or_stop, null
  br i1 %is_stop_iteration, label %for.stop_iteration, label %for.body

for.body:                                         ; preds = %for.header
  store ptr null, ptr %item.addr, align 8
  %old_item = load ptr, ptr %item.addr, align 8
  call void @py_decref(ptr %old_item)
  store ptr %next_item_or_stop, ptr %item.addr, align 8
  call void @py_incref(ptr %next_item_or_stop)
  %item_val = load ptr, ptr %item.addr, align 8
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.27, i32 10)
  %any_op_result = call ptr @py_object_modulo(ptr %item_val, ptr %int_obj_from_str6), !py.type !2
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.28, i32 10)
  %any_cmp_result = call ptr @py_object_compare(ptr %any_op_result, ptr %int_obj_from_str7, i32 0), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %then, label %else

for.end:                                          ; preds = %for.else
  %bool_obj11 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj11, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj11)
  %processed_sum_val13 = load ptr, ptr %processed_sum.addr, align 8
  %int_obj_from_str14 = call ptr @py_create_int_bystring(ptr @int_str_const.29, i32 10)
  %cmp_result = call ptr @py_object_compare(ptr %processed_sum_val13, ptr %int_obj_from_str14, i32 0), !py.type !1
  %condval15 = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval15, label %then16, label %else17

for.stop_iteration:                               ; preds = %for.header
  call void @py_decref(ptr %iterator)
  br label %for.else

for.else:                                         ; preds = %for.stop_iteration
  %bool_obj10 = call ptr @py_create_bool(i1 true)
  %else_executed_old = load ptr, ptr %else_executed.addr, align 8
  call void @py_decref(ptr %else_executed_old)
  store ptr %bool_obj10, ptr %else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj10)
  %else_executed_scope_end_load = load ptr, ptr %else_executed.addr, align 8
  call void @py_decref(ptr %else_executed_scope_end_load)
  br label %for.end

ifcont:                                           ; preds = %else
  %processed_sum_val = load ptr, ptr %processed_sum.addr, align 8
  %item_val8 = load ptr, ptr %item.addr, align 8
  %any_op_result9 = call ptr @py_object_add(ptr %processed_sum_val, ptr %item_val8), !py.type !2
  %processed_sum_old = load ptr, ptr %processed_sum.addr, align 8
  call void @py_decref(ptr %processed_sum_old)
  store ptr %any_op_result9, ptr %processed_sum.addr, align 8
  call void @py_incref(ptr %any_op_result9)
  %processed_sum_scope_end_load = load ptr, ptr %processed_sum.addr, align 8
  call void @py_decref(ptr %processed_sum_scope_end_load)
  br label %for.header

then:                                             ; preds = %for.body
  br label %for.header

else:                                             ; preds = %for.body
  br label %ifcont

ifcont12:                                         ; preds = %else17, %ifcont18
  %print_test_result_callable_loaded = load ptr, ptr @print_test_result_obj_gv, align 8
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  %passed_val = load ptr, ptr %passed.addr, align 8
  call void @py_incref(ptr %test_name_val)
  call void @py_incref(ptr %passed_val)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %test_name_val, ptr %arg_ptr_0, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array, i32 1
  store ptr %passed_val, ptr %arg_ptr_1, align 8
  %call_result = call ptr @py_call_function(ptr %print_test_result_callable_loaded, i32 2, ptr %callargs_array)
  %passed_val23 = load ptr, ptr %passed.addr, align 8
  ret ptr %passed_val23

then16:                                           ; preds = %for.end
  %else_executed_val = load ptr, ptr %else_executed.addr, align 8
  %condval19 = call i1 @py_object_to_bool(ptr %else_executed_val)
  br i1 %condval19, label %then20, label %else21

else17:                                           ; preds = %for.end
  br label %ifcont12

ifcont18:                                         ; preds = %else21, %then20
  br label %ifcont12

then20:                                           ; preds = %then16
  %bool_obj22 = call ptr @py_create_bool(i1 true)
  %passed_old = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old)
  store ptr %bool_obj22, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj22)
  br label %ifcont18

else21:                                           ; preds = %then16
  br label %ifcont18
}
 ('test_for_else_with_continue.L81.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'test_for_else_with_continue'...
Debug [CodeGenType]: Resolved static FunctionType for 'test_for_else_with_continue' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'test_for_else_with_continue'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'test_for_else_with_continue.L81.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'test_for_else_with_continue'. Value:   %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'test_for_else_with_continue' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @test_for_else_with_continue_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @test_for_else_with_continue_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'test_for_else_with_continue' to storage: @test_for_else_with_continue_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'test_for_else_with_continue'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'test_for_else_with_continue'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 94 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_for_return_in_body'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_for_return_in_body' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'func_for_return_in_body' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_for_return_in_body'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_for_return_in_body'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_for_return_in_body.L94.C1' for Python name 'func_for_return_in_body'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_for_return_in_body'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: list<any>
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_for_return_in_body.L94.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_for_return_in_body.L94.C1 with name 'func_for_return_in_body.L94.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568156976 -> LLVM Func func_for_return_in_body.L94.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_for_return_in_body.L94.C1'...
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_for_return_in_body.L94.C1
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 82
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 83
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 27 at line 84
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: for.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from for.body on   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) already terminated.
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block ifcont
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.else
Debug [PySymbolTable]: Generating DecRef for local var 'else_block_executed' in scope 4
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 6 at line 94
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Checking for default return for 'func_for_return_in_body.L94.C1'. Last block: for.end
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Cleaning up function resources for 'func_for_return_in_body.L94.C1'...
[HdlFuncDef] CurFunc: func_for_return_in_body.L94.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_for_return_in_body.L94.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_for_return_in_body.L94.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_for_return_in_body' (LLVM: func_for_return_in_body.L94.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_for_return_in_body'. Got LLVM Func: define internal ptr @func_for_return_in_body.L94.C1() {
entry:
  %item.addr = alloca ptr, align 8
  %else_block_executed.addr = alloca ptr, align 8
  %items.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.30)
  %str_obj1 = call ptr @py_create_string(ptr @str_const.31)
  %str_obj2 = call ptr @py_create_string(ptr @str_const.32)
  %list_obj = call ptr @py_create_list(i32 3, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %str_obj)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %str_obj1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %str_obj2)
  store ptr %list_obj, ptr %items.addr, align 8
  call void @py_incref(ptr %list_obj)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %else_block_executed.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %items_val = load ptr, ptr %items.addr, align 8
  %iterator = call ptr @py_iter(ptr %items_val)
  %is_iter_null = icmp eq ptr %iterator, null
  br i1 %is_iter_null, label %iter.error, label %iter.ok

iter.error:                                       ; preds = %entry
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.33, i32 84)
  unreachable

iter.ok:                                          ; preds = %entry
  br label %for.header

for.header:                                       ; preds = %ifcont, %iter.ok
  %next_item_or_stop = call ptr @py_next(ptr %iterator)
  %is_stop_iteration = icmp eq ptr %next_item_or_stop, null
  br i1 %is_stop_iteration, label %for.stop_iteration, label %for.body

for.body:                                         ; preds = %for.header
  store ptr null, ptr %item.addr, align 8
  %old_item = load ptr, ptr %item.addr, align 8
  call void @py_decref(ptr %old_item)
  store ptr %next_item_or_stop, ptr %item.addr, align 8
  call void @py_incref(ptr %next_item_or_stop)
  %item_val = load ptr, ptr %item.addr, align 8
  %str_obj3 = call ptr @py_create_string(ptr @str_const.34)
  %any_cmp_result = call ptr @py_object_compare(ptr %item_val, ptr %str_obj3, i32 0), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %then, label %else

for.end:                                          ; preds = %for.else
  %str_obj7 = call ptr @py_create_string(ptr @str_const.36)
  %else_block_executed_val8 = load ptr, ptr %else_block_executed.addr, align 8
  %list_obj9 = call ptr @py_create_list(i32 2, i32 7)
  %3 = call ptr @py_list_append(ptr %list_obj9, ptr %str_obj7)
  %4 = call ptr @py_list_append(ptr %list_obj9, ptr %else_block_executed_val8)
  ret ptr %list_obj9

for.stop_iteration:                               ; preds = %for.header
  call void @py_decref(ptr %iterator)
  br label %for.else

for.else:                                         ; preds = %for.stop_iteration
  %bool_obj6 = call ptr @py_create_bool(i1 true)
  %else_block_executed_old = load ptr, ptr %else_block_executed.addr, align 8
  call void @py_decref(ptr %else_block_executed_old)
  store ptr %bool_obj6, ptr %else_block_executed.addr, align 8
  call void @py_incref(ptr %bool_obj6)
  %else_block_executed_scope_end_load = load ptr, ptr %else_block_executed.addr, align 8
  call void @py_decref(ptr %else_block_executed_scope_end_load)
  br label %for.end

ifcont:                                           ; preds = %else
  br label %for.header

then:                                             ; preds = %for.body
  %str_obj4 = call ptr @py_create_string(ptr @str_const.35)
  %else_block_executed_val = load ptr, ptr %else_block_executed.addr, align 8
  %list_obj5 = call ptr @py_create_list(i32 2, i32 7)
  %5 = call ptr @py_list_append(ptr %list_obj5, ptr %str_obj4)
  %6 = call ptr @py_list_append(ptr %list_obj5, ptr %else_block_executed_val)
  ret ptr %list_obj5

else:                                             ; preds = %for.body
  br label %ifcont
}
 ('func_for_return_in_body.L94.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_for_return_in_body'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_for_return_in_body' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_for_return_in_body'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_for_return_in_body.L94.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_for_return_in_body'. Value:   %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_for_return_in_body' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_for_return_in_body_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_for_return_in_body_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_for_return_in_body' to storage: @func_for_return_in_body_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_for_return_in_body'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_for_return_in_body'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 111 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'test_for_else_with_return_in_body'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'test_for_else_with_return_in_body' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'test_for_else_with_return_in_body' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'test_for_else_with_return_in_body'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'test_for_else_with_return_in_body'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'test_for_else_with_return_in_body.L111.C1' for Python name 'test_for_else_with_return_in_body'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'test_for_else_with_return_in_body'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'test_for_else_with_return_in_body.L111.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: test_for_else_with_return_in_body.L111.C1 with name 'test_for_else_with_return_in_body.L111.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568160256 -> LLVM Func test_for_else_with_return_in_body.L111.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'test_for_else_with_return_in_body.L111.C1'...
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: test_for_else_with_return_in_body.L111.C1
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 95
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 97
[HdlCallExpr] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_for_return_in_body'
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 98
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 99
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 101
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 2 at line 102
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: entry, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from entry on   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont5
DEBUG:    [Pre] Original Insert BB: then, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont5
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval8 = call i1 @py_object_to_bool(ptr %any_cmp_result7)
DEBUG:      [2] Created blocks: thenBB=then9, elseEntryBB=else10
DEBUG:      [3] Creating CondBr from then on   %condval8 = call i1 @py_object_to_bool(ptr %any_cmp_result7) ? then9 : else10
DEBUG:      [4] Handling 'then' branch (Block: then9)
DEBUG:          Set insert point to: then9
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then9
DEBUG:          'then' block (then9) did not terminate. Creating Br to finalMergeBB (ifcont5)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else10)
DEBUG:          Set insert point to: else10
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else10) to finalMergeBB (ifcont5)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else10
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont5)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont5
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont5
DEBUG:        'then' block (ifcont5) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Body: Handling Stmt Kind 9 at line 0
[HdlCallExpr] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Generating runtime call via py_call_function for 'print_test_result'
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Body: Handling Stmt Kind 6 at line 110
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Checking for default return for 'test_for_else_with_return_in_body.L111.C1'. Last block: ifcont
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Cleaning up function resources for 'test_for_else_with_return_in_body.L111.C1'...
[HdlFuncDef] CurFunc: test_for_else_with_return_in_body.L111.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'test_for_else_with_return_in_body.L111.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'test_for_else_with_return_in_body.L111.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'test_for_else_with_return_in_body' (LLVM: test_for_else_with_return_in_body.L111.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'test_for_else_with_return_in_body'. Got LLVM Func: define internal ptr @test_for_else_with_return_in_body.L111.C1() {
entry:
  %callargs_array = alloca ptr, i32 2, align 8
  %passed.addr = alloca ptr, align 8
  %else_was_executed.addr = alloca ptr, align 8
  %result_value.addr = alloca ptr, align 8
  %result_list.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.37)
  store ptr %str_obj, ptr %test_name.addr, align 8
  call void @py_incref(ptr %str_obj)
  %func_for_return_in_body_callable_loaded = load ptr, ptr @func_for_return_in_body_obj_gv, align 8
  %call_result = call ptr @py_call_function(ptr %func_for_return_in_body_callable_loaded, i32 0, ptr null)
  store ptr %call_result, ptr %result_list.addr, align 8
  call void @py_incref(ptr %call_result)
  %result_list_val = load ptr, ptr %result_list.addr, align 8
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.38, i32 10)
  %index_result = call ptr @py_object_index(ptr %result_list_val, ptr %int_obj_from_str)
  store ptr %index_result, ptr %result_value.addr, align 8
  call void @py_incref(ptr %index_result)
  %result_list_val1 = load ptr, ptr %result_list.addr, align 8
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.39, i32 10)
  %index_result3 = call ptr @py_object_index(ptr %result_list_val1, ptr %int_obj_from_str2)
  store ptr %index_result3, ptr %else_was_executed.addr, align 8
  call void @py_incref(ptr %index_result3)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %result_value_val = load ptr, ptr %result_value.addr, align 8
  %str_obj4 = call ptr @py_create_string(ptr @str_const.40)
  %any_cmp_result = call ptr @py_object_compare(ptr %result_value_val, ptr %str_obj4, i32 0), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %then, label %else

ifcont:                                           ; preds = %else, %ifcont5
  %print_test_result_callable_loaded = load ptr, ptr @print_test_result_obj_gv, align 8
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  %passed_val = load ptr, ptr %passed.addr, align 8
  call void @py_incref(ptr %test_name_val)
  call void @py_incref(ptr %passed_val)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %test_name_val, ptr %arg_ptr_0, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array, i32 1
  store ptr %passed_val, ptr %arg_ptr_1, align 8
  %call_result12 = call ptr @py_call_function(ptr %print_test_result_callable_loaded, i32 2, ptr %callargs_array)
  %passed_val13 = load ptr, ptr %passed.addr, align 8
  ret ptr %passed_val13

then:                                             ; preds = %entry
  %else_was_executed_val = load ptr, ptr %else_was_executed.addr, align 8
  %bool_obj6 = call ptr @py_create_bool(i1 false)
  %any_cmp_result7 = call ptr @py_object_compare(ptr %else_was_executed_val, ptr %bool_obj6, i32 0), !py.type !1
  %condval8 = call i1 @py_object_to_bool(ptr %any_cmp_result7)
  br i1 %condval8, label %then9, label %else10

else:                                             ; preds = %entry
  br label %ifcont

ifcont5:                                          ; preds = %else10, %then9
  br label %ifcont

then9:                                            ; preds = %then
  %bool_obj11 = call ptr @py_create_bool(i1 true)
  %passed_old = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old)
  store ptr %bool_obj11, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj11)
  br label %ifcont5

else10:                                           ; preds = %then
  br label %ifcont5
}
 ('test_for_else_with_return_in_body.L111.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'test_for_else_with_return_in_body'...
Debug [CodeGenType]: Resolved static FunctionType for 'test_for_else_with_return_in_body' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'test_for_else_with_return_in_body'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'test_for_else_with_return_in_body.L111.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'test_for_else_with_return_in_body'. Value:   %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'test_for_else_with_return_in_body' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @test_for_else_with_return_in_body_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @test_for_else_with_return_in_body_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'test_for_else_with_return_in_body' to storage: @test_for_else_with_return_in_body_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'test_for_else_with_return_in_body'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'test_for_else_with_return_in_body'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 122 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_for_return_in_else'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_for_return_in_else' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'func_for_return_in_else' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_for_return_in_else'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_for_return_in_else'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_for_return_in_else.L122.C1' for Python name 'func_for_return_in_else'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_for_return_in_else'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: string
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_for_return_in_else.L122.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_for_return_in_else.L122.C1 with name 'func_for_return_in_else.L122.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568161872 -> LLVM Func func_for_return_in_else.L122.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_for_return_in_else.L122.C1'...
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_for_return_in_else.L122.C1
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 112
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 27 at line 113
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.body
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Skipping cleanups for scope level 4 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 6 at line 122
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Checking for default return for 'func_for_return_in_else.L122.C1'. Last block: for.end
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Cleaning up function resources for 'func_for_return_in_else.L122.C1'...
[HdlFuncDef] CurFunc: func_for_return_in_else.L122.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_for_return_in_else.L122.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_for_return_in_else.L122.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_for_return_in_else' (LLVM: func_for_return_in_else.L122.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_for_return_in_else'. Got LLVM Func: define internal ptr @func_for_return_in_else.L122.C1() {
entry:
  %item.addr = alloca ptr, align 8
  %items.addr = alloca ptr, align 8
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.41, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.42, i32 10)
  %list_obj = call ptr @py_create_list(i32 2, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  store ptr %list_obj, ptr %items.addr, align 8
  call void @py_incref(ptr %list_obj)
  %items_val = load ptr, ptr %items.addr, align 8
  %iterator = call ptr @py_iter(ptr %items_val)
  %is_iter_null = icmp eq ptr %iterator, null
  br i1 %is_iter_null, label %iter.error, label %iter.ok

iter.error:                                       ; preds = %entry
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.43, i32 113)
  unreachable

iter.ok:                                          ; preds = %entry
  br label %for.header

for.header:                                       ; preds = %for.body, %iter.ok
  %next_item_or_stop = call ptr @py_next(ptr %iterator)
  %is_stop_iteration = icmp eq ptr %next_item_or_stop, null
  br i1 %is_stop_iteration, label %for.stop_iteration, label %for.body

for.body:                                         ; preds = %for.header
  store ptr null, ptr %item.addr, align 8
  %old_item = load ptr, ptr %item.addr, align 8
  call void @py_decref(ptr %old_item)
  store ptr %next_item_or_stop, ptr %item.addr, align 8
  call void @py_incref(ptr %next_item_or_stop)
  br label %for.header

for.end:                                          ; No predecessors!
  %str_obj2 = call ptr @py_create_string(ptr @str_const.45)
  ret ptr %str_obj2

for.stop_iteration:                               ; preds = %for.header
  call void @py_decref(ptr %iterator)
  br label %for.else

for.else:                                         ; preds = %for.stop_iteration
  %str_obj = call ptr @py_create_string(ptr @str_const.44)
  ret ptr %str_obj
}
 ('func_for_return_in_else.L122.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_for_return_in_else'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_for_return_in_else' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_for_return_in_else'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_for_return_in_else.L122.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_for_return_in_else'. Value:   %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_for_return_in_else' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_for_return_in_else_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_for_return_in_else_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_for_return_in_else' to storage: @func_for_return_in_else_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_for_return_in_else'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_for_return_in_else'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 132 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'test_for_else_with_return_in_else'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'test_for_else_with_return_in_else' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'test_for_else_with_return_in_else' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'test_for_else_with_return_in_else'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'test_for_else_with_return_in_else'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'test_for_else_with_return_in_else.L132.C1' for Python name 'test_for_else_with_return_in_else'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'test_for_else_with_return_in_else'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'test_for_else_with_return_in_else.L132.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: test_for_else_with_return_in_else.L132.C1 with name 'test_for_else_with_return_in_else.L132.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568163936 -> LLVM Func test_for_else_with_return_in_else.L132.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'test_for_else_with_return_in_else.L132.C1'...
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: test_for_else_with_return_in_else.L132.C1
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 123
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 124
[HdlCallExpr] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_for_return_in_else'
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 125
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 2 at line 126
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: entry, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from entry on   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Body: Handling Stmt Kind 9 at line 0
[HdlCallExpr] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Generating runtime call via py_call_function for 'print_test_result'
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Body: Handling Stmt Kind 6 at line 131
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Checking for default return for 'test_for_else_with_return_in_else.L132.C1'. Last block: ifcont
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Cleaning up function resources for 'test_for_else_with_return_in_else.L132.C1'...
[HdlFuncDef] CurFunc: test_for_else_with_return_in_else.L132.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'test_for_else_with_return_in_else.L132.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'test_for_else_with_return_in_else.L132.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'test_for_else_with_return_in_else' (LLVM: test_for_else_with_return_in_else.L132.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'test_for_else_with_return_in_else'. Got LLVM Func: define internal ptr @test_for_else_with_return_in_else.L132.C1() {
entry:
  %callargs_array = alloca ptr, i32 2, align 8
  %passed.addr = alloca ptr, align 8
  %result.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.46)
  store ptr %str_obj, ptr %test_name.addr, align 8
  call void @py_incref(ptr %str_obj)
  %func_for_return_in_else_callable_loaded = load ptr, ptr @func_for_return_in_else_obj_gv, align 8
  %call_result = call ptr @py_call_function(ptr %func_for_return_in_else_callable_loaded, i32 0, ptr null)
  store ptr %call_result, ptr %result.addr, align 8
  call void @py_incref(ptr %call_result)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %result_val = load ptr, ptr %result.addr, align 8
  %str_obj1 = call ptr @py_create_string(ptr @str_const.47)
  %any_cmp_result = call ptr @py_object_compare(ptr %result_val, ptr %str_obj1, i32 0), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %then, label %else

ifcont:                                           ; preds = %else, %then
  %print_test_result_callable_loaded = load ptr, ptr @print_test_result_obj_gv, align 8
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  %passed_val = load ptr, ptr %passed.addr, align 8
  call void @py_incref(ptr %test_name_val)
  call void @py_incref(ptr %passed_val)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %test_name_val, ptr %arg_ptr_0, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array, i32 1
  store ptr %passed_val, ptr %arg_ptr_1, align 8
  %call_result3 = call ptr @py_call_function(ptr %print_test_result_callable_loaded, i32 2, ptr %callargs_array)
  %passed_val4 = load ptr, ptr %passed.addr, align 8
  ret ptr %passed_val4

then:                                             ; preds = %entry
  %bool_obj2 = call ptr @py_create_bool(i1 true)
  %passed_old = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old)
  store ptr %bool_obj2, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj2)
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont
}
 ('test_for_else_with_return_in_else.L132.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'test_for_else_with_return_in_else'...
Debug [CodeGenType]: Resolved static FunctionType for 'test_for_else_with_return_in_else' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'test_for_else_with_return_in_else'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'test_for_else_with_return_in_else.L132.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'test_for_else_with_return_in_else'. Value:   %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'test_for_else_with_return_in_else' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @test_for_else_with_return_in_else_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @test_for_else_with_return_in_else_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'test_for_else_with_return_in_else' to storage: @test_for_else_with_return_in_else_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'test_for_else_with_return_in_else'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'test_for_else_with_return_in_else'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 151 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'test_for_else_empty_iterable'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'test_for_else_empty_iterable' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'test_for_else_empty_iterable' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'test_for_else_empty_iterable'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'test_for_else_empty_iterable'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'test_for_else_empty_iterable.L151.C1' for Python name 'test_for_else_empty_iterable'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'test_for_else_empty_iterable'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'test_for_else_empty_iterable.L151.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: test_for_else_empty_iterable.L151.C1 with name 'test_for_else_empty_iterable.L151.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568167296 -> LLVM Func test_for_else_empty_iterable.L151.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'test_for_else_empty_iterable.L151.C1'...
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: test_for_else_empty_iterable.L151.C1
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 133
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 134
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 135
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 136
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 27 at line 137
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.body
Debug [PySymbolTable]: Generating DecRef for local var 'loop_executed_flag' in scope 4
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.else
Debug [PySymbolTable]: Generating DecRef for local var 'else_executed' in scope 4
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 8 at line 142
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 2 at line 143
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: for.end, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %unaryop_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from for.end on   %condval = call i1 @py_object_to_bool(ptr %unaryop_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont5
DEBUG:    [Pre] Original Insert BB: then, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont5
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval6 = call i1 @py_object_to_bool(ptr %else_executed_val)
DEBUG:      [2] Created blocks: thenBB=then7, elseEntryBB=else8
DEBUG:      [3] Creating CondBr from then on   %condval6 = call i1 @py_object_to_bool(ptr %else_executed_val) ? then7 : else8
DEBUG:      [4] Handling 'then' branch (Block: then7)
DEBUG:          Set insert point to: then7
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then7
DEBUG:          'then' block (then7) did not terminate. Creating Br to finalMergeBB (ifcont5)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else8)
DEBUG:          Set insert point to: else8
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else8) to finalMergeBB (ifcont5)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else8
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont5)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont5
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont5
DEBUG:        'then' block (ifcont5) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Body: Handling Stmt Kind 9 at line 0
[HdlCallExpr] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Generating runtime call via py_call_function for 'print_test_result'
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Body: Handling Stmt Kind 6 at line 150
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Checking for default return for 'test_for_else_empty_iterable.L151.C1'. Last block: ifcont
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Cleaning up function resources for 'test_for_else_empty_iterable.L151.C1'...
[HdlFuncDef] CurFunc: test_for_else_empty_iterable.L151.C1, CurBlock: ifcont, CurIP: {Block: ifcont, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'test_for_else_empty_iterable.L151.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'test_for_else_empty_iterable.L151.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'test_for_else_empty_iterable' (LLVM: test_for_else_empty_iterable.L151.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'test_for_else_empty_iterable'. Got LLVM Func: define internal ptr @test_for_else_empty_iterable.L151.C1() {
entry:
  %callargs_array = alloca ptr, i32 2, align 8
  %passed.addr = alloca ptr, align 8
  %item.addr = alloca ptr, align 8
  %else_executed.addr = alloca ptr, align 8
  %loop_executed_flag.addr = alloca ptr, align 8
  %items.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.48)
  store ptr %str_obj, ptr %test_name.addr, align 8
  call void @py_incref(ptr %str_obj)
  %list_obj = call ptr @py_create_list(i32 0, i32 7)
  store ptr %list_obj, ptr %items.addr, align 8
  call void @py_incref(ptr %list_obj)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %loop_executed_flag.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %bool_obj1 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj1, ptr %else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj1)
  %items_val = load ptr, ptr %items.addr, align 8
  %iterator = call ptr @py_iter(ptr %items_val)
  %is_iter_null = icmp eq ptr %iterator, null
  br i1 %is_iter_null, label %iter.error, label %iter.ok

iter.error:                                       ; preds = %entry
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.49, i32 137)
  unreachable

iter.ok:                                          ; preds = %entry
  br label %for.header

for.header:                                       ; preds = %for.body, %iter.ok
  %next_item_or_stop = call ptr @py_next(ptr %iterator)
  %is_stop_iteration = icmp eq ptr %next_item_or_stop, null
  br i1 %is_stop_iteration, label %for.stop_iteration, label %for.body

for.body:                                         ; preds = %for.header
  store ptr null, ptr %item.addr, align 8
  %old_item = load ptr, ptr %item.addr, align 8
  call void @py_decref(ptr %old_item)
  store ptr %next_item_or_stop, ptr %item.addr, align 8
  call void @py_incref(ptr %next_item_or_stop)
  %bool_obj2 = call ptr @py_create_bool(i1 true)
  %loop_executed_flag_old = load ptr, ptr %loop_executed_flag.addr, align 8
  call void @py_decref(ptr %loop_executed_flag_old)
  store ptr %bool_obj2, ptr %loop_executed_flag.addr, align 8
  call void @py_incref(ptr %bool_obj2)
  %loop_executed_flag_scope_end_load = load ptr, ptr %loop_executed_flag.addr, align 8
  call void @py_decref(ptr %loop_executed_flag_scope_end_load)
  br label %for.header

for.end:                                          ; preds = %for.else
  %bool_obj4 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj4, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj4)
  %loop_executed_flag_val = load ptr, ptr %loop_executed_flag.addr, align 8
  %unaryop_result = call ptr @py_object_not(ptr %loop_executed_flag_val)
  %condval = call i1 @py_object_to_bool(ptr %unaryop_result)
  br i1 %condval, label %then, label %else

for.stop_iteration:                               ; preds = %for.header
  call void @py_decref(ptr %iterator)
  br label %for.else

for.else:                                         ; preds = %for.stop_iteration
  %bool_obj3 = call ptr @py_create_bool(i1 true)
  %else_executed_old = load ptr, ptr %else_executed.addr, align 8
  call void @py_decref(ptr %else_executed_old)
  store ptr %bool_obj3, ptr %else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj3)
  %else_executed_scope_end_load = load ptr, ptr %else_executed.addr, align 8
  call void @py_decref(ptr %else_executed_scope_end_load)
  br label %for.end

ifcont:                                           ; preds = %else, %ifcont5
  %print_test_result_callable_loaded = load ptr, ptr @print_test_result_obj_gv, align 8
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  %passed_val = load ptr, ptr %passed.addr, align 8
  call void @py_incref(ptr %test_name_val)
  call void @py_incref(ptr %passed_val)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %test_name_val, ptr %arg_ptr_0, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array, i32 1
  store ptr %passed_val, ptr %arg_ptr_1, align 8
  %call_result = call ptr @py_call_function(ptr %print_test_result_callable_loaded, i32 2, ptr %callargs_array)
  %passed_val10 = load ptr, ptr %passed.addr, align 8
  ret ptr %passed_val10

then:                                             ; preds = %for.end
  %else_executed_val = load ptr, ptr %else_executed.addr, align 8
  %condval6 = call i1 @py_object_to_bool(ptr %else_executed_val)
  br i1 %condval6, label %then7, label %else8

else:                                             ; preds = %for.end
  br label %ifcont

ifcont5:                                          ; preds = %else8, %then7
  br label %ifcont

then7:                                            ; preds = %then
  %bool_obj9 = call ptr @py_create_bool(i1 true)
  %passed_old = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old)
  store ptr %bool_obj9, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj9)
  br label %ifcont5

else8:                                            ; preds = %then
  br label %ifcont5
}
 ('test_for_else_empty_iterable.L151.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'test_for_else_empty_iterable'...
Debug [CodeGenType]: Resolved static FunctionType for 'test_for_else_empty_iterable' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'test_for_else_empty_iterable'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'test_for_else_empty_iterable.L151.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'test_for_else_empty_iterable'. Value:   %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'test_for_else_empty_iterable' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @test_for_else_empty_iterable_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @test_for_else_empty_iterable_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'test_for_else_empty_iterable' to storage: @test_for_else_empty_iterable_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'test_for_else_empty_iterable'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'test_for_else_empty_iterable'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 201 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'test_nested_for_else_break'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'test_nested_for_else_break' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'test_nested_for_else_break' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'test_nested_for_else_break'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'test_nested_for_else_break'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'test_nested_for_else_break.L201.C1' for Python name 'test_nested_for_else_break'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'test_nested_for_else_break'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'test_nested_for_else_break.L201.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: test_nested_for_else_break.L201.C1 with name 'test_nested_for_else_break.L201.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568292320 -> LLVM Func test_nested_for_else_break.L201.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'test_nested_for_else_break.L201.C1'...
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: test_nested_for_else_break.L201.C1
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 152
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 153
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 154
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 155
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 158
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 159
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 163
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 164
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 27 at line 166
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: for.body17, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from for.body17 on   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont26
DEBUG:    [Pre] Original Insert BB: then, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont26
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval29 = call i1 @py_object_to_bool(ptr %any_cmp_result28)
DEBUG:      [2] Created blocks: thenBB=then30, elseEntryBB=else31
DEBUG:      [3] Creating CondBr from then on   %condval29 = call i1 @py_object_to_bool(ptr %any_cmp_result28) ? then30 : else31
DEBUG:      [4] Handling 'then' branch (Block: then30)
DEBUG:          Set insert point to: then30
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then30
DEBUG:          'then' block (then30) already terminated.
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else31)
DEBUG:          Set insert point to: else31
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else31) to finalMergeBB (ifcont26)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else31
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont26)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont26
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont26
DEBUG:        'then' block (ifcont26) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
Debug [PySymbolTable]: Generating cleanups for scope level 5 in block ifcont
Debug [PySymbolTable]: Generating DecRef for local var 'inner_loop_executions' in scope 5
Debug [PySymbolTable]: Popping scope level 5
Debug [PySymbolTable]: Generating cleanups for scope level 5 in block for.else20
Debug [PySymbolTable]: Generating DecRef for local var 'inner_else_executed_this_iteration' in scope 5
Debug [PySymbolTable]: Popping scope level 5
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont33
DEBUG:    [Pre] Original Insert BB: for.end18, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont33
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval37 = call i1 @py_object_to_bool(ptr %any_cmp_result36)
DEBUG:    [2] Created blocks: thenBB=then38, elseEntryBB=else39
DEBUG:    [3] Creating CondBr from for.end18 on   %condval37 = call i1 @py_object_to_bool(ptr %any_cmp_result36) ? then38 : else39
DEBUG:    [4] Handling 'then' branch (Block: then38)
DEBUG:        Set insert point to: then38
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then38
DEBUG:        'then' block (then38) did not terminate. Creating Br to finalMergeBB (ifcont33)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else39)
DEBUG:        Set insert point to: else39
DEBUG:        Else statement exists (not null). Kind: 2
DEBUG:        Else statement is IfStmtAST (elif). Making recursive call...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont33
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval43 = call i1 @py_object_to_bool(ptr %any_cmp_result42)
DEBUG:      [2] Created blocks: thenBB=then44, elseEntryBB=else45
DEBUG:      [3] Creating CondBr from else39 on   %condval43 = call i1 @py_object_to_bool(ptr %any_cmp_result42) ? then44 : else45
DEBUG:      [4] Handling 'then' branch (Block: then44)
DEBUG:          Set insert point to: then44
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then44
DEBUG:          'then' block (then44) did not terminate. Creating Br to finalMergeBB (ifcont33)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else45)
DEBUG:          Set insert point to: else45
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else45) to finalMergeBB (ifcont33)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:        Returned from recursive call for elif.
DEBUG: <- Leaving handleIfStmtRecursive (elif handled)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else45
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont33)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont33
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block ifcont33
Debug [PySymbolTable]: Generating DecRef for local var 'inner_else_executed_this_iteration' in scope 4
Debug [PySymbolTable]: Generating DecRef for local var 'inner_else_flag_for_outer_0' in scope 4
Debug [PySymbolTable]: Generating DecRef for local var 'inner_else_flag_for_outer_1' in scope 4
Debug [PySymbolTable]: Generating DecRef for local var 'j' in scope 4
Debug [PySymbolTable]: Generating DecRef for local var 'outer_loop_count' in scope 4
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.else
Debug [PySymbolTable]: Generating DecRef for local var 'outer_else_executed' in scope 4
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 8 at line 189
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 2 at line 190
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont50
DEBUG:    [Pre] Original Insert BB: for.end, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont50
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval53 = call i1 @py_object_to_bool(ptr %cmp_result)
DEBUG:    [2] Created blocks: thenBB=then54, elseEntryBB=else55
DEBUG:    [3] Creating CondBr from for.end on   %condval53 = call i1 @py_object_to_bool(ptr %cmp_result) ? then54 : else55
DEBUG:    [4] Handling 'then' branch (Block: then54)
DEBUG:        Set insert point to: then54
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont56
DEBUG:    [Pre] Original Insert BB: then54, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont56
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval60 = call i1 @py_object_to_bool(ptr %cmp_result59)
DEBUG:      [2] Created blocks: thenBB=then61, elseEntryBB=else62
DEBUG:      [3] Creating CondBr from then54 on   %condval60 = call i1 @py_object_to_bool(ptr %cmp_result59) ? then61 : else62
DEBUG:      [4] Handling 'then' branch (Block: then61)
DEBUG:          Set insert point to: then61
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont63
DEBUG:    [Pre] Original Insert BB: then61, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:     -> Entering handleIfStmtRecursive
DEBUG:        Target finalMergeBB: ifcont63
DEBUG:        [1] Handling condition...
DEBUG:        [1] Condition Value:   %condval66 = call i1 @py_object_to_bool(ptr %cmp_result65)
DEBUG:        [2] Created blocks: thenBB=then67, elseEntryBB=else68
DEBUG:        [3] Creating CondBr from then61 on   %condval66 = call i1 @py_object_to_bool(ptr %cmp_result65) ? then67 : else68
DEBUG:        [4] Handling 'then' branch (Block: then67)
DEBUG:            Set insert point to: then67
DEBUG:            Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont69
DEBUG:    [Pre] Original Insert BB: then67, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:       -> Entering handleIfStmtRecursive
DEBUG:          Target finalMergeBB: ifcont69
DEBUG:          [1] Handling condition...
DEBUG:          [1] Condition Value:   %condval72 = call i1 @py_object_to_bool(ptr %cmp_result71)
DEBUG:          [2] Created blocks: thenBB=then73, elseEntryBB=else74
DEBUG:          [3] Creating CondBr from then67 on   %condval72 = call i1 @py_object_to_bool(ptr %cmp_result71) ? then73 : else74
DEBUG:          [4] Handling 'then' branch (Block: then73)
DEBUG:              Set insert point to: then73
DEBUG:              Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont75
DEBUG:    [Pre] Original Insert BB: then73, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:         -> Entering handleIfStmtRecursive
DEBUG:            Target finalMergeBB: ifcont75
DEBUG:            [1] Handling condition...
DEBUG:            [1] Condition Value:   %condval78 = call i1 @py_object_to_bool(ptr %cmp_result77)
DEBUG:            [2] Created blocks: thenBB=then79, elseEntryBB=else80
DEBUG:            [3] Creating CondBr from then73 on   %condval78 = call i1 @py_object_to_bool(ptr %cmp_result77) ? then79 : else80
DEBUG:            [4] Handling 'then' branch (Block: then79)
DEBUG:                Set insert point to: then79
DEBUG:                Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:                Returned from handleBlock for thenBody. Current block: then79
DEBUG:                'then' block (then79) did not terminate. Creating Br to finalMergeBB (ifcont75)
DEBUG:            [5] Handling 'else'/'elif' part (Entry Block: else80)
DEBUG:                Set insert point to: else80
DEBUG:                Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else80) to finalMergeBB (ifcont75)
DEBUG:         <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else80
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont75)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont75
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:              Returned from handleBlock for thenBody. Current block: ifcont75
DEBUG:              'then' block (ifcont75) did not terminate. Creating Br to finalMergeBB (ifcont69)
DEBUG:          [5] Handling 'else'/'elif' part (Entry Block: else74)
DEBUG:              Set insert point to: else74
DEBUG:              Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else74) to finalMergeBB (ifcont69)
DEBUG:       <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else74
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont69)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont69
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for thenBody. Current block: ifcont69
DEBUG:            'then' block (ifcont69) did not terminate. Creating Br to finalMergeBB (ifcont63)
DEBUG:        [5] Handling 'else'/'elif' part (Entry Block: else68)
DEBUG:            Set insert point to: else68
DEBUG:            Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else68) to finalMergeBB (ifcont63)
DEBUG:     <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else68
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont63)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont63
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: ifcont63
DEBUG:          'then' block (ifcont63) did not terminate. Creating Br to finalMergeBB (ifcont56)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else62)
DEBUG:          Set insert point to: else62
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else62) to finalMergeBB (ifcont56)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else62
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont56)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont56
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont56
DEBUG:        'then' block (ifcont56) did not terminate. Creating Br to finalMergeBB (ifcont50)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else55)
DEBUG:        Set insert point to: else55
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else55) to finalMergeBB (ifcont50)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else55
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont50)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont50
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: ifcont50, CurIP: {Block: ifcont50, Point: end} - Body: Handling Stmt Kind 9 at line 0
[HdlCallExpr] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: ifcont50, CurIP: {Block: ifcont50, Point: end} - Generating runtime call via py_call_function for 'print_test_result'
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: ifcont50, CurIP: {Block: ifcont50, Point: end} - Body: Handling Stmt Kind 6 at line 200
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: ifcont50, CurIP: {Block: ifcont50, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: ifcont50, CurIP: {Block: ifcont50, Point: end} - Checking for default return for 'test_nested_for_else_break.L201.C1'. Last block: ifcont50
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: ifcont50, CurIP: {Block: ifcont50, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: ifcont50, CurIP: {Block: ifcont50, Point: end} - Cleaning up function resources for 'test_nested_for_else_break.L201.C1'...
[HdlFuncDef] CurFunc: test_nested_for_else_break.L201.C1, CurBlock: ifcont50, CurIP: {Block: ifcont50, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'test_nested_for_else_break.L201.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'test_nested_for_else_break.L201.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'test_nested_for_else_break' (LLVM: test_nested_for_else_break.L201.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'test_nested_for_else_break'. Got LLVM Func: define internal ptr @test_nested_for_else_break.L201.C1() {
entry:
  %callargs_array = alloca ptr, i32 2, align 8
  %passed.addr = alloca ptr, align 8
  %j.addr = alloca ptr, align 8
  %inner_else_executed_this_iteration.addr = alloca ptr, align 8
  %i.addr = alloca ptr, align 8
  %inner_else_flag_for_outer_1.addr = alloca ptr, align 8
  %inner_else_flag_for_outer_0.addr = alloca ptr, align 8
  %inner_range.addr = alloca ptr, align 8
  %outer_range.addr = alloca ptr, align 8
  %outer_else_executed.addr = alloca ptr, align 8
  %inner_loop_executions.addr = alloca ptr, align 8
  %outer_loop_count.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.50)
  store ptr %str_obj, ptr %test_name.addr, align 8
  call void @py_incref(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.51, i32 10)
  store ptr %int_obj_from_str, ptr %outer_loop_count.addr, align 8
  call void @py_incref(ptr %int_obj_from_str)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.52, i32 10)
  store ptr %int_obj_from_str1, ptr %inner_loop_executions.addr, align 8
  call void @py_incref(ptr %int_obj_from_str1)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %outer_else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.53, i32 10)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.54, i32 10)
  %list_obj = call ptr @py_create_list(i32 2, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str3)
  store ptr %list_obj, ptr %outer_range.addr, align 8
  call void @py_incref(ptr %list_obj)
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.55, i32 10)
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.56, i32 10)
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.57, i32 10)
  %list_obj7 = call ptr @py_create_list(i32 3, i32 7)
  %2 = call ptr @py_list_append(ptr %list_obj7, ptr %int_obj_from_str4)
  %3 = call ptr @py_list_append(ptr %list_obj7, ptr %int_obj_from_str5)
  %4 = call ptr @py_list_append(ptr %list_obj7, ptr %int_obj_from_str6)
  store ptr %list_obj7, ptr %inner_range.addr, align 8
  call void @py_incref(ptr %list_obj7)
  %bool_obj8 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj8, ptr %inner_else_flag_for_outer_0.addr, align 8
  call void @py_incref(ptr %bool_obj8)
  %bool_obj9 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj9, ptr %inner_else_flag_for_outer_1.addr, align 8
  call void @py_incref(ptr %bool_obj9)
  %outer_range_val = load ptr, ptr %outer_range.addr, align 8
  %iterator = call ptr @py_iter(ptr %outer_range_val)
  %is_iter_null = icmp eq ptr %iterator, null
  br i1 %is_iter_null, label %iter.error, label %iter.ok

iter.error:                                       ; preds = %entry
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.58, i32 166)
  unreachable

iter.ok:                                          ; preds = %entry
  br label %for.header

for.header:                                       ; preds = %ifcont33, %iter.ok
  %next_item_or_stop = call ptr @py_next(ptr %iterator)
  %is_stop_iteration = icmp eq ptr %next_item_or_stop, null
  br i1 %is_stop_iteration, label %for.stop_iteration, label %for.body

for.body:                                         ; preds = %for.header
  store ptr null, ptr %i.addr, align 8
  %old_i = load ptr, ptr %i.addr, align 8
  call void @py_decref(ptr %old_i)
  store ptr %next_item_or_stop, ptr %i.addr, align 8
  call void @py_incref(ptr %next_item_or_stop)
  %outer_loop_count_val = load ptr, ptr %outer_loop_count.addr, align 8
  %int_obj_from_str10 = call ptr @py_create_int_bystring(ptr @int_str_const.59, i32 10)
  %binop_result = call ptr @py_object_add(ptr %outer_loop_count_val, ptr %int_obj_from_str10), !py.type !0
  %outer_loop_count_old = load ptr, ptr %outer_loop_count.addr, align 8
  call void @py_decref(ptr %outer_loop_count_old)
  store ptr %binop_result, ptr %outer_loop_count.addr, align 8
  call void @py_incref(ptr %binop_result)
  %bool_obj11 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj11, ptr %inner_else_executed_this_iteration.addr, align 8
  call void @py_incref(ptr %bool_obj11)
  %inner_range_val = load ptr, ptr %inner_range.addr, align 8
  %iterator12 = call ptr @py_iter(ptr %inner_range_val)
  %is_iter_null13 = icmp eq ptr %iterator12, null
  br i1 %is_iter_null13, label %iter.error14, label %iter.ok15

for.end:                                          ; preds = %for.else
  %bool_obj49 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj49, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj49)
  %outer_loop_count_val51 = load ptr, ptr %outer_loop_count.addr, align 8
  %int_obj_from_str52 = call ptr @py_create_int_bystring(ptr @int_str_const.66, i32 10)
  %cmp_result = call ptr @py_object_compare(ptr %outer_loop_count_val51, ptr %int_obj_from_str52, i32 0), !py.type !1
  %condval53 = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval53, label %then54, label %else55

for.stop_iteration:                               ; preds = %for.header
  call void @py_decref(ptr %iterator)
  br label %for.else

for.else:                                         ; preds = %for.stop_iteration
  %bool_obj48 = call ptr @py_create_bool(i1 true)
  %outer_else_executed_old = load ptr, ptr %outer_else_executed.addr, align 8
  call void @py_decref(ptr %outer_else_executed_old)
  store ptr %bool_obj48, ptr %outer_else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj48)
  %outer_else_executed_scope_end_load = load ptr, ptr %outer_else_executed.addr, align 8
  call void @py_decref(ptr %outer_else_executed_scope_end_load)
  br label %for.end

iter.error14:                                     ; preds = %for.body
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.60, i32 169)
  unreachable

iter.ok15:                                        ; preds = %for.body
  br label %for.header16

for.header16:                                     ; preds = %ifcont, %iter.ok15
  %next_item_or_stop21 = call ptr @py_next(ptr %iterator12)
  %is_stop_iteration22 = icmp eq ptr %next_item_or_stop21, null
  br i1 %is_stop_iteration22, label %for.stop_iteration19, label %for.body17

for.body17:                                       ; preds = %for.header16
  store ptr null, ptr %j.addr, align 8
  %old_j = load ptr, ptr %j.addr, align 8
  call void @py_decref(ptr %old_j)
  store ptr %next_item_or_stop21, ptr %j.addr, align 8
  call void @py_incref(ptr %next_item_or_stop21)
  %inner_loop_executions_val = load ptr, ptr %inner_loop_executions.addr, align 8
  %int_obj_from_str23 = call ptr @py_create_int_bystring(ptr @int_str_const.61, i32 10)
  %binop_result24 = call ptr @py_object_add(ptr %inner_loop_executions_val, ptr %int_obj_from_str23), !py.type !0
  %inner_loop_executions_old = load ptr, ptr %inner_loop_executions.addr, align 8
  call void @py_decref(ptr %inner_loop_executions_old)
  store ptr %binop_result24, ptr %inner_loop_executions.addr, align 8
  call void @py_incref(ptr %binop_result24)
  %i_val = load ptr, ptr %i.addr, align 8
  %int_obj_from_str25 = call ptr @py_create_int_bystring(ptr @int_str_const.62, i32 10)
  %any_cmp_result = call ptr @py_object_compare(ptr %i_val, ptr %int_obj_from_str25, i32 0), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %then, label %else

for.end18:                                        ; preds = %for.else20, %then30
  %i_val34 = load ptr, ptr %i.addr, align 8
  %int_obj_from_str35 = call ptr @py_create_int_bystring(ptr @int_str_const.64, i32 10)
  %any_cmp_result36 = call ptr @py_object_compare(ptr %i_val34, ptr %int_obj_from_str35, i32 0), !py.type !1
  %condval37 = call i1 @py_object_to_bool(ptr %any_cmp_result36)
  br i1 %condval37, label %then38, label %else39

for.stop_iteration19:                             ; preds = %for.header16
  call void @py_decref(ptr %iterator12)
  br label %for.else20

for.else20:                                       ; preds = %for.stop_iteration19
  %bool_obj32 = call ptr @py_create_bool(i1 true)
  %inner_else_executed_this_iteration_old = load ptr, ptr %inner_else_executed_this_iteration.addr, align 8
  call void @py_decref(ptr %inner_else_executed_this_iteration_old)
  store ptr %bool_obj32, ptr %inner_else_executed_this_iteration.addr, align 8
  call void @py_incref(ptr %bool_obj32)
  %inner_else_executed_this_iteration_scope_end_load = load ptr, ptr %inner_else_executed_this_iteration.addr, align 8
  call void @py_decref(ptr %inner_else_executed_this_iteration_scope_end_load)
  br label %for.end18

ifcont:                                           ; preds = %else, %ifcont26
  %inner_loop_executions_scope_end_load = load ptr, ptr %inner_loop_executions.addr, align 8
  call void @py_decref(ptr %inner_loop_executions_scope_end_load)
  br label %for.header16

then:                                             ; preds = %for.body17
  %j_val = load ptr, ptr %j.addr, align 8
  %int_obj_from_str27 = call ptr @py_create_int_bystring(ptr @int_str_const.63, i32 10)
  %any_cmp_result28 = call ptr @py_object_compare(ptr %j_val, ptr %int_obj_from_str27, i32 0), !py.type !1
  %condval29 = call i1 @py_object_to_bool(ptr %any_cmp_result28)
  br i1 %condval29, label %then30, label %else31

else:                                             ; preds = %for.body17
  br label %ifcont

ifcont26:                                         ; preds = %else31
  br label %ifcont

then30:                                           ; preds = %then
  br label %for.end18

else31:                                           ; preds = %then
  br label %ifcont26

ifcont33:                                         ; preds = %else45, %then44, %then38
  %inner_else_executed_this_iteration_scope_end_load47 = load ptr, ptr %inner_else_executed_this_iteration.addr, align 8
  call void @py_decref(ptr %inner_else_executed_this_iteration_scope_end_load47)
  %inner_else_flag_for_outer_0_scope_end_load = load ptr, ptr %inner_else_flag_for_outer_0.addr, align 8
  call void @py_decref(ptr %inner_else_flag_for_outer_0_scope_end_load)
  %inner_else_flag_for_outer_1_scope_end_load = load ptr, ptr %inner_else_flag_for_outer_1.addr, align 8
  call void @py_decref(ptr %inner_else_flag_for_outer_1_scope_end_load)
  %j_scope_end_load = load ptr, ptr %j.addr, align 8
  call void @py_decref(ptr %j_scope_end_load)
  %outer_loop_count_scope_end_load = load ptr, ptr %outer_loop_count.addr, align 8
  call void @py_decref(ptr %outer_loop_count_scope_end_load)
  br label %for.header

then38:                                           ; preds = %for.end18
  %inner_else_executed_this_iteration_val = load ptr, ptr %inner_else_executed_this_iteration.addr, align 8
  %inner_else_flag_for_outer_0_old = load ptr, ptr %inner_else_flag_for_outer_0.addr, align 8
  call void @py_decref(ptr %inner_else_flag_for_outer_0_old)
  store ptr %inner_else_executed_this_iteration_val, ptr %inner_else_flag_for_outer_0.addr, align 8
  call void @py_incref(ptr %inner_else_executed_this_iteration_val)
  br label %ifcont33

else39:                                           ; preds = %for.end18
  %i_val40 = load ptr, ptr %i.addr, align 8
  %int_obj_from_str41 = call ptr @py_create_int_bystring(ptr @int_str_const.65, i32 10)
  %any_cmp_result42 = call ptr @py_object_compare(ptr %i_val40, ptr %int_obj_from_str41, i32 0), !py.type !1
  %condval43 = call i1 @py_object_to_bool(ptr %any_cmp_result42)
  br i1 %condval43, label %then44, label %else45

then44:                                           ; preds = %else39
  %inner_else_executed_this_iteration_val46 = load ptr, ptr %inner_else_executed_this_iteration.addr, align 8
  %inner_else_flag_for_outer_1_old = load ptr, ptr %inner_else_flag_for_outer_1.addr, align 8
  call void @py_decref(ptr %inner_else_flag_for_outer_1_old)
  store ptr %inner_else_executed_this_iteration_val46, ptr %inner_else_flag_for_outer_1.addr, align 8
  call void @py_incref(ptr %inner_else_executed_this_iteration_val46)
  br label %ifcont33

else45:                                           ; preds = %else39
  br label %ifcont33

ifcont50:                                         ; preds = %else55, %ifcont56
  %print_test_result_callable_loaded = load ptr, ptr @print_test_result_obj_gv, align 8
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  %passed_val = load ptr, ptr %passed.addr, align 8
  call void @py_incref(ptr %test_name_val)
  call void @py_incref(ptr %passed_val)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %test_name_val, ptr %arg_ptr_0, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array, i32 1
  store ptr %passed_val, ptr %arg_ptr_1, align 8
  %call_result = call ptr @py_call_function(ptr %print_test_result_callable_loaded, i32 2, ptr %callargs_array)
  %passed_val82 = load ptr, ptr %passed.addr, align 8
  ret ptr %passed_val82

then54:                                           ; preds = %for.end
  %inner_loop_executions_val57 = load ptr, ptr %inner_loop_executions.addr, align 8
  %int_obj_from_str58 = call ptr @py_create_int_bystring(ptr @int_str_const.67, i32 10)
  %cmp_result59 = call ptr @py_object_compare(ptr %inner_loop_executions_val57, ptr %int_obj_from_str58, i32 0), !py.type !1
  %condval60 = call i1 @py_object_to_bool(ptr %cmp_result59)
  br i1 %condval60, label %then61, label %else62

else55:                                           ; preds = %for.end
  br label %ifcont50

ifcont56:                                         ; preds = %else62, %ifcont63
  br label %ifcont50

then61:                                           ; preds = %then54
  %inner_else_flag_for_outer_0_val = load ptr, ptr %inner_else_flag_for_outer_0.addr, align 8
  %bool_obj64 = call ptr @py_create_bool(i1 false)
  %cmp_result65 = call ptr @py_object_compare(ptr %inner_else_flag_for_outer_0_val, ptr %bool_obj64, i32 0), !py.type !1
  %condval66 = call i1 @py_object_to_bool(ptr %cmp_result65)
  br i1 %condval66, label %then67, label %else68

else62:                                           ; preds = %then54
  br label %ifcont56

ifcont63:                                         ; preds = %else68, %ifcont69
  br label %ifcont56

then67:                                           ; preds = %then61
  %inner_else_flag_for_outer_1_val = load ptr, ptr %inner_else_flag_for_outer_1.addr, align 8
  %bool_obj70 = call ptr @py_create_bool(i1 true)
  %cmp_result71 = call ptr @py_object_compare(ptr %inner_else_flag_for_outer_1_val, ptr %bool_obj70, i32 0), !py.type !1
  %condval72 = call i1 @py_object_to_bool(ptr %cmp_result71)
  br i1 %condval72, label %then73, label %else74

else68:                                           ; preds = %then61
  br label %ifcont63

ifcont69:                                         ; preds = %else74, %ifcont75
  br label %ifcont63

then73:                                           ; preds = %then67
  %outer_else_executed_val = load ptr, ptr %outer_else_executed.addr, align 8
  %bool_obj76 = call ptr @py_create_bool(i1 true)
  %cmp_result77 = call ptr @py_object_compare(ptr %outer_else_executed_val, ptr %bool_obj76, i32 0), !py.type !1
  %condval78 = call i1 @py_object_to_bool(ptr %cmp_result77)
  br i1 %condval78, label %then79, label %else80

else74:                                           ; preds = %then67
  br label %ifcont69

ifcont75:                                         ; preds = %else80, %then79
  br label %ifcont69

then79:                                           ; preds = %then73
  %bool_obj81 = call ptr @py_create_bool(i1 true)
  %passed_old = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old)
  store ptr %bool_obj81, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj81)
  br label %ifcont75

else80:                                           ; preds = %then73
  br label %ifcont75
}
 ('test_nested_for_else_break.L201.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'test_nested_for_else_break'...
Debug [CodeGenType]: Resolved static FunctionType for 'test_nested_for_else_break' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'test_nested_for_else_break'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'test_nested_for_else_break.L201.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'test_nested_for_else_break'. Value:   %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'test_nested_for_else_break' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @test_nested_for_else_break_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @test_nested_for_else_break_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'test_nested_for_else_break' to storage: @test_nested_for_else_break_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'test_nested_for_else_break'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'test_nested_for_else_break'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 246 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'test_nested_for_else_continue'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'test_nested_for_else_continue' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'test_nested_for_else_continue' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'test_nested_for_else_continue'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'test_nested_for_else_continue'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'test_nested_for_else_continue.L246.C1' for Python name 'test_nested_for_else_continue'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'test_nested_for_else_continue'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'test_nested_for_else_continue.L246.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: test_nested_for_else_continue.L246.C1 with name 'test_nested_for_else_continue.L246.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568302640 -> LLVM Func test_nested_for_else_continue.L246.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'test_nested_for_else_continue.L246.C1'...
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: test_nested_for_else_continue.L246.C1
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 202
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 203
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 204
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 205
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 206
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 209
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 210
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 27 at line 212
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: for.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from for.body on   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
Debug [PySymbolTable]: Generating cleanups for scope level 5 in block for.body17
Debug [PySymbolTable]: Generating DecRef for local var 'current_inner_sum' in scope 5
Debug [PySymbolTable]: Popping scope level 5
Debug [PySymbolTable]: Generating cleanups for scope level 5 in block for.else20
Debug [PySymbolTable]: Generating DecRef for local var 'inner_else_count' in scope 5
Debug [PySymbolTable]: Popping scope level 5
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: for.end18
DEBUG:        'then' block (for.end18) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement exists (not null). Kind: 13
DEBUG:        Else statement is NOT IfStmtAST. Treating as final 'else' block.
DEBUG:            Else statement is BlockStmtAST. Calling handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont38
DEBUG:    [Pre] Original Insert BB: for.body31, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont38
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval42 = call i1 @py_object_to_bool(ptr %any_cmp_result41)
DEBUG:      [2] Created blocks: thenBB=then43, elseEntryBB=else44
DEBUG:      [3] Creating CondBr from for.body31 on   %condval42 = call i1 @py_object_to_bool(ptr %any_cmp_result41) ? then43 : else44
DEBUG:      [4] Handling 'then' branch (Block: then43)
DEBUG:          Set insert point to: then43
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then43
DEBUG:          'then' block (then43) already terminated.
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else44)
DEBUG:          Set insert point to: else44
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else44) to finalMergeBB (ifcont38)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else44
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont38)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont38
Debug [PySymbolTable]: Generating cleanups for scope level 5 in block ifcont38
Debug [PySymbolTable]: Generating DecRef for local var 'current_inner_sum' in scope 5
Debug [PySymbolTable]: Popping scope level 5
Debug [PySymbolTable]: Generating cleanups for scope level 5 in block for.else34
Debug [PySymbolTable]: Generating DecRef for local var 'inner_else_count' in scope 5
Debug [PySymbolTable]: Popping scope level 5
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for else block. Current block: for.end32
DEBUG:        Final 'else' block (for.end32) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: for.end32
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block ifcont
Debug [PySymbolTable]: Generating DecRef for local var 'current_inner_sum' in scope 4
Debug [PySymbolTable]: Generating DecRef for local var 'inner_sum_total' in scope 4
Debug [PySymbolTable]: Generating DecRef for local var 'j' in scope 4
Debug [PySymbolTable]: Generating DecRef for local var 'outer_sum' in scope 4
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.else
Debug [PySymbolTable]: Generating DecRef for local var 'outer_else_executed' in scope 4
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 8 at line 235
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 2 at line 236
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont60
DEBUG:    [Pre] Original Insert BB: for.end, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont60
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval63 = call i1 @py_object_to_bool(ptr %cmp_result)
DEBUG:    [2] Created blocks: thenBB=then64, elseEntryBB=else65
DEBUG:    [3] Creating CondBr from for.end on   %condval63 = call i1 @py_object_to_bool(ptr %cmp_result) ? then64 : else65
DEBUG:    [4] Handling 'then' branch (Block: then64)
DEBUG:        Set insert point to: then64
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont66
DEBUG:    [Pre] Original Insert BB: then64, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont66
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval70 = call i1 @py_object_to_bool(ptr %cmp_result69)
DEBUG:      [2] Created blocks: thenBB=then71, elseEntryBB=else72
DEBUG:      [3] Creating CondBr from then64 on   %condval70 = call i1 @py_object_to_bool(ptr %cmp_result69) ? then71 : else72
DEBUG:      [4] Handling 'then' branch (Block: then71)
DEBUG:          Set insert point to: then71
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont73
DEBUG:    [Pre] Original Insert BB: then71, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:     -> Entering handleIfStmtRecursive
DEBUG:        Target finalMergeBB: ifcont73
DEBUG:        [1] Handling condition...
DEBUG:        [1] Condition Value:   %condval77 = call i1 @py_object_to_bool(ptr %cmp_result76)
DEBUG:        [2] Created blocks: thenBB=then78, elseEntryBB=else79
DEBUG:        [3] Creating CondBr from then71 on   %condval77 = call i1 @py_object_to_bool(ptr %cmp_result76) ? then78 : else79
DEBUG:        [4] Handling 'then' branch (Block: then78)
DEBUG:            Set insert point to: then78
DEBUG:            Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont80
DEBUG:    [Pre] Original Insert BB: then78, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:       -> Entering handleIfStmtRecursive
DEBUG:          Target finalMergeBB: ifcont80
DEBUG:          [1] Handling condition...
DEBUG:          [1] Condition Value:   %condval83 = call i1 @py_object_to_bool(ptr %cmp_result82)
DEBUG:          [2] Created blocks: thenBB=then84, elseEntryBB=else85
DEBUG:          [3] Creating CondBr from then78 on   %condval83 = call i1 @py_object_to_bool(ptr %cmp_result82) ? then84 : else85
DEBUG:          [4] Handling 'then' branch (Block: then84)
DEBUG:              Set insert point to: then84
DEBUG:              Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:              Returned from handleBlock for thenBody. Current block: then84
DEBUG:              'then' block (then84) did not terminate. Creating Br to finalMergeBB (ifcont80)
DEBUG:          [5] Handling 'else'/'elif' part (Entry Block: else85)
DEBUG:              Set insert point to: else85
DEBUG:              Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else85) to finalMergeBB (ifcont80)
DEBUG:       <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else85
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont80)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont80
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for thenBody. Current block: ifcont80
DEBUG:            'then' block (ifcont80) did not terminate. Creating Br to finalMergeBB (ifcont73)
DEBUG:        [5] Handling 'else'/'elif' part (Entry Block: else79)
DEBUG:            Set insert point to: else79
DEBUG:            Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else79) to finalMergeBB (ifcont73)
DEBUG:     <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else79
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont73)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont73
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: ifcont73
DEBUG:          'then' block (ifcont73) did not terminate. Creating Br to finalMergeBB (ifcont66)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else72)
DEBUG:          Set insert point to: else72
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else72) to finalMergeBB (ifcont66)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else72
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont66)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont66
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont66
DEBUG:        'then' block (ifcont66) did not terminate. Creating Br to finalMergeBB (ifcont60)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else65)
DEBUG:        Set insert point to: else65
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else65) to finalMergeBB (ifcont60)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else65
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont60)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont60
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: ifcont60, CurIP: {Block: ifcont60, Point: end} - Body: Handling Stmt Kind 9 at line 0
[HdlCallExpr] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: ifcont60, CurIP: {Block: ifcont60, Point: end} - Generating runtime call via py_call_function for 'print_test_result'
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: ifcont60, CurIP: {Block: ifcont60, Point: end} - Body: Handling Stmt Kind 6 at line 245
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: ifcont60, CurIP: {Block: ifcont60, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: ifcont60, CurIP: {Block: ifcont60, Point: end} - Checking for default return for 'test_nested_for_else_continue.L246.C1'. Last block: ifcont60
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: ifcont60, CurIP: {Block: ifcont60, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: ifcont60, CurIP: {Block: ifcont60, Point: end} - Cleaning up function resources for 'test_nested_for_else_continue.L246.C1'...
[HdlFuncDef] CurFunc: test_nested_for_else_continue.L246.C1, CurBlock: ifcont60, CurIP: {Block: ifcont60, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'test_nested_for_else_continue.L246.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'test_nested_for_else_continue.L246.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'test_nested_for_else_continue' (LLVM: test_nested_for_else_continue.L246.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'test_nested_for_else_continue'. Got LLVM Func: define internal ptr @test_nested_for_else_continue.L246.C1() {
entry:
  %callargs_array = alloca ptr, i32 2, align 8
  %passed.addr = alloca ptr, align 8
  %j.addr = alloca ptr, align 8
  %current_inner_sum.addr = alloca ptr, align 8
  %i.addr = alloca ptr, align 8
  %inner_loop_iter.addr = alloca ptr, align 8
  %outer_loop_iter.addr = alloca ptr, align 8
  %inner_else_count.addr = alloca ptr, align 8
  %outer_else_executed.addr = alloca ptr, align 8
  %inner_sum_total.addr = alloca ptr, align 8
  %outer_sum.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.68)
  store ptr %str_obj, ptr %test_name.addr, align 8
  call void @py_incref(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.69, i32 10)
  store ptr %int_obj_from_str, ptr %outer_sum.addr, align 8
  call void @py_incref(ptr %int_obj_from_str)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.70, i32 10)
  store ptr %int_obj_from_str1, ptr %inner_sum_total.addr, align 8
  call void @py_incref(ptr %int_obj_from_str1)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %outer_else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.71, i32 10)
  store ptr %int_obj_from_str2, ptr %inner_else_count.addr, align 8
  call void @py_incref(ptr %int_obj_from_str2)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.72, i32 10)
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.73, i32 10)
  %list_obj = call ptr @py_create_list(i32 2, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str3)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str4)
  store ptr %list_obj, ptr %outer_loop_iter.addr, align 8
  call void @py_incref(ptr %list_obj)
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.74, i32 10)
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.75, i32 10)
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.76, i32 10)
  %list_obj8 = call ptr @py_create_list(i32 3, i32 7)
  %2 = call ptr @py_list_append(ptr %list_obj8, ptr %int_obj_from_str5)
  %3 = call ptr @py_list_append(ptr %list_obj8, ptr %int_obj_from_str6)
  %4 = call ptr @py_list_append(ptr %list_obj8, ptr %int_obj_from_str7)
  store ptr %list_obj8, ptr %inner_loop_iter.addr, align 8
  call void @py_incref(ptr %list_obj8)
  %outer_loop_iter_val = load ptr, ptr %outer_loop_iter.addr, align 8
  %iterator = call ptr @py_iter(ptr %outer_loop_iter_val)
  %is_iter_null = icmp eq ptr %iterator, null
  br i1 %is_iter_null, label %iter.error, label %iter.ok

iter.error:                                       ; preds = %entry
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.77, i32 212)
  unreachable

iter.ok:                                          ; preds = %entry
  br label %for.header

for.header:                                       ; preds = %ifcont, %iter.ok
  %next_item_or_stop = call ptr @py_next(ptr %iterator)
  %is_stop_iteration = icmp eq ptr %next_item_or_stop, null
  br i1 %is_stop_iteration, label %for.stop_iteration, label %for.body

for.body:                                         ; preds = %for.header
  store ptr null, ptr %i.addr, align 8
  %old_i = load ptr, ptr %i.addr, align 8
  call void @py_decref(ptr %old_i)
  store ptr %next_item_or_stop, ptr %i.addr, align 8
  call void @py_incref(ptr %next_item_or_stop)
  %outer_sum_val = load ptr, ptr %outer_sum.addr, align 8
  %i_val = load ptr, ptr %i.addr, align 8
  %any_op_result = call ptr @py_object_add(ptr %outer_sum_val, ptr %i_val), !py.type !2
  %outer_sum_old = load ptr, ptr %outer_sum.addr, align 8
  call void @py_decref(ptr %outer_sum_old)
  store ptr %any_op_result, ptr %outer_sum.addr, align 8
  call void @py_incref(ptr %any_op_result)
  %int_obj_from_str9 = call ptr @py_create_int_bystring(ptr @int_str_const.78, i32 10)
  store ptr %int_obj_from_str9, ptr %current_inner_sum.addr, align 8
  call void @py_incref(ptr %int_obj_from_str9)
  %i_val10 = load ptr, ptr %i.addr, align 8
  %int_obj_from_str11 = call ptr @py_create_int_bystring(ptr @int_str_const.79, i32 10)
  %any_cmp_result = call ptr @py_object_compare(ptr %i_val10, ptr %int_obj_from_str11, i32 0), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %then, label %else

for.end:                                          ; preds = %for.else
  %bool_obj59 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj59, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj59)
  %outer_sum_val61 = load ptr, ptr %outer_sum.addr, align 8
  %int_obj_from_str62 = call ptr @py_create_int_bystring(ptr @int_str_const.85, i32 10)
  %cmp_result = call ptr @py_object_compare(ptr %outer_sum_val61, ptr %int_obj_from_str62, i32 0), !py.type !1
  %condval63 = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval63, label %then64, label %else65

for.stop_iteration:                               ; preds = %for.header
  call void @py_decref(ptr %iterator)
  br label %for.else

for.else:                                         ; preds = %for.stop_iteration
  %bool_obj58 = call ptr @py_create_bool(i1 true)
  %outer_else_executed_old = load ptr, ptr %outer_else_executed.addr, align 8
  call void @py_decref(ptr %outer_else_executed_old)
  store ptr %bool_obj58, ptr %outer_else_executed.addr, align 8
  call void @py_incref(ptr %bool_obj58)
  %outer_else_executed_scope_end_load = load ptr, ptr %outer_else_executed.addr, align 8
  call void @py_decref(ptr %outer_else_executed_scope_end_load)
  br label %for.end

ifcont:                                           ; preds = %for.end32, %for.end18
  %inner_sum_total_val = load ptr, ptr %inner_sum_total.addr, align 8
  %current_inner_sum_val55 = load ptr, ptr %current_inner_sum.addr, align 8
  %binop_result56 = call ptr @py_object_add(ptr %inner_sum_total_val, ptr %current_inner_sum_val55), !py.type !0
  %inner_sum_total_old = load ptr, ptr %inner_sum_total.addr, align 8
  call void @py_decref(ptr %inner_sum_total_old)
  store ptr %binop_result56, ptr %inner_sum_total.addr, align 8
  call void @py_incref(ptr %binop_result56)
  %current_inner_sum_scope_end_load57 = load ptr, ptr %current_inner_sum.addr, align 8
  call void @py_decref(ptr %current_inner_sum_scope_end_load57)
  %inner_sum_total_scope_end_load = load ptr, ptr %inner_sum_total.addr, align 8
  call void @py_decref(ptr %inner_sum_total_scope_end_load)
  %j_scope_end_load = load ptr, ptr %j.addr, align 8
  call void @py_decref(ptr %j_scope_end_load)
  %outer_sum_scope_end_load = load ptr, ptr %outer_sum.addr, align 8
  call void @py_decref(ptr %outer_sum_scope_end_load)
  br label %for.header

then:                                             ; preds = %for.body
  %inner_loop_iter_val = load ptr, ptr %inner_loop_iter.addr, align 8
  %iterator12 = call ptr @py_iter(ptr %inner_loop_iter_val)
  %is_iter_null13 = icmp eq ptr %iterator12, null
  br i1 %is_iter_null13, label %iter.error14, label %iter.ok15

else:                                             ; preds = %for.body
  %inner_loop_iter_val25 = load ptr, ptr %inner_loop_iter.addr, align 8
  %iterator26 = call ptr @py_iter(ptr %inner_loop_iter_val25)
  %is_iter_null27 = icmp eq ptr %iterator26, null
  br i1 %is_iter_null27, label %iter.error28, label %iter.ok29

iter.error14:                                     ; preds = %then
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.80, i32 216)
  unreachable

iter.ok15:                                        ; preds = %then
  br label %for.header16

for.header16:                                     ; preds = %for.body17, %iter.ok15
  %next_item_or_stop21 = call ptr @py_next(ptr %iterator12)
  %is_stop_iteration22 = icmp eq ptr %next_item_or_stop21, null
  br i1 %is_stop_iteration22, label %for.stop_iteration19, label %for.body17

for.body17:                                       ; preds = %for.header16
  store ptr null, ptr %j.addr, align 8
  %old_j = load ptr, ptr %j.addr, align 8
  call void @py_decref(ptr %old_j)
  store ptr %next_item_or_stop21, ptr %j.addr, align 8
  call void @py_incref(ptr %next_item_or_stop21)
  %current_inner_sum_val = load ptr, ptr %current_inner_sum.addr, align 8
  %j_val = load ptr, ptr %j.addr, align 8
  %any_op_result23 = call ptr @py_object_add(ptr %current_inner_sum_val, ptr %j_val), !py.type !2
  %current_inner_sum_old = load ptr, ptr %current_inner_sum.addr, align 8
  call void @py_decref(ptr %current_inner_sum_old)
  store ptr %any_op_result23, ptr %current_inner_sum.addr, align 8
  call void @py_incref(ptr %any_op_result23)
  %current_inner_sum_scope_end_load = load ptr, ptr %current_inner_sum.addr, align 8
  call void @py_decref(ptr %current_inner_sum_scope_end_load)
  br label %for.header16

for.end18:                                        ; preds = %for.else20
  br label %ifcont

for.stop_iteration19:                             ; preds = %for.header16
  call void @py_decref(ptr %iterator12)
  br label %for.else20

for.else20:                                       ; preds = %for.stop_iteration19
  %inner_else_count_val = load ptr, ptr %inner_else_count.addr, align 8
  %int_obj_from_str24 = call ptr @py_create_int_bystring(ptr @int_str_const.81, i32 10)
  %binop_result = call ptr @py_object_add(ptr %inner_else_count_val, ptr %int_obj_from_str24), !py.type !0
  %inner_else_count_old = load ptr, ptr %inner_else_count.addr, align 8
  call void @py_decref(ptr %inner_else_count_old)
  store ptr %binop_result, ptr %inner_else_count.addr, align 8
  call void @py_incref(ptr %binop_result)
  %inner_else_count_scope_end_load = load ptr, ptr %inner_else_count.addr, align 8
  call void @py_decref(ptr %inner_else_count_scope_end_load)
  br label %for.end18

iter.error28:                                     ; preds = %else
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.82, i32 221)
  unreachable

iter.ok29:                                        ; preds = %else
  br label %for.header30

for.header30:                                     ; preds = %ifcont38, %then43, %iter.ok29
  %next_item_or_stop35 = call ptr @py_next(ptr %iterator26)
  %is_stop_iteration36 = icmp eq ptr %next_item_or_stop35, null
  br i1 %is_stop_iteration36, label %for.stop_iteration33, label %for.body31

for.body31:                                       ; preds = %for.header30
  %old_j37 = load ptr, ptr %j.addr, align 8
  call void @py_decref(ptr %old_j37)
  store ptr %next_item_or_stop35, ptr %j.addr, align 8
  call void @py_incref(ptr %next_item_or_stop35)
  %j_val39 = load ptr, ptr %j.addr, align 8
  %int_obj_from_str40 = call ptr @py_create_int_bystring(ptr @int_str_const.83, i32 10)
  %any_cmp_result41 = call ptr @py_object_compare(ptr %j_val39, ptr %int_obj_from_str40, i32 0), !py.type !1
  %condval42 = call i1 @py_object_to_bool(ptr %any_cmp_result41)
  br i1 %condval42, label %then43, label %else44

for.end32:                                        ; preds = %for.else34
  br label %ifcont

for.stop_iteration33:                             ; preds = %for.header30
  call void @py_decref(ptr %iterator26)
  br label %for.else34

for.else34:                                       ; preds = %for.stop_iteration33
  %inner_else_count_val50 = load ptr, ptr %inner_else_count.addr, align 8
  %int_obj_from_str51 = call ptr @py_create_int_bystring(ptr @int_str_const.84, i32 10)
  %binop_result52 = call ptr @py_object_add(ptr %inner_else_count_val50, ptr %int_obj_from_str51), !py.type !0
  %inner_else_count_old53 = load ptr, ptr %inner_else_count.addr, align 8
  call void @py_decref(ptr %inner_else_count_old53)
  store ptr %binop_result52, ptr %inner_else_count.addr, align 8
  call void @py_incref(ptr %binop_result52)
  %inner_else_count_scope_end_load54 = load ptr, ptr %inner_else_count.addr, align 8
  call void @py_decref(ptr %inner_else_count_scope_end_load54)
  br label %for.end32

ifcont38:                                         ; preds = %else44
  %current_inner_sum_val45 = load ptr, ptr %current_inner_sum.addr, align 8
  %j_val46 = load ptr, ptr %j.addr, align 8
  %any_op_result47 = call ptr @py_object_add(ptr %current_inner_sum_val45, ptr %j_val46), !py.type !2
  %current_inner_sum_old48 = load ptr, ptr %current_inner_sum.addr, align 8
  call void @py_decref(ptr %current_inner_sum_old48)
  store ptr %any_op_result47, ptr %current_inner_sum.addr, align 8
  call void @py_incref(ptr %any_op_result47)
  %current_inner_sum_scope_end_load49 = load ptr, ptr %current_inner_sum.addr, align 8
  call void @py_decref(ptr %current_inner_sum_scope_end_load49)
  br label %for.header30

then43:                                           ; preds = %for.body31
  br label %for.header30

else44:                                           ; preds = %for.body31
  br label %ifcont38

ifcont60:                                         ; preds = %else65, %ifcont66
  %print_test_result_callable_loaded = load ptr, ptr @print_test_result_obj_gv, align 8
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  %passed_val = load ptr, ptr %passed.addr, align 8
  call void @py_incref(ptr %test_name_val)
  call void @py_incref(ptr %passed_val)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %test_name_val, ptr %arg_ptr_0, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array, i32 1
  store ptr %passed_val, ptr %arg_ptr_1, align 8
  %call_result = call ptr @py_call_function(ptr %print_test_result_callable_loaded, i32 2, ptr %callargs_array)
  %passed_val87 = load ptr, ptr %passed.addr, align 8
  ret ptr %passed_val87

then64:                                           ; preds = %for.end
  %inner_sum_total_val67 = load ptr, ptr %inner_sum_total.addr, align 8
  %int_obj_from_str68 = call ptr @py_create_int_bystring(ptr @int_str_const.86, i32 10)
  %cmp_result69 = call ptr @py_object_compare(ptr %inner_sum_total_val67, ptr %int_obj_from_str68, i32 0), !py.type !1
  %condval70 = call i1 @py_object_to_bool(ptr %cmp_result69)
  br i1 %condval70, label %then71, label %else72

else65:                                           ; preds = %for.end
  br label %ifcont60

ifcont66:                                         ; preds = %else72, %ifcont73
  br label %ifcont60

then71:                                           ; preds = %then64
  %inner_else_count_val74 = load ptr, ptr %inner_else_count.addr, align 8
  %int_obj_from_str75 = call ptr @py_create_int_bystring(ptr @int_str_const.87, i32 10)
  %cmp_result76 = call ptr @py_object_compare(ptr %inner_else_count_val74, ptr %int_obj_from_str75, i32 0), !py.type !1
  %condval77 = call i1 @py_object_to_bool(ptr %cmp_result76)
  br i1 %condval77, label %then78, label %else79

else72:                                           ; preds = %then64
  br label %ifcont66

ifcont73:                                         ; preds = %else79, %ifcont80
  br label %ifcont66

then78:                                           ; preds = %then71
  %outer_else_executed_val = load ptr, ptr %outer_else_executed.addr, align 8
  %bool_obj81 = call ptr @py_create_bool(i1 true)
  %cmp_result82 = call ptr @py_object_compare(ptr %outer_else_executed_val, ptr %bool_obj81, i32 0), !py.type !1
  %condval83 = call i1 @py_object_to_bool(ptr %cmp_result82)
  br i1 %condval83, label %then84, label %else85

else79:                                           ; preds = %then71
  br label %ifcont73

ifcont80:                                         ; preds = %else85, %then84
  br label %ifcont73

then84:                                           ; preds = %then78
  %bool_obj86 = call ptr @py_create_bool(i1 true)
  %passed_old = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old)
  store ptr %bool_obj86, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj86)
  br label %ifcont80

else85:                                           ; preds = %then78
  br label %ifcont80
}
 ('test_nested_for_else_continue.L246.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'test_nested_for_else_continue'...
Debug [CodeGenType]: Resolved static FunctionType for 'test_nested_for_else_continue' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'test_nested_for_else_continue'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'test_nested_for_else_continue.L246.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'test_nested_for_else_continue'. Value:   %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'test_nested_for_else_continue' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @test_nested_for_else_continue_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @test_nested_for_else_continue_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'test_nested_for_else_continue' to storage: @test_nested_for_else_continue_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'test_nested_for_else_continue'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'test_nested_for_else_continue'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 318 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'test_for_else_complex_break_continue'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'test_for_else_complex_break_continue' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'test_for_else_complex_break_continue' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'test_for_else_complex_break_continue'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'test_for_else_complex_break_continue'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'test_for_else_complex_break_continue.L318.C1' for Python name 'test_for_else_complex_break_continue'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'test_for_else_complex_break_continue'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'test_for_else_complex_break_continue.L318.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: test_for_else_complex_break_continue.L318.C1 with name 'test_for_else_complex_break_continue.L318.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568319936 -> LLVM Func test_for_else_complex_break_continue.L318.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'test_for_else_complex_break_continue.L318.C1'...
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: test_for_else_complex_break_continue.L318.C1
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 247
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 248
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 251
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 252
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 253
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 27 at line 255
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: for.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from for.body on   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) already terminated.
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont12
DEBUG:    [Pre] Original Insert BB: ifcont, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont12
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval16 = call i1 @py_object_to_bool(ptr %any_cmp_result15)
DEBUG:    [2] Created blocks: thenBB=then17, elseEntryBB=else18
DEBUG:    [3] Creating CondBr from ifcont on   %condval16 = call i1 @py_object_to_bool(ptr %any_cmp_result15) ? then17 : else18
DEBUG:    [4] Handling 'then' branch (Block: then17)
DEBUG:        Set insert point to: then17
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then17
DEBUG:        'then' block (then17) already terminated.
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else18)
DEBUG:        Set insert point to: else18
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else18) to finalMergeBB (ifcont12)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else18
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont12)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont12
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block ifcont12
Debug [PySymbolTable]: Generating DecRef for local var 'processed_items_s1' in scope 4
Debug [PySymbolTable]: Generating DecRef for local var 'processed_items_s1_count' in scope 4
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.else
Debug [PySymbolTable]: Generating DecRef for local var 'else_executed_s1' in scope 4
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 8 at line 265
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: for.end, CurIP: {Block: for.end, Point: end} - Body: Handling Stmt Kind 2 at line 267
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont25
DEBUG:    [Pre] Original Insert BB: for.end, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont25
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval28 = call i1 @py_object_to_bool(ptr %cmp_result)
DEBUG:    [2] Created blocks: thenBB=then29, elseEntryBB=else30
DEBUG:    [3] Creating CondBr from for.end on   %condval28 = call i1 @py_object_to_bool(ptr %cmp_result) ? then29 : else30
DEBUG:    [4] Handling 'then' branch (Block: then29)
DEBUG:        Set insert point to: then29
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont31
DEBUG:    [Pre] Original Insert BB: then29, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont31
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval36 = call i1 @py_object_to_bool(ptr %any_cmp_result35)
DEBUG:      [2] Created blocks: thenBB=then37, elseEntryBB=else38
DEBUG:      [3] Creating CondBr from then29 on   %condval36 = call i1 @py_object_to_bool(ptr %any_cmp_result35) ? then37 : else38
DEBUG:      [4] Handling 'then' branch (Block: then37)
DEBUG:          Set insert point to: then37
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont39
DEBUG:    [Pre] Original Insert BB: then37, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:     -> Entering handleIfStmtRecursive
DEBUG:        Target finalMergeBB: ifcont39
DEBUG:        [1] Handling condition...
DEBUG:        [1] Condition Value:   %condval45 = call i1 @py_object_to_bool(ptr %any_cmp_result44)
DEBUG:        [2] Created blocks: thenBB=then46, elseEntryBB=else47
DEBUG:        [3] Creating CondBr from then37 on   %condval45 = call i1 @py_object_to_bool(ptr %any_cmp_result44) ? then46 : else47
DEBUG:        [4] Handling 'then' branch (Block: then46)
DEBUG:            Set insert point to: then46
DEBUG:            Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont48
DEBUG:    [Pre] Original Insert BB: then46, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:       -> Entering handleIfStmtRecursive
DEBUG:          Target finalMergeBB: ifcont48
DEBUG:          [1] Handling condition...
DEBUG:          [1] Condition Value:   %condval49 = call i1 @py_object_to_bool(ptr %unaryop_result)
DEBUG:          [2] Created blocks: thenBB=then50, elseEntryBB=else51
DEBUG:          [3] Creating CondBr from then46 on   %condval49 = call i1 @py_object_to_bool(ptr %unaryop_result) ? then50 : else51
DEBUG:          [4] Handling 'then' branch (Block: then50)
DEBUG:              Set insert point to: then50
DEBUG:              Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:              Returned from handleBlock for thenBody. Current block: then50
DEBUG:              'then' block (then50) did not terminate. Creating Br to finalMergeBB (ifcont48)
DEBUG:          [5] Handling 'else'/'elif' part (Entry Block: else51)
DEBUG:              Set insert point to: else51
DEBUG:              Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else51) to finalMergeBB (ifcont48)
DEBUG:       <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else51
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont48)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont48
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for thenBody. Current block: ifcont48
DEBUG:            'then' block (ifcont48) did not terminate. Creating Br to finalMergeBB (ifcont39)
DEBUG:        [5] Handling 'else'/'elif' part (Entry Block: else47)
DEBUG:            Set insert point to: else47
DEBUG:            Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else47) to finalMergeBB (ifcont39)
DEBUG:     <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else47
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont39)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont39
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: ifcont39
DEBUG:          'then' block (ifcont39) did not terminate. Creating Br to finalMergeBB (ifcont31)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else38)
DEBUG:          Set insert point to: else38
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else38) to finalMergeBB (ifcont31)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else38
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont31)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont31
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont31
DEBUG:        'then' block (ifcont31) did not terminate. Creating Br to finalMergeBB (ifcont25)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else30)
DEBUG:        Set insert point to: else30
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else30) to finalMergeBB (ifcont25)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else30
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont25)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont25
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont25, CurIP: {Block: ifcont25, Point: end} - Body: Handling Stmt Kind 8 at line 274
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont25, CurIP: {Block: ifcont25, Point: end} - Body: Handling Stmt Kind 8 at line 275
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont25, CurIP: {Block: ifcont25, Point: end} - Body: Handling Stmt Kind 8 at line 276
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont25, CurIP: {Block: ifcont25, Point: end} - Body: Handling Stmt Kind 27 at line 278
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont69
DEBUG:    [Pre] Original Insert BB: for.body62, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont69
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval73 = call i1 @py_object_to_bool(ptr %any_cmp_result72)
DEBUG:    [2] Created blocks: thenBB=then74, elseEntryBB=else75
DEBUG:    [3] Creating CondBr from for.body62 on   %condval73 = call i1 @py_object_to_bool(ptr %any_cmp_result72) ? then74 : else75
DEBUG:    [4] Handling 'then' branch (Block: then74)
DEBUG:        Set insert point to: then74
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then74
DEBUG:        'then' block (then74) already terminated.
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else75)
DEBUG:        Set insert point to: else75
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else75) to finalMergeBB (ifcont69)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else75
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont69)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont69
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block ifcont69
Debug [PySymbolTable]: Generating DecRef for local var 'processed_items_s2' in scope 4
Debug [PySymbolTable]: Generating DecRef for local var 'processed_items_s2_count' in scope 4
Debug [PySymbolTable]: Popping scope level 4
Debug [PySymbolTable]: Generating cleanups for scope level 4 in block for.else65
Debug [PySymbolTable]: Generating DecRef for local var 'else_executed_s2' in scope 4
Debug [PySymbolTable]: Popping scope level 4
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: for.end63, CurIP: {Block: for.end63, Point: end} - Body: Handling Stmt Kind 8 at line 292
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: for.end63, CurIP: {Block: for.end63, Point: end} - Body: Handling Stmt Kind 8 at line 293
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: for.end63, CurIP: {Block: for.end63, Point: end} - Body: Handling Stmt Kind 8 at line 295
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: for.end63, CurIP: {Block: for.end63, Point: end} - Body: Handling Stmt Kind 2 at line 296
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont92
DEBUG:    [Pre] Original Insert BB: for.end63, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont92
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval93 = call i1 @py_object_to_bool(ptr %else_executed_s2_val)
DEBUG:    [2] Created blocks: thenBB=then94, elseEntryBB=else95
DEBUG:    [3] Creating CondBr from for.end63 on   %condval93 = call i1 @py_object_to_bool(ptr %else_executed_s2_val) ? then94 : else95
DEBUG:    [4] Handling 'then' branch (Block: then94)
DEBUG:        Set insert point to: then94
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont96
DEBUG:    [Pre] Original Insert BB: then94, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont96
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval99 = call i1 @py_object_to_bool(ptr %cmp_result98)
DEBUG:      [2] Created blocks: thenBB=then100, elseEntryBB=else101
DEBUG:      [3] Creating CondBr from then94 on   %condval99 = call i1 @py_object_to_bool(ptr %cmp_result98) ? then100 : else101
DEBUG:      [4] Handling 'then' branch (Block: then100)
DEBUG:          Set insert point to: then100
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Entering handleWhileStmt
DEBUG:   Source Line: 301
DEBUG:   [1] Created Basic Blocks:
DEBUG:       Preheader: then100
DEBUG:       Condition: while.cond
DEBUG:       Body:      while.body
DEBUG:       Latch:     while.latch
DEBUG:       End:       while.end
DEBUG:       Continue Target: while.latch
DEBUG:       Break Target:    while.end
DEBUG:   Pushed loop targets onto stacks.
DEBUG:   [2] Variables assigned in body or else:
DEBUG:       - idx
DEBUG:       - items_match
DEBUG:   [3] Created branch from Preheader (then100) to Condition (while.cond)
DEBUG:   [4] Set insert point to Condition block (while.cond)
DEBUG:   [5] Creating PHI nodes:
DEBUG:       Processing variable: 'idx'
DEBUG:         Storage (from preheader scope):   %idx.addr = alloca ptr, align 8
DEBUG:         Initial Value (loaded in preheader):   %idx_init = load ptr, ptr %idx.addr, align 8
DEBUG:         Initial Type: int
DEBUG:         LLVM Type for PHI: ptr
DEBUG:         Created PHI node:   %idx.phi = phi ptr 
DEBUG:         Added incoming edge to PHI: [  %idx_init = load ptr, ptr %idx.addr, align 8, from then100]
DEBUG:       Processing variable: 'items_match'
DEBUG:         Storage (from preheader scope):   %items_match.addr = alloca ptr, align 8
DEBUG:         Initial Value (loaded in preheader):   %items_match_init = load ptr, ptr %items_match.addr, align 8
DEBUG:         Initial Type: bool
DEBUG:         LLVM Type for PHI: ptr
DEBUG:         Created PHI node:   %items_match.phi = phi ptr 
DEBUG:         Added incoming edge to PHI: [  %items_match_init = load ptr, ptr %items_match.addr, align 8, from then100]
DEBUG:       Temporarily updating symtable for 'idx' to PHI for condition generation.
DEBUG:       Temporarily updating symtable for 'items_match' to PHI for condition generation.
DEBUG:   [6] Generating condition code (using PHI values)...
DEBUG:       Restoring symtable for 'idx' back to storage ptr (  %idx.addr = alloca ptr, align 8) after condition generation.
DEBUG:       Restoring symtable for 'items_match' back to storage ptr (  %items_match.addr = alloca ptr, align 8) after condition generation.
DEBUG:       Generated condition value:   %condval106 = call i1 @py_object_to_bool(ptr %cmp_result105)
DEBUG:   [7] Created conditional branch from while.cond based on   %condval106 = call i1 @py_object_to_bool(ptr %cmp_result105):
DEBUG:       True -> Body (while.body)
DEBUG:       False -> while.end (End Block)
DEBUG:   [8] Set insert point to Body block (while.body)
DEBUG:       Processing loop body statements using handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont107
DEBUG:    [Pre] Original Insert BB: while.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:     -> Entering handleIfStmtRecursive
DEBUG:        Target finalMergeBB: ifcont107
DEBUG:        [1] Handling condition...
DEBUG:        [1] Condition Value:   %condval113 = call i1 @py_object_to_bool(ptr %any_cmp_result112)
DEBUG:        [2] Created blocks: thenBB=then114, elseEntryBB=else115
DEBUG:        [3] Creating CondBr from while.body on   %condval113 = call i1 @py_object_to_bool(ptr %any_cmp_result112) ? then114 : else115
DEBUG:        [4] Handling 'then' branch (Block: then114)
DEBUG:            Set insert point to: then114
DEBUG:            Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for thenBody. Current block: then114
DEBUG:            'then' block (then114) already terminated.
DEBUG:        [5] Handling 'else'/'elif' part (Entry Block: else115)
DEBUG:            Set insert point to: else115
DEBUG:            Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else115) to finalMergeBB (ifcont107)
DEBUG:     <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else115
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont107)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont107
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:       Finished processing loop body statements via handleBlock. Current block: ifcont107
DEBUG:   [9] Checking if loop body terminated naturally.
DEBUG:       Body End Block: ifcont107
DEBUG:       Body Terminated: No
DEBUG:       Created branch from Body End (ifcont107) to Latch (while.latch)
DEBUG:   [10] Set insert point to Latch block (while.latch)
DEBUG:         Getting final value for PHI 'idx' by loading from storage (  %idx.addr = alloca ptr, align 8) in latch block (while.latch):   %idx_latch_val = load ptr, ptr %idx.addr, align 8
DEBUG:         Getting final value for PHI 'items_match' by loading from storage (  %items_match.addr = alloca ptr, align 8) in latch block (while.latch):   %items_match_latch_val = load ptr, ptr %items_match.addr, align 8
DEBUG:       Cleaning up temporary objects for this iteration (in latch)...
DEBUG:       Created back edge branch from Latch (while.latch) to Condition (while.cond)
DEBUG:   [11] Adding second incoming edges to PHI nodes (from latch while.latch):
DEBUG:         Adding incoming edge to PHI 'idx' (  %idx.phi = phi ptr [ %idx_init, %then100 ]): [  %idx_latch_val = load ptr, ptr %idx.addr, align 8, from while.latch]
DEBUG:         Adding incoming edge to PHI 'items_match' (  %items_match.phi = phi ptr [ %items_match_init, %then100 ]): [  %items_match_latch_val = load ptr, ptr %items_match.addr, align 8, from while.latch]
DEBUG:   [12] Set insert point to End block (while.end)
DEBUG:   Popped loop targets from stacks (normal exit).
DEBUG: Exiting handleWhileStmt
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont120
DEBUG:    [Pre] Original Insert BB: while.end, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:     -> Entering handleIfStmtRecursive
DEBUG:        Target finalMergeBB: ifcont120
DEBUG:        [1] Handling condition...
DEBUG:        [1] Condition Value:   %condval121 = call i1 @py_object_to_bool(ptr %items_match_val)
DEBUG:        [2] Created blocks: thenBB=then122, elseEntryBB=else123
DEBUG:        [3] Creating CondBr from while.end on   %condval121 = call i1 @py_object_to_bool(ptr %items_match_val) ? then122 : else123
DEBUG:        [4] Handling 'then' branch (Block: then122)
DEBUG:            Set insert point to: then122
DEBUG:            Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for thenBody. Current block: then122
DEBUG:            'then' block (then122) did not terminate. Creating Br to finalMergeBB (ifcont120)
DEBUG:        [5] Handling 'else'/'elif' part (Entry Block: else123)
DEBUG:            Set insert point to: else123
DEBUG:            Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else123) to finalMergeBB (ifcont120)
DEBUG:     <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else123
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont120)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont120
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: ifcont120
DEBUG:          'then' block (ifcont120) did not terminate. Creating Br to finalMergeBB (ifcont96)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else101)
DEBUG:          Set insert point to: else101
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else101) to finalMergeBB (ifcont96)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else101
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont96)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont96
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont96
DEBUG:        'then' block (ifcont96) did not terminate. Creating Br to finalMergeBB (ifcont92)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else95)
DEBUG:        Set insert point to: else95
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else95) to finalMergeBB (ifcont92)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else95
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont92)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont92
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont92, CurIP: {Block: ifcont92, Point: end} - Body: Handling Stmt Kind 8 at line 309
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont92, CurIP: {Block: ifcont92, Point: end} - Body: Handling Stmt Kind 2 at line 310
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont126
DEBUG:    [Pre] Original Insert BB: ifcont92, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont126
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval127 = call i1 @py_object_to_bool(ptr %scenario1_passed_val)
DEBUG:    [2] Created blocks: thenBB=then128, elseEntryBB=else129
DEBUG:    [3] Creating CondBr from ifcont92 on   %condval127 = call i1 @py_object_to_bool(ptr %scenario1_passed_val) ? then128 : else129
DEBUG:    [4] Handling 'then' branch (Block: then128)
DEBUG:        Set insert point to: then128
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont130
DEBUG:    [Pre] Original Insert BB: then128, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont130
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval131 = call i1 @py_object_to_bool(ptr %scenario2_passed_val)
DEBUG:      [2] Created blocks: thenBB=then132, elseEntryBB=else133
DEBUG:      [3] Creating CondBr from then128 on   %condval131 = call i1 @py_object_to_bool(ptr %scenario2_passed_val) ? then132 : else133
DEBUG:      [4] Handling 'then' branch (Block: then132)
DEBUG:          Set insert point to: then132
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then132
DEBUG:          'then' block (then132) did not terminate. Creating Br to finalMergeBB (ifcont130)
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else133)
DEBUG:          Set insert point to: else133
DEBUG:          Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else133) to finalMergeBB (ifcont130)
DEBUG:   <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else133
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont130)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont130
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: ifcont130
DEBUG:        'then' block (ifcont130) did not terminate. Creating Br to finalMergeBB (ifcont126)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else129)
DEBUG:        Set insert point to: else129
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else129) to finalMergeBB (ifcont126)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else129
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont126)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont126
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont126, CurIP: {Block: ifcont126, Point: end} - Body: Handling Stmt Kind 9 at line 0
[HdlCallExpr] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont126, CurIP: {Block: ifcont126, Point: end} - Generating runtime call via py_call_function for 'print_test_result'
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont126, CurIP: {Block: ifcont126, Point: end} - Body: Handling Stmt Kind 6 at line 317
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont126, CurIP: {Block: ifcont126, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont126, CurIP: {Block: ifcont126, Point: end} - Checking for default return for 'test_for_else_complex_break_continue.L318.C1'. Last block: ifcont126
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont126, CurIP: {Block: ifcont126, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont126, CurIP: {Block: ifcont126, Point: end} - Cleaning up function resources for 'test_for_else_complex_break_continue.L318.C1'...
[HdlFuncDef] CurFunc: test_for_else_complex_break_continue.L318.C1, CurBlock: ifcont126, CurIP: {Block: ifcont126, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'test_for_else_complex_break_continue.L318.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'test_for_else_complex_break_continue.L318.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'test_for_else_complex_break_continue' (LLVM: test_for_else_complex_break_continue.L318.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'test_for_else_complex_break_continue'. Got LLVM Func: define internal ptr @test_for_else_complex_break_continue.L318.C1() {
entry:
  %callargs_array = alloca ptr, i32 2, align 8
  %passed.addr = alloca ptr, align 8
  %idx.addr = alloca ptr, align 8
  %items_match.addr = alloca ptr, align 8
  %scenario2_passed.addr = alloca ptr, align 8
  %expected_scenario2_count.addr = alloca ptr, align 8
  %expected_scenario2_items.addr = alloca ptr, align 8
  %else_executed_s2.addr = alloca ptr, align 8
  %processed_items_s2_count.addr = alloca ptr, align 8
  %processed_items_s2.addr = alloca ptr, align 8
  %scenario1_passed.addr = alloca ptr, align 8
  %x.addr = alloca ptr, align 8
  %else_executed_s1.addr = alloca ptr, align 8
  %processed_items_s1_count.addr = alloca ptr, align 8
  %processed_items_s1.addr = alloca ptr, align 8
  %numbers.addr = alloca ptr, align 8
  %test_name.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.88)
  store ptr %str_obj, ptr %test_name.addr, align 8
  call void @py_incref(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.89, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.90, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.91, i32 10)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.92, i32 10)
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.93, i32 10)
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.94, i32 10)
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.95, i32 10)
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.96, i32 10)
  %list_obj = call ptr @py_create_list(i32 8, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %3 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str3)
  %4 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str4)
  %5 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str5)
  %6 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str6)
  %7 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str7)
  store ptr %list_obj, ptr %numbers.addr, align 8
  call void @py_incref(ptr %list_obj)
  %list_obj8 = call ptr @py_create_list(i32 0, i32 7)
  store ptr %list_obj8, ptr %processed_items_s1.addr, align 8
  call void @py_incref(ptr %list_obj8)
  %int_obj_from_str9 = call ptr @py_create_int_bystring(ptr @int_str_const.97, i32 10)
  store ptr %int_obj_from_str9, ptr %processed_items_s1_count.addr, align 8
  call void @py_incref(ptr %int_obj_from_str9)
  %bool_obj = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj, ptr %else_executed_s1.addr, align 8
  call void @py_incref(ptr %bool_obj)
  %numbers_val = load ptr, ptr %numbers.addr, align 8
  %iterator = call ptr @py_iter(ptr %numbers_val)
  %is_iter_null = icmp eq ptr %iterator, null
  br i1 %is_iter_null, label %iter.error, label %iter.ok

iter.error:                                       ; preds = %entry
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.98, i32 255)
  unreachable

iter.ok:                                          ; preds = %entry
  br label %for.header

for.header:                                       ; preds = %ifcont12, %then, %iter.ok
  %next_item_or_stop = call ptr @py_next(ptr %iterator)
  %is_stop_iteration = icmp eq ptr %next_item_or_stop, null
  br i1 %is_stop_iteration, label %for.stop_iteration, label %for.body

for.body:                                         ; preds = %for.header
  store ptr null, ptr %x.addr, align 8
  %old_x = load ptr, ptr %x.addr, align 8
  call void @py_decref(ptr %old_x)
  store ptr %next_item_or_stop, ptr %x.addr, align 8
  call void @py_incref(ptr %next_item_or_stop)
  %x_val = load ptr, ptr %x.addr, align 8
  %int_obj_from_str10 = call ptr @py_create_int_bystring(ptr @int_str_const.99, i32 10)
  %any_op_result = call ptr @py_object_modulo(ptr %x_val, ptr %int_obj_from_str10), !py.type !2
  %int_obj_from_str11 = call ptr @py_create_int_bystring(ptr @int_str_const.100, i32 10)
  %any_cmp_result = call ptr @py_object_compare(ptr %any_op_result, ptr %int_obj_from_str11, i32 0), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %then, label %else

for.end:                                          ; preds = %for.else, %then17
  %bool_obj24 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj24, ptr %scenario1_passed.addr, align 8
  call void @py_incref(ptr %bool_obj24)
  %processed_items_s1_count_val26 = load ptr, ptr %processed_items_s1_count.addr, align 8
  %int_obj_from_str27 = call ptr @py_create_int_bystring(ptr @int_str_const.103, i32 10)
  %cmp_result = call ptr @py_object_compare(ptr %processed_items_s1_count_val26, ptr %int_obj_from_str27, i32 0), !py.type !1
  %condval28 = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval28, label %then29, label %else30

for.stop_iteration:                               ; preds = %for.header
  call void @py_decref(ptr %iterator)
  br label %for.else

for.else:                                         ; preds = %for.stop_iteration
  %bool_obj23 = call ptr @py_create_bool(i1 true)
  %else_executed_s1_old = load ptr, ptr %else_executed_s1.addr, align 8
  call void @py_decref(ptr %else_executed_s1_old)
  store ptr %bool_obj23, ptr %else_executed_s1.addr, align 8
  call void @py_incref(ptr %bool_obj23)
  %else_executed_s1_scope_end_load = load ptr, ptr %else_executed_s1.addr, align 8
  call void @py_decref(ptr %else_executed_s1_scope_end_load)
  br label %for.end

ifcont:                                           ; preds = %else
  %x_val13 = load ptr, ptr %x.addr, align 8
  %int_obj_from_str14 = call ptr @py_create_int_bystring(ptr @int_str_const.101, i32 10)
  %any_cmp_result15 = call ptr @py_object_compare(ptr %x_val13, ptr %int_obj_from_str14, i32 0), !py.type !1
  %condval16 = call i1 @py_object_to_bool(ptr %any_cmp_result15)
  br i1 %condval16, label %then17, label %else18

then:                                             ; preds = %for.body
  br label %for.header

else:                                             ; preds = %for.body
  br label %ifcont

ifcont12:                                         ; preds = %else18
  %processed_items_s1_val = load ptr, ptr %processed_items_s1.addr, align 8
  %x_val19 = load ptr, ptr %x.addr, align 8
  %list_obj20 = call ptr @py_create_list(i32 1, i32 7)
  %8 = call ptr @py_list_append(ptr %list_obj20, ptr %x_val19)
  %binop_result = call ptr @py_object_add(ptr %processed_items_s1_val, ptr %list_obj20), !py.type !3
  %processed_items_s1_old = load ptr, ptr %processed_items_s1.addr, align 8
  call void @py_decref(ptr %processed_items_s1_old)
  store ptr %binop_result, ptr %processed_items_s1.addr, align 8
  call void @py_incref(ptr %binop_result)
  %processed_items_s1_count_val = load ptr, ptr %processed_items_s1_count.addr, align 8
  %int_obj_from_str21 = call ptr @py_create_int_bystring(ptr @int_str_const.102, i32 10)
  %binop_result22 = call ptr @py_object_add(ptr %processed_items_s1_count_val, ptr %int_obj_from_str21), !py.type !0
  %processed_items_s1_count_old = load ptr, ptr %processed_items_s1_count.addr, align 8
  call void @py_decref(ptr %processed_items_s1_count_old)
  store ptr %binop_result22, ptr %processed_items_s1_count.addr, align 8
  call void @py_incref(ptr %binop_result22)
  %processed_items_s1_scope_end_load = load ptr, ptr %processed_items_s1.addr, align 8
  call void @py_decref(ptr %processed_items_s1_scope_end_load)
  %processed_items_s1_count_scope_end_load = load ptr, ptr %processed_items_s1_count.addr, align 8
  call void @py_decref(ptr %processed_items_s1_count_scope_end_load)
  br label %for.header

then17:                                           ; preds = %ifcont
  br label %for.end

else18:                                           ; preds = %ifcont
  br label %ifcont12

ifcont25:                                         ; preds = %else30, %ifcont31
  %list_obj53 = call ptr @py_create_list(i32 0, i32 7)
  store ptr %list_obj53, ptr %processed_items_s2.addr, align 8
  call void @py_incref(ptr %list_obj53)
  %int_obj_from_str54 = call ptr @py_create_int_bystring(ptr @int_str_const.108, i32 10)
  store ptr %int_obj_from_str54, ptr %processed_items_s2_count.addr, align 8
  call void @py_incref(ptr %int_obj_from_str54)
  %bool_obj55 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj55, ptr %else_executed_s2.addr, align 8
  call void @py_incref(ptr %bool_obj55)
  %numbers_val56 = load ptr, ptr %numbers.addr, align 8
  %iterator57 = call ptr @py_iter(ptr %numbers_val56)
  %is_iter_null58 = icmp eq ptr %iterator57, null
  br i1 %is_iter_null58, label %iter.error59, label %iter.ok60

then29:                                           ; preds = %for.end
  %processed_items_s1_val32 = load ptr, ptr %processed_items_s1.addr, align 8
  %int_obj_from_str33 = call ptr @py_create_int_bystring(ptr @int_str_const.104, i32 10)
  %list_item = call ptr @py_list_get_item(ptr %processed_items_s1_val32, ptr %int_obj_from_str33)
  %int_obj_from_str34 = call ptr @py_create_int_bystring(ptr @int_str_const.105, i32 10)
  %any_cmp_result35 = call ptr @py_object_compare(ptr %list_item, ptr %int_obj_from_str34, i32 0), !py.type !1
  %condval36 = call i1 @py_object_to_bool(ptr %any_cmp_result35)
  br i1 %condval36, label %then37, label %else38

else30:                                           ; preds = %for.end
  br label %ifcont25

ifcont31:                                         ; preds = %else38, %ifcont39
  br label %ifcont25

then37:                                           ; preds = %then29
  %processed_items_s1_val40 = load ptr, ptr %processed_items_s1.addr, align 8
  %int_obj_from_str41 = call ptr @py_create_int_bystring(ptr @int_str_const.106, i32 10)
  %list_item42 = call ptr @py_list_get_item(ptr %processed_items_s1_val40, ptr %int_obj_from_str41)
  %int_obj_from_str43 = call ptr @py_create_int_bystring(ptr @int_str_const.107, i32 10)
  %any_cmp_result44 = call ptr @py_object_compare(ptr %list_item42, ptr %int_obj_from_str43, i32 0), !py.type !1
  %condval45 = call i1 @py_object_to_bool(ptr %any_cmp_result44)
  br i1 %condval45, label %then46, label %else47

else38:                                           ; preds = %then29
  br label %ifcont31

ifcont39:                                         ; preds = %else47, %ifcont48
  br label %ifcont31

then46:                                           ; preds = %then37
  %else_executed_s1_val = load ptr, ptr %else_executed_s1.addr, align 8
  %unaryop_result = call ptr @py_object_not(ptr %else_executed_s1_val)
  %condval49 = call i1 @py_object_to_bool(ptr %unaryop_result)
  br i1 %condval49, label %then50, label %else51

else47:                                           ; preds = %then37
  br label %ifcont39

ifcont48:                                         ; preds = %else51, %then50
  br label %ifcont39

then50:                                           ; preds = %then46
  %bool_obj52 = call ptr @py_create_bool(i1 true)
  %scenario1_passed_old = load ptr, ptr %scenario1_passed.addr, align 8
  call void @py_decref(ptr %scenario1_passed_old)
  store ptr %bool_obj52, ptr %scenario1_passed.addr, align 8
  call void @py_incref(ptr %bool_obj52)
  br label %ifcont48

else51:                                           ; preds = %then46
  br label %ifcont48

iter.error59:                                     ; preds = %ifcont25
  call void @py_runtime_error(ptr @TypeError_NotIterable_str.109, i32 278)
  unreachable

iter.ok60:                                        ; preds = %ifcont25
  br label %for.header61

for.header61:                                     ; preds = %ifcont69, %then74, %iter.ok60
  %next_item_or_stop66 = call ptr @py_next(ptr %iterator57)
  %is_stop_iteration67 = icmp eq ptr %next_item_or_stop66, null
  br i1 %is_stop_iteration67, label %for.stop_iteration64, label %for.body62

for.body62:                                       ; preds = %for.header61
  %old_x68 = load ptr, ptr %x.addr, align 8
  call void @py_decref(ptr %old_x68)
  store ptr %next_item_or_stop66, ptr %x.addr, align 8
  call void @py_incref(ptr %next_item_or_stop66)
  %x_val70 = load ptr, ptr %x.addr, align 8
  %int_obj_from_str71 = call ptr @py_create_int_bystring(ptr @int_str_const.110, i32 10)
  %any_cmp_result72 = call ptr @py_object_compare(ptr %x_val70, ptr %int_obj_from_str71, i32 0), !py.type !1
  %condval73 = call i1 @py_object_to_bool(ptr %any_cmp_result72)
  br i1 %condval73, label %then74, label %else75

for.end63:                                        ; preds = %for.else65
  %int_obj_from_str82 = call ptr @py_create_int_bystring(ptr @int_str_const.112, i32 10)
  %int_obj_from_str83 = call ptr @py_create_int_bystring(ptr @int_str_const.113, i32 10)
  %int_obj_from_str84 = call ptr @py_create_int_bystring(ptr @int_str_const.114, i32 10)
  %int_obj_from_str85 = call ptr @py_create_int_bystring(ptr @int_str_const.115, i32 10)
  %int_obj_from_str86 = call ptr @py_create_int_bystring(ptr @int_str_const.116, i32 10)
  %int_obj_from_str87 = call ptr @py_create_int_bystring(ptr @int_str_const.117, i32 10)
  %int_obj_from_str88 = call ptr @py_create_int_bystring(ptr @int_str_const.118, i32 10)
  %list_obj89 = call ptr @py_create_list(i32 7, i32 7)
  %9 = call ptr @py_list_append(ptr %list_obj89, ptr %int_obj_from_str82)
  %10 = call ptr @py_list_append(ptr %list_obj89, ptr %int_obj_from_str83)
  %11 = call ptr @py_list_append(ptr %list_obj89, ptr %int_obj_from_str84)
  %12 = call ptr @py_list_append(ptr %list_obj89, ptr %int_obj_from_str85)
  %13 = call ptr @py_list_append(ptr %list_obj89, ptr %int_obj_from_str86)
  %14 = call ptr @py_list_append(ptr %list_obj89, ptr %int_obj_from_str87)
  %15 = call ptr @py_list_append(ptr %list_obj89, ptr %int_obj_from_str88)
  store ptr %list_obj89, ptr %expected_scenario2_items.addr, align 8
  call void @py_incref(ptr %list_obj89)
  %int_obj_from_str90 = call ptr @py_create_int_bystring(ptr @int_str_const.119, i32 10)
  store ptr %int_obj_from_str90, ptr %expected_scenario2_count.addr, align 8
  call void @py_incref(ptr %int_obj_from_str90)
  %bool_obj91 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj91, ptr %scenario2_passed.addr, align 8
  call void @py_incref(ptr %bool_obj91)
  %else_executed_s2_val = load ptr, ptr %else_executed_s2.addr, align 8
  %condval93 = call i1 @py_object_to_bool(ptr %else_executed_s2_val)
  br i1 %condval93, label %then94, label %else95

for.stop_iteration64:                             ; preds = %for.header61
  call void @py_decref(ptr %iterator57)
  br label %for.else65

for.else65:                                       ; preds = %for.stop_iteration64
  %bool_obj81 = call ptr @py_create_bool(i1 true)
  %else_executed_s2_old = load ptr, ptr %else_executed_s2.addr, align 8
  call void @py_decref(ptr %else_executed_s2_old)
  store ptr %bool_obj81, ptr %else_executed_s2.addr, align 8
  call void @py_incref(ptr %bool_obj81)
  %else_executed_s2_scope_end_load = load ptr, ptr %else_executed_s2.addr, align 8
  call void @py_decref(ptr %else_executed_s2_scope_end_load)
  br label %for.end63

ifcont69:                                         ; preds = %else75
  %processed_items_s2_val = load ptr, ptr %processed_items_s2.addr, align 8
  %x_val76 = load ptr, ptr %x.addr, align 8
  %list_obj77 = call ptr @py_create_list(i32 1, i32 7)
  %16 = call ptr @py_list_append(ptr %list_obj77, ptr %x_val76)
  %binop_result78 = call ptr @py_object_add(ptr %processed_items_s2_val, ptr %list_obj77), !py.type !3
  %processed_items_s2_old = load ptr, ptr %processed_items_s2.addr, align 8
  call void @py_decref(ptr %processed_items_s2_old)
  store ptr %binop_result78, ptr %processed_items_s2.addr, align 8
  call void @py_incref(ptr %binop_result78)
  %processed_items_s2_count_val = load ptr, ptr %processed_items_s2_count.addr, align 8
  %int_obj_from_str79 = call ptr @py_create_int_bystring(ptr @int_str_const.111, i32 10)
  %binop_result80 = call ptr @py_object_add(ptr %processed_items_s2_count_val, ptr %int_obj_from_str79), !py.type !0
  %processed_items_s2_count_old = load ptr, ptr %processed_items_s2_count.addr, align 8
  call void @py_decref(ptr %processed_items_s2_count_old)
  store ptr %binop_result80, ptr %processed_items_s2_count.addr, align 8
  call void @py_incref(ptr %binop_result80)
  %processed_items_s2_scope_end_load = load ptr, ptr %processed_items_s2.addr, align 8
  call void @py_decref(ptr %processed_items_s2_scope_end_load)
  %processed_items_s2_count_scope_end_load = load ptr, ptr %processed_items_s2_count.addr, align 8
  call void @py_decref(ptr %processed_items_s2_count_scope_end_load)
  br label %for.header61

then74:                                           ; preds = %for.body62
  br label %for.header61

else75:                                           ; preds = %for.body62
  br label %ifcont69

ifcont92:                                         ; preds = %else95, %ifcont96
  %bool_obj125 = call ptr @py_create_bool(i1 false)
  store ptr %bool_obj125, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj125)
  %scenario1_passed_val = load ptr, ptr %scenario1_passed.addr, align 8
  %condval127 = call i1 @py_object_to_bool(ptr %scenario1_passed_val)
  br i1 %condval127, label %then128, label %else129

then94:                                           ; preds = %for.end63
  %processed_items_s2_count_val97 = load ptr, ptr %processed_items_s2_count.addr, align 8
  %expected_scenario2_count_val = load ptr, ptr %expected_scenario2_count.addr, align 8
  %cmp_result98 = call ptr @py_object_compare(ptr %processed_items_s2_count_val97, ptr %expected_scenario2_count_val, i32 0), !py.type !1
  %condval99 = call i1 @py_object_to_bool(ptr %cmp_result98)
  br i1 %condval99, label %then100, label %else101

else95:                                           ; preds = %for.end63
  br label %ifcont92

ifcont96:                                         ; preds = %else101, %ifcont120
  br label %ifcont92

then100:                                          ; preds = %then94
  %bool_obj102 = call ptr @py_create_bool(i1 true)
  store ptr %bool_obj102, ptr %items_match.addr, align 8
  call void @py_incref(ptr %bool_obj102)
  %int_obj_from_str103 = call ptr @py_create_int_bystring(ptr @int_str_const.120, i32 10)
  store ptr %int_obj_from_str103, ptr %idx.addr, align 8
  call void @py_incref(ptr %int_obj_from_str103)
  %idx_init = load ptr, ptr %idx.addr, align 8
  %items_match_init = load ptr, ptr %items_match.addr, align 8
  br label %while.cond

else101:                                          ; preds = %then94
  br label %ifcont96

while.cond:                                       ; preds = %while.latch, %then100
  %idx.phi = phi ptr [ %idx_init, %then100 ], [ %idx_latch_val, %while.latch ]
  %items_match.phi = phi ptr [ %items_match_init, %then100 ], [ %items_match_latch_val, %while.latch ]
  %expected_scenario2_count_val104 = load ptr, ptr %expected_scenario2_count.addr, align 8
  %cmp_result105 = call ptr @py_object_compare(ptr %idx.phi, ptr %expected_scenario2_count_val104, i32 2), !py.type !1
  %condval106 = call i1 @py_object_to_bool(ptr %cmp_result105)
  br i1 %condval106, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %processed_items_s2_val108 = load ptr, ptr %processed_items_s2.addr, align 8
  %idx_val = load ptr, ptr %idx.addr, align 8
  %list_item109 = call ptr @py_list_get_item(ptr %processed_items_s2_val108, ptr %idx_val)
  %expected_scenario2_items_val = load ptr, ptr %expected_scenario2_items.addr, align 8
  %idx_val110 = load ptr, ptr %idx.addr, align 8
  %list_item111 = call ptr @py_list_get_item(ptr %expected_scenario2_items_val, ptr %idx_val110)
  %any_cmp_result112 = call ptr @py_object_compare(ptr %list_item109, ptr %list_item111, i32 1), !py.type !1
  %condval113 = call i1 @py_object_to_bool(ptr %any_cmp_result112)
  br i1 %condval113, label %then114, label %else115

while.latch:                                      ; preds = %ifcont107
  %idx_latch_val = load ptr, ptr %idx.addr, align 8
  %items_match_latch_val = load ptr, ptr %items_match.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %then114, %while.cond
  %items_match_val = load ptr, ptr %items_match.addr, align 8
  %condval121 = call i1 @py_object_to_bool(ptr %items_match_val)
  br i1 %condval121, label %then122, label %else123

ifcont107:                                        ; preds = %else115
  %idx_val117 = load ptr, ptr %idx.addr, align 8
  %int_obj_from_str118 = call ptr @py_create_int_bystring(ptr @int_str_const.121, i32 10)
  %binop_result119 = call ptr @py_object_add(ptr %idx_val117, ptr %int_obj_from_str118), !py.type !0
  %idx_old = load ptr, ptr %idx.addr, align 8
  call void @py_decref(ptr %idx_old)
  store ptr %binop_result119, ptr %idx.addr, align 8
  call void @py_incref(ptr %binop_result119)
  br label %while.latch

then114:                                          ; preds = %while.body
  %bool_obj116 = call ptr @py_create_bool(i1 false)
  %items_match_old = load ptr, ptr %items_match.addr, align 8
  call void @py_decref(ptr %items_match_old)
  store ptr %bool_obj116, ptr %items_match.addr, align 8
  call void @py_incref(ptr %bool_obj116)
  br label %while.end

else115:                                          ; preds = %while.body
  br label %ifcont107

ifcont120:                                        ; preds = %else123, %then122
  br label %ifcont96

then122:                                          ; preds = %while.end
  %bool_obj124 = call ptr @py_create_bool(i1 true)
  %scenario2_passed_old = load ptr, ptr %scenario2_passed.addr, align 8
  call void @py_decref(ptr %scenario2_passed_old)
  store ptr %bool_obj124, ptr %scenario2_passed.addr, align 8
  call void @py_incref(ptr %bool_obj124)
  br label %ifcont120

else123:                                          ; preds = %while.end
  br label %ifcont120

ifcont126:                                        ; preds = %else129, %ifcont130
  %print_test_result_callable_loaded = load ptr, ptr @print_test_result_obj_gv, align 8
  %test_name_val = load ptr, ptr %test_name.addr, align 8
  %passed_val = load ptr, ptr %passed.addr, align 8
  call void @py_incref(ptr %test_name_val)
  call void @py_incref(ptr %passed_val)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %test_name_val, ptr %arg_ptr_0, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array, i32 1
  store ptr %passed_val, ptr %arg_ptr_1, align 8
  %call_result = call ptr @py_call_function(ptr %print_test_result_callable_loaded, i32 2, ptr %callargs_array)
  %passed_val135 = load ptr, ptr %passed.addr, align 8
  ret ptr %passed_val135

then128:                                          ; preds = %ifcont92
  %scenario2_passed_val = load ptr, ptr %scenario2_passed.addr, align 8
  %condval131 = call i1 @py_object_to_bool(ptr %scenario2_passed_val)
  br i1 %condval131, label %then132, label %else133

else129:                                          ; preds = %ifcont92
  br label %ifcont126

ifcont130:                                        ; preds = %else133, %then132
  br label %ifcont126

then132:                                          ; preds = %then128
  %bool_obj134 = call ptr @py_create_bool(i1 true)
  %passed_old = load ptr, ptr %passed.addr, align 8
  call void @py_decref(ptr %passed_old)
  store ptr %bool_obj134, ptr %passed.addr, align 8
  call void @py_incref(ptr %bool_obj134)
  br label %ifcont130

else133:                                          ; preds = %then128
  br label %ifcont130
}
 ('test_for_else_complex_break_continue.L318.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'test_for_else_complex_break_continue'...
Debug [CodeGenType]: Resolved static FunctionType for 'test_for_else_complex_break_continue' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'test_for_else_complex_break_continue'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'test_for_else_complex_break_continue.L318.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'test_for_else_complex_break_continue'. Value:   %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'test_for_else_complex_break_continue' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @test_for_else_complex_break_continue_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @test_for_else_complex_break_continue_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'test_for_else_complex_break_continue' to storage: @test_for_else_complex_break_continue_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'test_for_else_complex_break_continue'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'test_for_else_complex_break_continue'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 26 at line 393 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'main'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'main' in current symbol table scope.
Debug [PyScope]: Defined FunctionAST 'main' in this scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'main'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'main'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'main.L393.C36' for Python name 'main'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'main'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'main.L393.C36'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: main.L393.C36 with name 'main.L393.C36'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94651568337296 -> LLVM Func main.L393.C36
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'main.L393.C36'...
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: main.L393.C36
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 320
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 320
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 321
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 327
[HdlCallExpr] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'test_for_else_normal_completion'
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 328
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 329
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 331
[HdlCallExpr] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'test_for_else_with_break'
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 332
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 333
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 335
[HdlCallExpr] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'test_for_else_with_continue'
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 336
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 337
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 339
[HdlCallExpr] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'test_for_else_with_return_in_body'
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 340
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 341
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 343
[HdlCallExpr] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'test_for_else_with_return_in_else'
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 344
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 345
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 347
[HdlCallExpr] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'test_for_else_empty_iterable'
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 348
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 349
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 351
[HdlCallExpr] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'test_nested_for_else_break'
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 352
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 353
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 355
[HdlCallExpr] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'test_nested_for_else_continue'
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 356
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 357
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 359
[HdlCallExpr] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'test_for_else_complex_break_continue'
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 360
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 361
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 364
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 364
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 8 at line 365
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 366
DEBUG: Entering handleWhileStmt
DEBUG:   Source Line: 366
DEBUG:   [1] Created Basic Blocks:
DEBUG:       Preheader: entry
DEBUG:       Condition: while.cond
DEBUG:       Body:      while.body
DEBUG:       Latch:     while.latch
DEBUG:       End:       while.end
DEBUG:       Continue Target: while.latch
DEBUG:       Break Target:    while.end
DEBUG:   Pushed loop targets onto stacks.
DEBUG:   [2] Variables assigned in body or else:
DEBUG:       - idx
DEBUG:       - passed_count
DEBUG:   [3] Created branch from Preheader (entry) to Condition (while.cond)
DEBUG:   [4] Set insert point to Condition block (while.cond)
DEBUG:   [5] Creating PHI nodes:
DEBUG:       Processing variable: 'idx'
DEBUG:         Storage (from preheader scope):   %idx.addr = alloca ptr, align 8
DEBUG:         Initial Value (loaded in preheader):   %idx_init = load ptr, ptr %idx.addr, align 8
DEBUG:         Initial Type: int
DEBUG:         LLVM Type for PHI: ptr
DEBUG:         Created PHI node:   %idx.phi = phi ptr 
DEBUG:         Added incoming edge to PHI: [  %idx_init = load ptr, ptr %idx.addr, align 8, from entry]
DEBUG:       Processing variable: 'passed_count'
DEBUG:         Storage (from preheader scope):   %passed_count.addr = alloca ptr, align 8
DEBUG:         Initial Value (loaded in preheader):   %passed_count_init = load ptr, ptr %passed_count.addr, align 8
DEBUG:         Initial Type: int
DEBUG:         LLVM Type for PHI: ptr
DEBUG:         Created PHI node:   %passed_count.phi = phi ptr 
DEBUG:         Added incoming edge to PHI: [  %passed_count_init = load ptr, ptr %passed_count.addr, align 8, from entry]
DEBUG:       Temporarily updating symtable for 'idx' to PHI for condition generation.
DEBUG:       Temporarily updating symtable for 'passed_count' to PHI for condition generation.
DEBUG:   [6] Generating condition code (using PHI values)...
DEBUG:       Restoring symtable for 'idx' back to storage ptr (  %idx.addr = alloca ptr, align 8) after condition generation.
DEBUG:       Restoring symtable for 'passed_count' back to storage ptr (  %passed_count.addr = alloca ptr, align 8) after condition generation.
DEBUG:       Generated condition value:   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:   [7] Created conditional branch from while.cond based on   %condval = call i1 @py_object_to_bool(ptr %any_cmp_result):
DEBUG:       True -> Body (while.body)
DEBUG:       False -> while.end (End Block)
DEBUG:   [8] Set insert point to Body block (while.body)
DEBUG:       Processing loop body statements using handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: while.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval95 = call i1 @py_object_to_bool(ptr %index_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from while.body on   %condval95 = call i1 @py_object_to_bool(ptr %index_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:       Finished processing loop body statements via handleBlock. Current block: ifcont
DEBUG:   [9] Checking if loop body terminated naturally.
DEBUG:       Body End Block: ifcont
DEBUG:       Body Terminated: No
DEBUG:       Created branch from Body End (ifcont) to Latch (while.latch)
DEBUG:   [10] Set insert point to Latch block (while.latch)
DEBUG:         Getting final value for PHI 'idx' by loading from storage (  %idx.addr = alloca ptr, align 8) in latch block (while.latch):   %idx_latch_val = load ptr, ptr %idx.addr, align 8
DEBUG:         Getting final value for PHI 'passed_count' by loading from storage (  %passed_count.addr = alloca ptr, align 8) in latch block (while.latch):   %passed_count_latch_val = load ptr, ptr %passed_count.addr, align 8
DEBUG:       Cleaning up temporary objects for this iteration (in latch)...
DEBUG:       Created back edge branch from Latch (while.latch) to Condition (while.cond)
DEBUG:   [11] Adding second incoming edges to PHI nodes (from latch while.latch):
DEBUG:         Adding incoming edge to PHI 'idx' (  %idx.phi = phi ptr [ %idx_init, %entry ]): [  %idx_latch_val = load ptr, ptr %idx.addr, align 8, from while.latch]
DEBUG:         Adding incoming edge to PHI 'passed_count' (  %passed_count.phi = phi ptr [ %passed_count_init, %entry ]): [  %passed_count_latch_val = load ptr, ptr %passed_count.addr, align 8, from while.latch]
DEBUG:   [12] Set insert point to End block (while.end)
DEBUG:   Popped loop targets from stacks (normal exit).
DEBUG: Exiting handleWhileStmt
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 8 at line 371
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 8 at line 372
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 7 at line 376
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 7 at line 377
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 7 at line 378
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 7 at line 379
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 7 at line 382
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 2 at line 382
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont109
DEBUG:    [Pre] Original Insert BB: while.end, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont109
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval112 = call i1 @py_object_to_bool(ptr %any_cmp_result111)
DEBUG:    [2] Created blocks: thenBB=then113, elseEntryBB=else114
DEBUG:    [3] Creating CondBr from while.end on   %condval112 = call i1 @py_object_to_bool(ptr %any_cmp_result111) ? then113 : else114
DEBUG:    [4] Handling 'then' branch (Block: then113)
DEBUG:        Set insert point to: then113
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then113
DEBUG:        'then' block (then113) already terminated.
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else114)
DEBUG:        Set insert point to: else114
DEBUG:        Else statement exists (not null). Kind: 13
DEBUG:        Else statement is NOT IfStmtAST. Treating as final 'else' block.
DEBUG:            Else statement is BlockStmtAST. Calling handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for else block. Current block: else114
DEBUG:        Final 'else' block (else114) already terminated.
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else114
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont109)
DEBUG:        Has Uses: No
DEBUG:        Has Predecessors: No
DEBUG:        finalMergeBB is unreachable, but original block was not terminated. Erasing finalMergeBB.
DEBUG:        WARNING: Builder insert point might be invalid now.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: else114
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: else114, CurIP: {Block: else114, Point: end} - Finished handling body stmts. Popping scope...
Debug [PySymbolTable]: Skipping cleanups for scope level 3 (block terminated or invalid).
Debug [PySymbolTable]: Popping scope level 3
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: else114, CurIP: {Block: else114, Point: end} - Checking for default return for 'main.L393.C36'. Last block: else114
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: else114, CurIP: {Block: else114, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: else114, CurIP: {Block: else114, Point: end} - Cleaning up function resources for 'main.L393.C36'...
[HdlFuncDef] CurFunc: main.L393.C36, CurBlock: else114, CurIP: {Block: else114, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'main.L393.C36'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'main.L393.C36'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'main' (LLVM: main.L393.C36)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'main'. Got LLVM Func: define internal ptr @main.L393.C36() {
entry:
  %failed_count.addr = alloca ptr, align 8
  %total_tests.addr = alloca ptr, align 8
  %idx.addr = alloca ptr, align 8
  %passed_count.addr = alloca ptr, align 8
  %current_result.addr = alloca ptr, align 8
  %results_count.addr = alloca ptr, align 8
  %results.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.122)
  call void @py_print_object(ptr %str_obj)
  %list_obj = call ptr @py_create_list(i32 0, i32 7)
  store ptr %list_obj, ptr %results.addr, align 8
  call void @py_incref(ptr %list_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.123, i32 10)
  store ptr %int_obj_from_str, ptr %results_count.addr, align 8
  call void @py_incref(ptr %int_obj_from_str)
  %test_for_else_normal_completion_callable_loaded = load ptr, ptr @test_for_else_normal_completion_obj_gv, align 8
  %call_result = call ptr @py_call_function(ptr %test_for_else_normal_completion_callable_loaded, i32 0, ptr null)
  store ptr %call_result, ptr %current_result.addr, align 8
  call void @py_incref(ptr %call_result)
  %results_val = load ptr, ptr %results.addr, align 8
  %current_result_val = load ptr, ptr %current_result.addr, align 8
  %list_obj1 = call ptr @py_create_list(i32 1, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj1, ptr %current_result_val)
  %binop_result = call ptr @py_object_add(ptr %results_val, ptr %list_obj1), !py.type !3
  %results_old = load ptr, ptr %results.addr, align 8
  call void @py_decref(ptr %results_old)
  store ptr %binop_result, ptr %results.addr, align 8
  call void @py_incref(ptr %binop_result)
  %results_count_val = load ptr, ptr %results_count.addr, align 8
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.124, i32 10)
  %binop_result3 = call ptr @py_object_add(ptr %results_count_val, ptr %int_obj_from_str2), !py.type !0
  %results_count_old = load ptr, ptr %results_count.addr, align 8
  call void @py_decref(ptr %results_count_old)
  store ptr %binop_result3, ptr %results_count.addr, align 8
  call void @py_incref(ptr %binop_result3)
  %test_for_else_with_break_callable_loaded = load ptr, ptr @test_for_else_with_break_obj_gv, align 8
  %call_result4 = call ptr @py_call_function(ptr %test_for_else_with_break_callable_loaded, i32 0, ptr null)
  %current_result_old = load ptr, ptr %current_result.addr, align 8
  call void @py_decref(ptr %current_result_old)
  store ptr %call_result4, ptr %current_result.addr, align 8
  call void @py_incref(ptr %call_result4)
  %results_val5 = load ptr, ptr %results.addr, align 8
  %current_result_val6 = load ptr, ptr %current_result.addr, align 8
  %list_obj7 = call ptr @py_create_list(i32 1, i32 7)
  %1 = call ptr @py_list_append(ptr %list_obj7, ptr %current_result_val6)
  %any_op_result = call ptr @py_object_add(ptr %results_val5, ptr %list_obj7), !py.type !2
  %results_old8 = load ptr, ptr %results.addr, align 8
  call void @py_decref(ptr %results_old8)
  store ptr %any_op_result, ptr %results.addr, align 8
  call void @py_incref(ptr %any_op_result)
  %results_count_val9 = load ptr, ptr %results_count.addr, align 8
  %int_obj_from_str10 = call ptr @py_create_int_bystring(ptr @int_str_const.125, i32 10)
  %any_op_result11 = call ptr @py_object_add(ptr %results_count_val9, ptr %int_obj_from_str10), !py.type !2
  %results_count_old12 = load ptr, ptr %results_count.addr, align 8
  call void @py_decref(ptr %results_count_old12)
  store ptr %any_op_result11, ptr %results_count.addr, align 8
  call void @py_incref(ptr %any_op_result11)
  %test_for_else_with_continue_callable_loaded = load ptr, ptr @test_for_else_with_continue_obj_gv, align 8
  %call_result13 = call ptr @py_call_function(ptr %test_for_else_with_continue_callable_loaded, i32 0, ptr null)
  %current_result_old14 = load ptr, ptr %current_result.addr, align 8
  call void @py_decref(ptr %current_result_old14)
  store ptr %call_result13, ptr %current_result.addr, align 8
  call void @py_incref(ptr %call_result13)
  %results_val15 = load ptr, ptr %results.addr, align 8
  %current_result_val16 = load ptr, ptr %current_result.addr, align 8
  %list_obj17 = call ptr @py_create_list(i32 1, i32 7)
  %2 = call ptr @py_list_append(ptr %list_obj17, ptr %current_result_val16)
  %any_op_result18 = call ptr @py_object_add(ptr %results_val15, ptr %list_obj17), !py.type !2
  %results_old19 = load ptr, ptr %results.addr, align 8
  call void @py_decref(ptr %results_old19)
  store ptr %any_op_result18, ptr %results.addr, align 8
  call void @py_incref(ptr %any_op_result18)
  %results_count_val20 = load ptr, ptr %results_count.addr, align 8
  %int_obj_from_str21 = call ptr @py_create_int_bystring(ptr @int_str_const.126, i32 10)
  %any_op_result22 = call ptr @py_object_add(ptr %results_count_val20, ptr %int_obj_from_str21), !py.type !2
  %results_count_old23 = load ptr, ptr %results_count.addr, align 8
  call void @py_decref(ptr %results_count_old23)
  store ptr %any_op_result22, ptr %results_count.addr, align 8
  call void @py_incref(ptr %any_op_result22)
  %test_for_else_with_return_in_body_callable_loaded = load ptr, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %call_result24 = call ptr @py_call_function(ptr %test_for_else_with_return_in_body_callable_loaded, i32 0, ptr null)
  %current_result_old25 = load ptr, ptr %current_result.addr, align 8
  call void @py_decref(ptr %current_result_old25)
  store ptr %call_result24, ptr %current_result.addr, align 8
  call void @py_incref(ptr %call_result24)
  %results_val26 = load ptr, ptr %results.addr, align 8
  %current_result_val27 = load ptr, ptr %current_result.addr, align 8
  %list_obj28 = call ptr @py_create_list(i32 1, i32 7)
  %3 = call ptr @py_list_append(ptr %list_obj28, ptr %current_result_val27)
  %any_op_result29 = call ptr @py_object_add(ptr %results_val26, ptr %list_obj28), !py.type !2
  %results_old30 = load ptr, ptr %results.addr, align 8
  call void @py_decref(ptr %results_old30)
  store ptr %any_op_result29, ptr %results.addr, align 8
  call void @py_incref(ptr %any_op_result29)
  %results_count_val31 = load ptr, ptr %results_count.addr, align 8
  %int_obj_from_str32 = call ptr @py_create_int_bystring(ptr @int_str_const.127, i32 10)
  %any_op_result33 = call ptr @py_object_add(ptr %results_count_val31, ptr %int_obj_from_str32), !py.type !2
  %results_count_old34 = load ptr, ptr %results_count.addr, align 8
  call void @py_decref(ptr %results_count_old34)
  store ptr %any_op_result33, ptr %results_count.addr, align 8
  call void @py_incref(ptr %any_op_result33)
  %test_for_else_with_return_in_else_callable_loaded = load ptr, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %call_result35 = call ptr @py_call_function(ptr %test_for_else_with_return_in_else_callable_loaded, i32 0, ptr null)
  %current_result_old36 = load ptr, ptr %current_result.addr, align 8
  call void @py_decref(ptr %current_result_old36)
  store ptr %call_result35, ptr %current_result.addr, align 8
  call void @py_incref(ptr %call_result35)
  %results_val37 = load ptr, ptr %results.addr, align 8
  %current_result_val38 = load ptr, ptr %current_result.addr, align 8
  %list_obj39 = call ptr @py_create_list(i32 1, i32 7)
  %4 = call ptr @py_list_append(ptr %list_obj39, ptr %current_result_val38)
  %any_op_result40 = call ptr @py_object_add(ptr %results_val37, ptr %list_obj39), !py.type !2
  %results_old41 = load ptr, ptr %results.addr, align 8
  call void @py_decref(ptr %results_old41)
  store ptr %any_op_result40, ptr %results.addr, align 8
  call void @py_incref(ptr %any_op_result40)
  %results_count_val42 = load ptr, ptr %results_count.addr, align 8
  %int_obj_from_str43 = call ptr @py_create_int_bystring(ptr @int_str_const.128, i32 10)
  %any_op_result44 = call ptr @py_object_add(ptr %results_count_val42, ptr %int_obj_from_str43), !py.type !2
  %results_count_old45 = load ptr, ptr %results_count.addr, align 8
  call void @py_decref(ptr %results_count_old45)
  store ptr %any_op_result44, ptr %results_count.addr, align 8
  call void @py_incref(ptr %any_op_result44)
  %test_for_else_empty_iterable_callable_loaded = load ptr, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %call_result46 = call ptr @py_call_function(ptr %test_for_else_empty_iterable_callable_loaded, i32 0, ptr null)
  %current_result_old47 = load ptr, ptr %current_result.addr, align 8
  call void @py_decref(ptr %current_result_old47)
  store ptr %call_result46, ptr %current_result.addr, align 8
  call void @py_incref(ptr %call_result46)
  %results_val48 = load ptr, ptr %results.addr, align 8
  %current_result_val49 = load ptr, ptr %current_result.addr, align 8
  %list_obj50 = call ptr @py_create_list(i32 1, i32 7)
  %5 = call ptr @py_list_append(ptr %list_obj50, ptr %current_result_val49)
  %any_op_result51 = call ptr @py_object_add(ptr %results_val48, ptr %list_obj50), !py.type !2
  %results_old52 = load ptr, ptr %results.addr, align 8
  call void @py_decref(ptr %results_old52)
  store ptr %any_op_result51, ptr %results.addr, align 8
  call void @py_incref(ptr %any_op_result51)
  %results_count_val53 = load ptr, ptr %results_count.addr, align 8
  %int_obj_from_str54 = call ptr @py_create_int_bystring(ptr @int_str_const.129, i32 10)
  %any_op_result55 = call ptr @py_object_add(ptr %results_count_val53, ptr %int_obj_from_str54), !py.type !2
  %results_count_old56 = load ptr, ptr %results_count.addr, align 8
  call void @py_decref(ptr %results_count_old56)
  store ptr %any_op_result55, ptr %results_count.addr, align 8
  call void @py_incref(ptr %any_op_result55)
  %test_nested_for_else_break_callable_loaded = load ptr, ptr @test_nested_for_else_break_obj_gv, align 8
  %call_result57 = call ptr @py_call_function(ptr %test_nested_for_else_break_callable_loaded, i32 0, ptr null)
  %current_result_old58 = load ptr, ptr %current_result.addr, align 8
  call void @py_decref(ptr %current_result_old58)
  store ptr %call_result57, ptr %current_result.addr, align 8
  call void @py_incref(ptr %call_result57)
  %results_val59 = load ptr, ptr %results.addr, align 8
  %current_result_val60 = load ptr, ptr %current_result.addr, align 8
  %list_obj61 = call ptr @py_create_list(i32 1, i32 7)
  %6 = call ptr @py_list_append(ptr %list_obj61, ptr %current_result_val60)
  %any_op_result62 = call ptr @py_object_add(ptr %results_val59, ptr %list_obj61), !py.type !2
  %results_old63 = load ptr, ptr %results.addr, align 8
  call void @py_decref(ptr %results_old63)
  store ptr %any_op_result62, ptr %results.addr, align 8
  call void @py_incref(ptr %any_op_result62)
  %results_count_val64 = load ptr, ptr %results_count.addr, align 8
  %int_obj_from_str65 = call ptr @py_create_int_bystring(ptr @int_str_const.130, i32 10)
  %any_op_result66 = call ptr @py_object_add(ptr %results_count_val64, ptr %int_obj_from_str65), !py.type !2
  %results_count_old67 = load ptr, ptr %results_count.addr, align 8
  call void @py_decref(ptr %results_count_old67)
  store ptr %any_op_result66, ptr %results_count.addr, align 8
  call void @py_incref(ptr %any_op_result66)
  %test_nested_for_else_continue_callable_loaded = load ptr, ptr @test_nested_for_else_continue_obj_gv, align 8
  %call_result68 = call ptr @py_call_function(ptr %test_nested_for_else_continue_callable_loaded, i32 0, ptr null)
  %current_result_old69 = load ptr, ptr %current_result.addr, align 8
  call void @py_decref(ptr %current_result_old69)
  store ptr %call_result68, ptr %current_result.addr, align 8
  call void @py_incref(ptr %call_result68)
  %results_val70 = load ptr, ptr %results.addr, align 8
  %current_result_val71 = load ptr, ptr %current_result.addr, align 8
  %list_obj72 = call ptr @py_create_list(i32 1, i32 7)
  %7 = call ptr @py_list_append(ptr %list_obj72, ptr %current_result_val71)
  %any_op_result73 = call ptr @py_object_add(ptr %results_val70, ptr %list_obj72), !py.type !2
  %results_old74 = load ptr, ptr %results.addr, align 8
  call void @py_decref(ptr %results_old74)
  store ptr %any_op_result73, ptr %results.addr, align 8
  call void @py_incref(ptr %any_op_result73)
  %results_count_val75 = load ptr, ptr %results_count.addr, align 8
  %int_obj_from_str76 = call ptr @py_create_int_bystring(ptr @int_str_const.131, i32 10)
  %any_op_result77 = call ptr @py_object_add(ptr %results_count_val75, ptr %int_obj_from_str76), !py.type !2
  %results_count_old78 = load ptr, ptr %results_count.addr, align 8
  call void @py_decref(ptr %results_count_old78)
  store ptr %any_op_result77, ptr %results_count.addr, align 8
  call void @py_incref(ptr %any_op_result77)
  %test_for_else_complex_break_continue_callable_loaded = load ptr, ptr @test_for_else_complex_break_continue_obj_gv, align 8
  %call_result79 = call ptr @py_call_function(ptr %test_for_else_complex_break_continue_callable_loaded, i32 0, ptr null)
  %current_result_old80 = load ptr, ptr %current_result.addr, align 8
  call void @py_decref(ptr %current_result_old80)
  store ptr %call_result79, ptr %current_result.addr, align 8
  call void @py_incref(ptr %call_result79)
  %results_val81 = load ptr, ptr %results.addr, align 8
  %current_result_val82 = load ptr, ptr %current_result.addr, align 8
  %list_obj83 = call ptr @py_create_list(i32 1, i32 7)
  %8 = call ptr @py_list_append(ptr %list_obj83, ptr %current_result_val82)
  %any_op_result84 = call ptr @py_object_add(ptr %results_val81, ptr %list_obj83), !py.type !2
  %results_old85 = load ptr, ptr %results.addr, align 8
  call void @py_decref(ptr %results_old85)
  store ptr %any_op_result84, ptr %results.addr, align 8
  call void @py_incref(ptr %any_op_result84)
  %results_count_val86 = load ptr, ptr %results_count.addr, align 8
  %int_obj_from_str87 = call ptr @py_create_int_bystring(ptr @int_str_const.132, i32 10)
  %any_op_result88 = call ptr @py_object_add(ptr %results_count_val86, ptr %int_obj_from_str87), !py.type !2
  %results_count_old89 = load ptr, ptr %results_count.addr, align 8
  call void @py_decref(ptr %results_count_old89)
  store ptr %any_op_result88, ptr %results_count.addr, align 8
  call void @py_incref(ptr %any_op_result88)
  %str_obj90 = call ptr @py_create_string(ptr @str_const.133)
  call void @py_print_object(ptr %str_obj90)
  %int_obj_from_str91 = call ptr @py_create_int_bystring(ptr @int_str_const.134, i32 10)
  store ptr %int_obj_from_str91, ptr %passed_count.addr, align 8
  call void @py_incref(ptr %int_obj_from_str91)
  %int_obj_from_str92 = call ptr @py_create_int_bystring(ptr @int_str_const.135, i32 10)
  store ptr %int_obj_from_str92, ptr %idx.addr, align 8
  call void @py_incref(ptr %int_obj_from_str92)
  %idx_init = load ptr, ptr %idx.addr, align 8
  %passed_count_init = load ptr, ptr %passed_count.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.latch, %entry
  %idx.phi = phi ptr [ %idx_init, %entry ], [ %idx_latch_val, %while.latch ]
  %passed_count.phi = phi ptr [ %passed_count_init, %entry ], [ %passed_count_latch_val, %while.latch ]
  %results_count_val93 = load ptr, ptr %results_count.addr, align 8
  %any_cmp_result = call ptr @py_object_compare(ptr %idx.phi, ptr %results_count_val93, i32 2), !py.type !1
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %results_val94 = load ptr, ptr %results.addr, align 8
  %idx_val = load ptr, ptr %idx.addr, align 8
  %index_result = call ptr @py_object_index(ptr %results_val94, ptr %idx_val)
  %condval95 = call i1 @py_object_to_bool(ptr %index_result)
  br i1 %condval95, label %then, label %else

while.latch:                                      ; preds = %ifcont
  %idx_latch_val = load ptr, ptr %idx.addr, align 8
  %passed_count_latch_val = load ptr, ptr %passed_count.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %results_count_val101 = load ptr, ptr %results_count.addr, align 8
  store ptr %results_count_val101, ptr %total_tests.addr, align 8
  call void @py_incref(ptr %results_count_val101)
  %total_tests_val = load ptr, ptr %total_tests.addr, align 8
  %passed_count_val102 = load ptr, ptr %passed_count.addr, align 8
  %any_op_result103 = call ptr @py_object_subtract(ptr %total_tests_val, ptr %passed_count_val102), !py.type !2
  store ptr %any_op_result103, ptr %failed_count.addr, align 8
  call void @py_incref(ptr %any_op_result103)
  %str_obj104 = call ptr @py_create_string(ptr @str_const.138)
  call void @py_print_object(ptr %str_obj104)
  %passed_count_val105 = load ptr, ptr %passed_count.addr, align 8
  call void @py_print_object(ptr %passed_count_val105)
  %str_obj106 = call ptr @py_create_string(ptr @str_const.139)
  call void @py_print_object(ptr %str_obj106)
  %total_tests_val107 = load ptr, ptr %total_tests.addr, align 8
  call void @py_print_object(ptr %total_tests_val107)
  %str_obj108 = call ptr @py_create_string(ptr @str_const.140)
  call void @py_print_object(ptr %str_obj108)
  %failed_count_val = load ptr, ptr %failed_count.addr, align 8
  %int_obj_from_str110 = call ptr @py_create_int_bystring(ptr @int_str_const.141, i32 10)
  %any_cmp_result111 = call ptr @py_object_compare(ptr %failed_count_val, ptr %int_obj_from_str110, i32 4), !py.type !1
  %condval112 = call i1 @py_object_to_bool(ptr %any_cmp_result111)
  br i1 %condval112, label %then113, label %else114

ifcont:                                           ; preds = %else, %then
  %idx_val98 = load ptr, ptr %idx.addr, align 8
  %int_obj_from_str99 = call ptr @py_create_int_bystring(ptr @int_str_const.137, i32 10)
  %binop_result100 = call ptr @py_object_add(ptr %idx_val98, ptr %int_obj_from_str99), !py.type !0
  %idx_old = load ptr, ptr %idx.addr, align 8
  call void @py_decref(ptr %idx_old)
  store ptr %binop_result100, ptr %idx.addr, align 8
  call void @py_incref(ptr %binop_result100)
  br label %while.latch

then:                                             ; preds = %while.body
  %passed_count_val = load ptr, ptr %passed_count.addr, align 8
  %int_obj_from_str96 = call ptr @py_create_int_bystring(ptr @int_str_const.136, i32 10)
  %binop_result97 = call ptr @py_object_add(ptr %passed_count_val, ptr %int_obj_from_str96), !py.type !0
  %passed_count_old = load ptr, ptr %passed_count.addr, align 8
  call void @py_decref(ptr %passed_count_old)
  store ptr %binop_result97, ptr %passed_count.addr, align 8
  call void @py_incref(ptr %binop_result97)
  br label %ifcont

else:                                             ; preds = %while.body
  br label %ifcont

then113:                                          ; preds = %while.end
  %str_obj115 = call ptr @py_create_string(ptr @str_const.142)
  call void @py_print_object(ptr %str_obj115)
  %failed_count_val116 = load ptr, ptr %failed_count.addr, align 8
  call void @py_print_object(ptr %failed_count_val116)
  %str_obj117 = call ptr @py_create_string(ptr @str_const.143)
  call void @py_print_object(ptr %str_obj117)
  %total_tests_val118 = load ptr, ptr %total_tests.addr, align 8
  call void @py_print_object(ptr %total_tests_val118)
  %str_obj119 = call ptr @py_create_string(ptr @str_const.144)
  call void @py_print_object(ptr %str_obj119)
  %str_obj120 = call ptr @py_create_string(ptr @str_const.145)
  call void @py_print_object(ptr %str_obj120)
  %int_obj_from_str121 = call ptr @py_create_int_bystring(ptr @int_str_const.146, i32 10)
  ret ptr %int_obj_from_str121

else114:                                          ; preds = %while.end
  %str_obj122 = call ptr @py_create_string(ptr @str_const.147)
  call void @py_print_object(ptr %str_obj122)
  %int_obj_from_str123 = call ptr @py_create_int_bystring(ptr @int_str_const.148, i32 10)
  ret ptr %int_obj_from_str123
}
 ('main.L393.C36')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'main'...
Debug [CodeGenType]: Resolved static FunctionType for 'main' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'main'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'main.L393.C36'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @main.L393.C36, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'main'. Value:   %new_py_func_obj12 = call ptr @py_create_function(ptr @main.L393.C36, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @main.L393.C36, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'main' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @main.L393.C36, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @main_obj_gv = internal global ptr null in Module@ 94651568348496
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @main.L393.C36, i32 8)
  store ptr %new_py_func_obj12, ptr @main_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @main_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @main.L393.C36, i32 8)
  store ptr %new_py_func_obj12, ptr @main_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'main' to storage: @main_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @main.L393.C36, i32 8)
  store ptr %new_py_func_obj12, ptr @main_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'main'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @print_test_result.L12.C1, i32 8)
  store ptr %new_py_func_obj, ptr @print_test_result_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @test_for_else_normal_completion.L34.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @test_for_else_normal_completion_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @test_for_else_with_break.L58.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @test_for_else_with_break_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @test_for_else_with_continue.L81.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @test_for_else_with_continue_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_for_return_in_body.L94.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_for_return_in_body_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @test_for_else_with_return_in_body.L111.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @test_for_else_with_return_in_body_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @func_for_return_in_else.L122.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @func_for_return_in_else_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @test_for_else_with_return_in_else.L132.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @test_for_else_with_return_in_else_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @test_for_else_empty_iterable.L151.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @test_for_else_empty_iterable_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @test_nested_for_else_break.L201.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @test_nested_for_else_break_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @test_nested_for_else_continue.L246.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @test_nested_for_else_continue_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @test_for_else_complex_break_continue.L318.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @test_for_else_complex_break_continue_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @main.L393.C36, i32 8)
  store ptr %new_py_func_obj12, ptr @main_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'main'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Preparing to call Python main. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Looking up GlobalVariable 'main_obj_gv' in Module@ 94651568348496
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Found Python main function GlobalVariable: @main_obj_gv = internal global ptr null
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loaded 'main' object:   %main_func_loaded = load ptr, ptr @main_obj_gv, align 8
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Generated call to Python main. Result object:   %call_result = call ptr @py_call_function_noargs(ptr %main_func_loaded)
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Generated conversion to exit code:   %exit_code = call i32 @py_object_to_exit_code(ptr %call_result)
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Added return instruction for exit code.
Debug [PySymbolTable]: Generating cleanups for scope level 2 in block detached.after.ret
Debug [PySymbolTable]: Popping scope level 2
[GenMod] CurFunc: __llvmpy_entry, CurBlock: detached.after.ret, CurIP: {Block: detached.after.ret, Point: end} - [EntryPt] Terminating block detached.after.ret (part of __llvmpy_entry) with Unreachable after endScope.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: detached.after.ret, CurIP: {Block: detached.after.ret, Point: end} - [EntryPt] Finished statement loop and main call sequence.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: detached.after.ret, CurIP: {Block: detached.after.ret, Point: end} - [EntryPt] After endScope, entry block terminator:   ret i32 %exit_code
[GenMod] CurFunc: <null Function>, CurBlock: detached.after.ret, CurIP: {Block: detached.after.ret, Point: end} - [EntryPt] Restored context (Func/RetType only). Current function: <null Function>. Saved IP was invalid.
[GenMod] CurFunc: <null Function>, CurBlock: detached.after.ret, CurIP: {Block: detached.after.ret, Point: end} - [EntryPt] WARNING: Builder has insert block but no current function after restore!
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Restored context. Current function: <null Function>, IP=<invalid IP>
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Verifying entry function '__llvmpy_entry'...
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Verifying entry function '__llvmpy_entry'...
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Blocks in __llvmpy_entry before verification:
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt]   Block: entry (ID: entry) - Terminated
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt]   Block: detached.after.ret (ID: detached.after.ret) - Terminated
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Entry function verification PASSED.
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - Verifying entire module...
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - Module verification PASSED.
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - Leaving generateModule.
成功将 test.py 编译为 output.ll
