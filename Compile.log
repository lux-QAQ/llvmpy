[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - Entering generateModule. isEntryPoint=true
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - Module resources initialized (runtime functions, global ctor).
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Processing as entry point module.
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Got entry function: __llvmpy_entry
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Created new entry block for __llvmpy_entry: entry
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Set initial insert point in __llvmpy_entry.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Set current function to __llvmpy_entry. Saved context: Func=<null Function>, IP=Block: entry, Point: end
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Starting statement loop in __llvmpy_entry. Initial block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 3 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_return'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_return' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_return'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_return'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_return.L3.C1' for Python name 'func_return'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_return'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_return.L3.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_return.L3.C1 with name 'func_return.L3.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441812752 -> LLVM Func func_return.L3.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_return.L3.C1'...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_return.L3.C1
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 3
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'func_return.L3.C1'. Last block: entry
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'func_return.L3.C1'...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_return.L3.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_return.L3.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_return' (LLVM: func_return.L3.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_return'. Got LLVM Func: define internal ptr @func_return.L3.C1(ptr %a) {
entry:
  ret ptr %a
}
 ('func_return.L3.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_return'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_return' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_return'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_return.L3.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_return'. Value:   %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_return' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_return_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_return_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_return' to storage: @func_return_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_return'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_return'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 5 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_return_listindex'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_return_listindex' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_return_listindex'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_return_listindex'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_return_listindex.L5.C1' for Python name 'func_return_listindex'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_return_listindex'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int, int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_return_listindex.L5.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_return_listindex.L5.C1 with name 'func_return_listindex.L5.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441813728 -> LLVM Func func_return_listindex.L5.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_return_listindex.L5.C1'...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_return_listindex.L5.C1
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 5
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'func_return_listindex.L5.C1'. Last block: entry
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'func_return_listindex.L5.C1'...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_return_listindex.L5.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_return_listindex.L5.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_return_listindex' (LLVM: func_return_listindex.L5.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_return_listindex'. Got LLVM Func: define internal ptr @func_return_listindex.L5.C1(ptr %list, ptr %index) {
entry:
  %index_result = call ptr @py_object_index(ptr %list, ptr %index)
  ret ptr %index_result
}
 ('func_return_listindex.L5.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_return_listindex'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_return_listindex' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_return_listindex'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_return_listindex.L5.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_return_listindex'. Value:   %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_return_listindex' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_return_listindex_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_return_listindex_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_return_listindex' to storage: @func_return_listindex_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_return_listindex'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_return_listindex'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 7 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_list'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_list' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_list'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_list'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_list.L7.C1' for Python name 'func_list'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_list'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: list<any>
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_list.L7.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_list.L7.C1 with name 'func_list.L7.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441815568 -> LLVM Func func_list.L7.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_list.L7.C1'...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_list.L7.C1
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 7
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'func_list.L7.C1'. Last block: entry
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'func_list.L7.C1'...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_list.L7.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_list.L7.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_list' (LLVM: func_list.L7.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_list'. Got LLVM Func: define internal ptr @func_list.L7.C1(ptr %em) {
entry:
  %list_obj = call ptr @py_create_list(i32 1, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %em)
  ret ptr %list_obj
}
 ('func_list.L7.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_list'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_list' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_list'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_list.L7.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_list'. Value:   %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_list' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_list_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_list_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_list' to storage: @func_list_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_list'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_list'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 9 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_dict'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_dict' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_dict'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_dict'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_dict.L9.C1' for Python name 'func_dict'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_dict'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: dict<double,any>
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_dict.L9.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_dict.L9.C1 with name 'func_dict.L9.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441817024 -> LLVM Func func_dict.L9.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_dict.L9.C1'...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_dict.L9.C1
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 9
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'func_dict.L9.C1'. Last block: entry
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'func_dict.L9.C1'...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_dict.L9.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_dict.L9.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_dict' (LLVM: func_dict.L9.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_dict'. Got LLVM Func: define internal ptr @func_dict.L9.C1(ptr %em) {
entry:
  %dict_obj = call ptr @py_create_dict(i32 8, i32 2)
  %double_obj_from_str = call ptr @py_create_double_bystring(ptr @double_str_const, i32 10, i64 0)
  call void @py_dict_set_item(ptr %dict_obj, ptr %double_obj_from_str, ptr %em)
  ret ptr %dict_obj
}
 ('func_dict.L9.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_dict'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_dict' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_dict'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_dict.L9.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_dict'. Value:   %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_dict' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_dict_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_dict_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_dict' to storage: @func_dict_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_dict'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_dict'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 18 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_fib'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_fib' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_fib'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_fib'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_fib.L18.C1' for Python name 'func_fib'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_fib'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_fib.L18.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_fib.L18.C1 with name 'func_fib.L18.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441878304 -> LLVM Func func_fib.L18.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_fib.L18.C1'...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_fib.L18.C1
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 2 at line 10
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: entry, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from entry on   %condval = call i1 @py_object_to_bool(ptr %cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) already terminated.
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement exists (not null). Kind: 2
DEBUG:        Else statement is IfStmtAST (elif). Making recursive call...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval4 = call i1 @py_object_to_bool(ptr %cmp_result3)
DEBUG:      [2] Created blocks: thenBB=then5, elseEntryBB=else6
DEBUG:      [3] Creating CondBr from else on   %condval4 = call i1 @py_object_to_bool(ptr %cmp_result3) ? then5 : else6
DEBUG:      [4] Handling 'then' branch (Block: then5)
DEBUG:          Set insert point to: then5
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then5
DEBUG:          'then' block (then5) already terminated.
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else6)
DEBUG:          Set insert point to: else6
DEBUG:          Else statement exists (not null). Kind: 2
DEBUG:          Else statement is IfStmtAST (elif). Making recursive call...
DEBUG:     -> Entering handleIfStmtRecursive
DEBUG:        Target finalMergeBB: ifcont
DEBUG:        [1] Handling condition...
DEBUG:        [1] Condition Value:   %condval10 = call i1 @py_object_to_bool(ptr %cmp_result9)
DEBUG:        [2] Created blocks: thenBB=then11, elseEntryBB=else12
DEBUG:        [3] Creating CondBr from else6 on   %condval10 = call i1 @py_object_to_bool(ptr %cmp_result9) ? then11 : else12
DEBUG:        [4] Handling 'then' branch (Block: then11)
DEBUG:            Set insert point to: then11
DEBUG:            Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for thenBody. Current block: then11
DEBUG:            'then' block (then11) already terminated.
DEBUG:        [5] Handling 'else'/'elif' part (Entry Block: else12)
DEBUG:            Set insert point to: else12
DEBUG:            Else statement exists (not null). Kind: 11
DEBUG:            Else statement is NOT IfStmtAST. Treating as final 'else' block.
DEBUG:                Else statement is BlockStmtAST. Calling handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Found FunctionAST for 'func_fib' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'func_fib' as func
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Detected RECURSIVE call to 'func_fib'. Will generate direct call.
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Generating direct LLVM call instruction to 'func_fib'
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Found FunctionAST for 'func_fib' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'func_fib' as func
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Detected RECURSIVE call to 'func_fib'. Will generate direct call.
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Generating direct LLVM call instruction to 'func_fib'
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:                Returned from handleBlock for else block. Current block: else12
DEBUG:            Final 'else' block (else12) already terminated.
DEBUG:     <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:          Returned from recursive call for elif.
DEBUG:   <- Leaving handleIfStmtRecursive (elif handled)
DEBUG:        Returned from recursive call for elif.
DEBUG: <- Leaving handleIfStmtRecursive (elif handled)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else12
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: No
DEBUG:        Has Predecessors: No
DEBUG:        finalMergeBB is unreachable, but original block was not terminated. Erasing finalMergeBB.
DEBUG:        WARNING: Builder insert point might be invalid now.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: else12
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Checking for default return for 'func_fib.L18.C1'. Last block: else12
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Cleaning up function resources for 'func_fib.L18.C1'...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_fib.L18.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_fib.L18.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_fib' (LLVM: func_fib.L18.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_fib'. Got LLVM Func: define internal ptr @func_fib.L18.C1(ptr %em) {
entry:
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const, i32 10)
  %cmp_result = call ptr @py_object_compare(ptr %em, ptr %int_obj_from_str, i32 3), !py.type !0
  %condval = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval, label %then, label %else

then:                                             ; preds = %entry
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.1, i32 10)
  ret ptr %int_obj_from_str1

else:                                             ; preds = %entry
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.2, i32 10)
  %cmp_result3 = call ptr @py_object_compare(ptr %em, ptr %int_obj_from_str2, i32 0), !py.type !0
  %condval4 = call i1 @py_object_to_bool(ptr %cmp_result3)
  br i1 %condval4, label %then5, label %else6

then5:                                            ; preds = %else
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.3, i32 10)
  ret ptr %int_obj_from_str7

else6:                                            ; preds = %else
  %int_obj_from_str8 = call ptr @py_create_int_bystring(ptr @int_str_const.4, i32 10)
  %cmp_result9 = call ptr @py_object_compare(ptr %em, ptr %int_obj_from_str8, i32 0), !py.type !0
  %condval10 = call i1 @py_object_to_bool(ptr %cmp_result9)
  br i1 %condval10, label %then11, label %else12

then11:                                           ; preds = %else6
  %int_obj_from_str13 = call ptr @py_create_int_bystring(ptr @int_str_const.5, i32 10)
  ret ptr %int_obj_from_str13

else12:                                           ; preds = %else6
  %int_obj_from_str14 = call ptr @py_create_int_bystring(ptr @int_str_const.6, i32 10)
  %binop_result = call ptr @py_object_subtract(ptr %em, ptr %int_obj_from_str14), !py.type !1
  call void @py_incref(ptr %binop_result)
  %direct_call_res = call ptr @func_fib.L18.C1(ptr %binop_result)
  %int_obj_from_str15 = call ptr @py_create_int_bystring(ptr @int_str_const.7, i32 10)
  %binop_result16 = call ptr @py_object_subtract(ptr %em, ptr %int_obj_from_str15), !py.type !1
  call void @py_incref(ptr %binop_result16)
  %direct_call_res17 = call ptr @func_fib.L18.C1(ptr %binop_result16)
  %any_op_result = call ptr @py_object_add(ptr %direct_call_res, ptr %direct_call_res17), !py.type !2
  ret ptr %any_op_result
}
 ('func_fib.L18.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_fib'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_fib' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_fib'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_fib.L18.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_fib'. Value:   %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_fib' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_fib_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_fib_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_fib' to storage: @func_fib_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_fib'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_fib'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 24 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'arr_test1'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'arr_test1' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'arr_test1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'arr_test1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'arr_test1.L24.C1' for Python name 'arr_test1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'arr_test1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'arr_test1.L24.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: arr_test1.L24.C1 with name 'arr_test1.L24.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441880880 -> LLVM Func arr_test1.L24.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'arr_test1.L24.C1'...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: arr_test1.L24.C1
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 20
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 20
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 22
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 23
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 24
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'arr_test1.L24.C1'. Last block: entry
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Adding default return to block entry
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'arr_test1.L24.C1'...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'arr_test1.L24.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'arr_test1.L24.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'arr_test1'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 33 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'arr_test2'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'arr_test2' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'arr_test2'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'arr_test2'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'arr_test2.L33.C1' for Python name 'arr_test2'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'arr_test2'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'arr_test2.L33.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: arr_test2.L33.C1 with name 'arr_test2.L33.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441885536 -> LLVM Func arr_test2.L33.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'arr_test2.L33.C1'...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: arr_test2.L33.C1
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 26
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 26
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 28
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 29
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 30
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'arr_test2.L33.C1'. Last block: entry
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Adding default return to block entry
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'arr_test2.L33.C1'...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'arr_test2.L33.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'arr_test2.L33.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'arr_test2'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 43 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'list_modification_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'list_modification_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'list_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'list_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'list_modification_test.L43.C1' for Python name 'list_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'list_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'list_modification_test.L43.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: list_modification_test.L43.C1 with name 'list_modification_test.L43.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441889344 -> LLVM Func list_modification_test.L43.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'list_modification_test.L43.C1'...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: list_modification_test.L43.C1
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 35
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 35
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 37
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 37
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 39
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 39
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 41
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 43
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'list_modification_test.L43.C1'. Last block: entry
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Adding default return to block entry
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'list_modification_test.L43.C1'...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'list_modification_test.L43.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'list_modification_test.L43.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'list_modification_test'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 59 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'dict_modification_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'dict_modification_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'dict_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'dict_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'dict_modification_test.L59.C1' for Python name 'dict_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'dict_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'dict_modification_test.L59.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: dict_modification_test.L59.C1 with name 'dict_modification_test.L59.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441894928 -> LLVM Func dict_modification_test.L59.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'dict_modification_test.L59.C1'...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: dict_modification_test.L59.C1
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 45
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 45
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 47
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 47
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 49
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 49
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 51
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 51
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 53
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 54
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 55
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 57
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 59
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'dict_modification_test.L59.C1'. Last block: entry
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Adding default return to block entry
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'dict_modification_test.L59.C1'...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'dict_modification_test.L59.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'dict_modification_test.L59.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'dict_modification_test'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 78 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'nested_container_access_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'nested_container_access_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'nested_container_access_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'nested_container_access_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'nested_container_access_test.L78.C1' for Python name 'nested_container_access_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'nested_container_access_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'nested_container_access_test.L78.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: nested_container_access_test.L78.C1 with name 'nested_container_access_test.L78.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441907168 -> LLVM Func nested_container_access_test.L78.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'nested_container_access_test.L78.C1'...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: nested_container_access_test.L78.C1
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 61
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 61
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 63
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 64
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 65
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 66
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 66
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 68
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 68
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 70
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 71
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 73
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 74
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 76
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 78
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'nested_container_access_test.L78.C1'. Last block: entry
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Adding default return to block entry
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'nested_container_access_test.L78.C1'...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'nested_container_access_test.L78.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'nested_container_access_test.L78.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'nested_container_access_test'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 97 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'container_assignment_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'container_assignment_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'container_assignment_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'container_assignment_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'container_assignment_test.L97.C1' for Python name 'container_assignment_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'container_assignment_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'container_assignment_test.L97.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: container_assignment_test.L97.C1 with name 'container_assignment_test.L97.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894441912752 -> LLVM Func container_assignment_test.L97.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'container_assignment_test.L97.C1'...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: container_assignment_test.L97.C1
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 80
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 80
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 81
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 82
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 84
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 86
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 86
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 87
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 88
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 90
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 91
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 91
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 93
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 95
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'container_assignment_test.L97.C1'. Last block: entry
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Adding default return to block entry
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'container_assignment_test.L97.C1'...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'container_assignment_test.L97.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'container_assignment_test.L97.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'container_assignment_test'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 114 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'complex_list_while_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'complex_list_while_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'complex_list_while_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'complex_list_while_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'complex_list_while_test.L114.C1' for Python name 'complex_list_while_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'complex_list_while_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'complex_list_while_test.L114.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: complex_list_while_test.L114.C1 with name 'complex_list_while_test.L114.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894442034304 -> LLVM Func complex_list_while_test.L114.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'complex_list_while_test.L114.C1'...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: complex_list_while_test.L114.C1
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 99
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 101
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 102
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 103
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 111
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: while.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval14 = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from while.body on   %condval14 = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement exists (not null). Kind: 11
DEBUG:        Else statement is NOT IfStmtAST. Treating as final 'else' block.
DEBUG:            Else statement is BlockStmtAST. Calling handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for else block. Current block: else
DEBUG:        Final 'else' block (else) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 112
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 4 at line 114
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Checking for default return for 'complex_list_while_test.L114.C1'. Last block: while.end
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Adding default return to block while.end
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Cleaning up function resources for 'complex_list_while_test.L114.C1'...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'complex_list_while_test.L114.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'complex_list_while_test.L114.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'complex_list_while_test'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 144 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'complex_dict_while_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'complex_dict_while_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'complex_dict_while_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'complex_dict_while_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'complex_dict_while_test.L144.C1' for Python name 'complex_dict_while_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'complex_dict_while_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'complex_dict_while_test.L144.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: complex_dict_while_test.L144.C1 with name 'complex_dict_while_test.L144.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894442043152 -> LLVM Func complex_dict_while_test.L144.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'complex_dict_while_test.L144.C1'...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: complex_dict_while_test.L144.C1
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 116
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 116
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 117
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 134
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 135
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 6 at line 136
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 3 at line 141
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: while.body34, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval47 = call i1 @py_object_to_bool(ptr %any_cmp_result46)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from while.body34 on   %condval47 = call i1 @py_object_to_bool(ptr %any_cmp_result46) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Body: Handling Stmt Kind 5 at line 142
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Body: Handling Stmt Kind 4 at line 144
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Checking for default return for 'complex_dict_while_test.L144.C1'. Last block: while.end35
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Adding default return to block while.end35
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Cleaning up function resources for 'complex_dict_while_test.L144.C1'...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'complex_dict_while_test.L144.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'complex_dict_while_test.L144.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'complex_dict_while_test'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 163 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'nested_loop_modification_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'nested_loop_modification_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'nested_loop_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'nested_loop_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'nested_loop_modification_test.L163.C1' for Python name 'nested_loop_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'nested_loop_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'nested_loop_modification_test.L163.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: nested_loop_modification_test.L163.C1 with name 'nested_loop_modification_test.L163.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894442052544 -> LLVM Func nested_loop_modification_test.L163.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'nested_loop_modification_test.L163.C1'...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: nested_loop_modification_test.L163.C1
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 146
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 147
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 148
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 149
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 150
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 157
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 158
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 159
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 161
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 4 at line 163
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Checking for default return for 'nested_loop_modification_test.L163.C1'. Last block: while.end
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Adding default return to block while.end
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Cleaning up function resources for 'nested_loop_modification_test.L163.C1'...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'nested_loop_modification_test.L163.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'nested_loop_modification_test.L163.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'nested_loop_modification_test'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 198 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'dict_list_interaction_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'dict_list_interaction_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'dict_list_interaction_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'dict_list_interaction_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'dict_list_interaction_test.L198.C1' for Python name 'dict_list_interaction_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'dict_list_interaction_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'dict_list_interaction_test.L198.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: dict_list_interaction_test.L198.C1 with name 'dict_list_interaction_test.L198.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894442064720 -> LLVM Func dict_list_interaction_test.L198.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'dict_list_interaction_test.L198.C1'...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: dict_list_interaction_test.L198.C1
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 165
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 165
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 168
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 169
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 173
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 175
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 176
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 179
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 180
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 183
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 184
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 187
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 188
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 190
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 192
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 195
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 196
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 4 at line 198
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Checking for default return for 'dict_list_interaction_test.L198.C1'. Last block: while.end
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Adding default return to block while.end
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Cleaning up function resources for 'dict_list_interaction_test.L198.C1'...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'dict_list_interaction_test.L198.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'dict_list_interaction_test.L198.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'dict_list_interaction_test'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 225 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'list_dict_interaction_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'list_dict_interaction_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'list_dict_interaction_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'list_dict_interaction_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'list_dict_interaction_test.L225.C1' for Python name 'list_dict_interaction_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'list_dict_interaction_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'list_dict_interaction_test.L225.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: list_dict_interaction_test.L225.C1 with name 'list_dict_interaction_test.L225.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894442074976 -> LLVM Func list_dict_interaction_test.L225.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'list_dict_interaction_test.L225.C1'...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: list_dict_interaction_test.L225.C1
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 200
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 200
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 201
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 202
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 218
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: while.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval25 = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from while.body on   %condval25 = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 219
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 220
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 222
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 4 at line 225
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Checking for default return for 'list_dict_interaction_test.L225.C1'. Last block: while.end
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Adding default return to block while.end
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Cleaning up function resources for 'list_dict_interaction_test.L225.C1'...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'list_dict_interaction_test.L225.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'list_dict_interaction_test.L225.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'list_dict_interaction_test'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 257 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'main'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'main' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'main'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'main'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'main.L257.C1' for Python name 'main'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'main'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'main.L257.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: main.L257.C1 with name 'main.L257.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 93894442081232 -> LLVM Func main.L257.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'main.L257.C1'...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: main.L257.C1
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 227
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 228
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_return'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 229
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_return_listindex'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 229
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_list'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 231
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 231
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_dict'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 233
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 234
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_fib'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 238
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'arr_test1' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'arr_test1' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'arr_test1' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'arr_test1'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'arr_test2' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'arr_test2' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'arr_test2' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'arr_test2'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 242
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'list_modification_test' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'list_modification_test' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'list_modification_test' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'list_modification_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'dict_modification_test' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'dict_modification_test' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'dict_modification_test' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'dict_modification_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'nested_container_access_test' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'nested_container_access_test' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'nested_container_access_test' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'nested_container_access_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'container_assignment_test' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'container_assignment_test' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'container_assignment_test' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'container_assignment_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 248
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'complex_list_while_test' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'complex_list_while_test' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'complex_list_while_test' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'complex_list_while_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'complex_dict_while_test' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'complex_dict_while_test' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'complex_dict_while_test' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'complex_dict_while_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'nested_loop_modification_test' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'nested_loop_modification_test' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'nested_loop_modification_test' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'nested_loop_modification_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'dict_list_interaction_test' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'dict_list_interaction_test' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'dict_list_interaction_test' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'dict_list_interaction_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'list_dict_interaction_test' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'list_dict_interaction_test' as func
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'list_dict_interaction_test' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'list_dict_interaction_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 255
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 257
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'main.L257.C1'. Last block: entry
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Adding default return to block entry
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added default return instruction.
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'main.L257.C1'...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'main.L257.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Function verification FAILED for 'main.L257.C1' !!!
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef FAILED for 'main'.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 7 at line 0 in block entry
[HdlCallExpr] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Found FunctionAST for 'main' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'main' as func
[HdlCallExpr] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Detected call to known function 'main' (possibly outer scope). Will generate direct call.
[HdlCallExpr] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating direct LLVM call instruction to 'main'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Preparing to call Python main. Current block: entry
Error: Python function 'main' not found or is not a function.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Finished statement loop and main call sequence.
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Restored context. Current function: <null Function>, IP=Block: entry, Point: end
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Verifying entry function '__llvmpy_entry'...
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Entry function verification PASSED.
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying entire module...
Terminator found in the middle of a basic block!
label %entry
Terminator found in the middle of a basic block!
label %entry
Terminator found in the middle of a basic block!
label %entry
Terminator found in the middle of a basic block!
label %entry
Terminator found in the middle of a basic block!
label %entry
Terminator found in the middle of a basic block!
label %entry
Terminator found in the middle of a basic block!
label %while.end
Terminator found in the middle of a basic block!
label %while.end35
Terminator found in the middle of a basic block!
label %while.end
Terminator found in the middle of a basic block!
label %while.end
Terminator found in the middle of a basic block!
label %while.end
Terminator found in the middle of a basic block!
label %entry
Error: LLVM Module verification failed. See stderr output for details.
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - !!! Module verification FAILED !!!
成功将 /home/ljs/code/llvmpy/test.py 编译为 output.ll
