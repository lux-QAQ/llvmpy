[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - Entering generateModule. isEntryPoint=true
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - Module resources initialized (runtime functions, global ctor).
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Processing as entry point module.
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Got entry function: __llvmpy_entry
[GenMod] CurFunc: <null Function>, CurBlock: <null BasicBlock>, CurIP: {<invalid IP>} - [EntryPt] Created new entry block for __llvmpy_entry: entry
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Set initial insert point in __llvmpy_entry.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Set current function to __llvmpy_entry. Saved context: Func=<null Function>, IP=Block: entry, Point: end
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Starting statement loop in __llvmpy_entry. Initial block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 3 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_return'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_return' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_return'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_return'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_return.L3.C1' for Python name 'func_return'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_return'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_return.L3.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_return.L3.C1 with name 'func_return.L3.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436251920 -> LLVM Func func_return.L3.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_return.L3.C1'...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_return.L3.C1
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 3
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'func_return.L3.C1'. Last block: entry
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'func_return.L3.C1'...
[HdlFuncDef] CurFunc: func_return.L3.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_return.L3.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_return.L3.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_return' (LLVM: func_return.L3.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_return'. Got LLVM Func: define internal ptr @func_return.L3.C1(ptr %a) {
entry:
  ret ptr %a
}
 ('func_return.L3.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_return'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_return' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_return'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_return.L3.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_return'. Value:   %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_return' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_return_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_return_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_return' to storage: @func_return_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_return'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_return'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 5 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_return_listindex'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_return_listindex' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_return_listindex'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_return_listindex'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_return_listindex.L5.C1' for Python name 'func_return_listindex'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_return_listindex'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int, int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_return_listindex.L5.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_return_listindex.L5.C1 with name 'func_return_listindex.L5.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436252896 -> LLVM Func func_return_listindex.L5.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_return_listindex.L5.C1'...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_return_listindex.L5.C1
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 5
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'func_return_listindex.L5.C1'. Last block: entry
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'func_return_listindex.L5.C1'...
[HdlFuncDef] CurFunc: func_return_listindex.L5.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_return_listindex.L5.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_return_listindex.L5.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_return_listindex' (LLVM: func_return_listindex.L5.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_return_listindex'. Got LLVM Func: define internal ptr @func_return_listindex.L5.C1(ptr %list, ptr %index) {
entry:
  %index_result = call ptr @py_object_index(ptr %list, ptr %index)
  ret ptr %index_result
}
 ('func_return_listindex.L5.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_return_listindex'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_return_listindex' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_return_listindex'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_return_listindex.L5.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_return_listindex'. Value:   %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_return_listindex' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_return_listindex_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_return_listindex_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_return_listindex' to storage: @func_return_listindex_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_return_listindex'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_return_listindex'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 7 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_list'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_list' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_list'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_list'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_list.L7.C1' for Python name 'func_list'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_list'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: list<any>
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_list.L7.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_list.L7.C1 with name 'func_list.L7.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436254736 -> LLVM Func func_list.L7.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_list.L7.C1'...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_list.L7.C1
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 7
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'func_list.L7.C1'. Last block: entry
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'func_list.L7.C1'...
[HdlFuncDef] CurFunc: func_list.L7.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_list.L7.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_list.L7.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_list' (LLVM: func_list.L7.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_list'. Got LLVM Func: define internal ptr @func_list.L7.C1(ptr %em) {
entry:
  %list_obj = call ptr @py_create_list(i32 1, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %em)
  ret ptr %list_obj
}
 ('func_list.L7.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_list'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_list' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_list'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_list.L7.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_list'. Value:   %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_list' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_list_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_list_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_list' to storage: @func_list_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_list'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_list'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 9 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_dict'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_dict' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_dict'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_dict'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_dict.L9.C1' for Python name 'func_dict'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_dict'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: dict<double,any>
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_dict.L9.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_dict.L9.C1 with name 'func_dict.L9.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436256192 -> LLVM Func func_dict.L9.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_dict.L9.C1'...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_dict.L9.C1
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 9
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'func_dict.L9.C1'. Last block: entry
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'func_dict.L9.C1'...
[HdlFuncDef] CurFunc: func_dict.L9.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_dict.L9.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_dict.L9.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_dict' (LLVM: func_dict.L9.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_dict'. Got LLVM Func: define internal ptr @func_dict.L9.C1(ptr %em) {
entry:
  %dict_obj = call ptr @py_create_dict(i32 8, i32 2)
  %double_obj_from_str = call ptr @py_create_double_bystring(ptr @double_str_const, i32 10, i64 0)
  call void @py_dict_set_item(ptr %dict_obj, ptr %double_obj_from_str, ptr %em)
  ret ptr %dict_obj
}
 ('func_dict.L9.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_dict'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_dict' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_dict'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_dict.L9.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_dict'. Value:   %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_dict' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_dict_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_dict_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_dict' to storage: @func_dict_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_dict'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_dict'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 18 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'func_fib'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'func_fib' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'func_fib'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'func_fib'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'func_fib.L18.C1' for Python name 'func_fib'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'func_fib'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: any
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: [int]
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'func_fib.L18.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: func_fib.L18.C1 with name 'func_fib.L18.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436317472 -> LLVM Func func_fib.L18.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'func_fib.L18.C1'...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: func_fib.L18.C1
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 2 at line 10
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: entry, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval = call i1 @py_object_to_bool(ptr %cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from entry on   %condval = call i1 @py_object_to_bool(ptr %cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) already terminated.
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement exists (not null). Kind: 2
DEBUG:        Else statement is IfStmtAST (elif). Making recursive call...
DEBUG:   -> Entering handleIfStmtRecursive
DEBUG:      Target finalMergeBB: ifcont
DEBUG:      [1] Handling condition...
DEBUG:      [1] Condition Value:   %condval4 = call i1 @py_object_to_bool(ptr %cmp_result3)
DEBUG:      [2] Created blocks: thenBB=then5, elseEntryBB=else6
DEBUG:      [3] Creating CondBr from else on   %condval4 = call i1 @py_object_to_bool(ptr %cmp_result3) ? then5 : else6
DEBUG:      [4] Handling 'then' branch (Block: then5)
DEBUG:          Set insert point to: then5
DEBUG:          Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:          Returned from handleBlock for thenBody. Current block: then5
DEBUG:          'then' block (then5) already terminated.
DEBUG:      [5] Handling 'else'/'elif' part (Entry Block: else6)
DEBUG:          Set insert point to: else6
DEBUG:          Else statement exists (not null). Kind: 2
DEBUG:          Else statement is IfStmtAST (elif). Making recursive call...
DEBUG:     -> Entering handleIfStmtRecursive
DEBUG:        Target finalMergeBB: ifcont
DEBUG:        [1] Handling condition...
DEBUG:        [1] Condition Value:   %condval10 = call i1 @py_object_to_bool(ptr %cmp_result9)
DEBUG:        [2] Created blocks: thenBB=then11, elseEntryBB=else12
DEBUG:        [3] Creating CondBr from else6 on   %condval10 = call i1 @py_object_to_bool(ptr %cmp_result9) ? then11 : else12
DEBUG:        [4] Handling 'then' branch (Block: then11)
DEBUG:            Set insert point to: then11
DEBUG:            Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for thenBody. Current block: then11
DEBUG:            'then' block (then11) already terminated.
DEBUG:        [5] Handling 'else'/'elif' part (Entry Block: else12)
DEBUG:            Set insert point to: else12
DEBUG:            Else statement exists (not null). Kind: 11
DEBUG:            Else statement is NOT IfStmtAST. Treating as final 'else' block.
DEBUG:                Else statement is BlockStmtAST. Calling handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Found FunctionAST for 'func_fib' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'func_fib' as func
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Detected RECURSIVE call to 'func_fib'. Will generate direct call.
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Generating direct LLVM call instruction to 'func_fib'
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Found FunctionAST for 'func_fib' in symbol table.
Debug [CodeGenType]: Resolved static FunctionType for 'func_fib' as func
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Detected RECURSIVE call to 'func_fib'. Will generate direct call.
[HdlCallExpr] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Generating direct LLVM call instruction to 'func_fib'
DEBUG:   Block terminated early after statement. Stopping block processing.
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:                Returned from handleBlock for else block. Current block: else12
DEBUG:            Final 'else' block (else12) already terminated.
DEBUG:     <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:          Returned from recursive call for elif.
DEBUG:   <- Leaving handleIfStmtRecursive (elif handled)
DEBUG:        Returned from recursive call for elif.
DEBUG: <- Leaving handleIfStmtRecursive (elif handled)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else12
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: No
DEBUG:        Has Predecessors: No
DEBUG:        finalMergeBB is unreachable, but original block was not terminated. Erasing finalMergeBB.
DEBUG:        WARNING: Builder insert point might be invalid now.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: else12
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Checking for default return for 'func_fib.L18.C1'. Last block: else12
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Cleaning up function resources for 'func_fib.L18.C1'...
[HdlFuncDef] CurFunc: func_fib.L18.C1, CurBlock: else12, CurIP: {Block: else12, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'func_fib.L18.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'func_fib.L18.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'func_fib' (LLVM: func_fib.L18.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'func_fib'. Got LLVM Func: define internal ptr @func_fib.L18.C1(ptr %em) {
entry:
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const, i32 10)
  %cmp_result = call ptr @py_object_compare(ptr %em, ptr %int_obj_from_str, i32 3), !py.type !0
  %condval = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval, label %then, label %else

then:                                             ; preds = %entry
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.1, i32 10)
  ret ptr %int_obj_from_str1

else:                                             ; preds = %entry
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.2, i32 10)
  %cmp_result3 = call ptr @py_object_compare(ptr %em, ptr %int_obj_from_str2, i32 0), !py.type !0
  %condval4 = call i1 @py_object_to_bool(ptr %cmp_result3)
  br i1 %condval4, label %then5, label %else6

then5:                                            ; preds = %else
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.3, i32 10)
  ret ptr %int_obj_from_str7

else6:                                            ; preds = %else
  %int_obj_from_str8 = call ptr @py_create_int_bystring(ptr @int_str_const.4, i32 10)
  %cmp_result9 = call ptr @py_object_compare(ptr %em, ptr %int_obj_from_str8, i32 0), !py.type !0
  %condval10 = call i1 @py_object_to_bool(ptr %cmp_result9)
  br i1 %condval10, label %then11, label %else12

then11:                                           ; preds = %else6
  %int_obj_from_str13 = call ptr @py_create_int_bystring(ptr @int_str_const.5, i32 10)
  ret ptr %int_obj_from_str13

else12:                                           ; preds = %else6
  %int_obj_from_str14 = call ptr @py_create_int_bystring(ptr @int_str_const.6, i32 10)
  %binop_result = call ptr @py_object_subtract(ptr %em, ptr %int_obj_from_str14), !py.type !1
  call void @py_incref(ptr %binop_result)
  %direct_call_res = call ptr @func_fib.L18.C1(ptr %binop_result)
  %int_obj_from_str15 = call ptr @py_create_int_bystring(ptr @int_str_const.7, i32 10)
  %binop_result16 = call ptr @py_object_subtract(ptr %em, ptr %int_obj_from_str15), !py.type !1
  call void @py_incref(ptr %binop_result16)
  %direct_call_res17 = call ptr @func_fib.L18.C1(ptr %binop_result16)
  %any_op_result = call ptr @py_object_add(ptr %direct_call_res, ptr %direct_call_res17), !py.type !2
  ret ptr %any_op_result
}
 ('func_fib.L18.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'func_fib'...
Debug [CodeGenType]: Resolved static FunctionType for 'func_fib' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'func_fib'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'func_fib.L18.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'func_fib'. Value:   %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'func_fib' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @func_fib_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @func_fib_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'func_fib' to storage: @func_fib_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'func_fib'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'func_fib'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 24 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'arr_test1'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'arr_test1' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'arr_test1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'arr_test1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'arr_test1.L24.C1' for Python name 'arr_test1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'arr_test1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'arr_test1.L24.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: arr_test1.L24.C1 with name 'arr_test1.L24.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436320048 -> LLVM Func arr_test1.L24.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'arr_test1.L24.C1'...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: arr_test1.L24.C1
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 20
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 20
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 22
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 23
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 24
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'arr_test1.L24.C1'. Last block: entry
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'arr_test1.L24.C1'...
[HdlFuncDef] CurFunc: arr_test1.L24.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'arr_test1.L24.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'arr_test1.L24.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'arr_test1' (LLVM: arr_test1.L24.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'arr_test1'. Got LLVM Func: define internal ptr @arr_test1.L24.C1() {
entry:
  %tmp.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const)
  call void @py_print_object(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.8, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.9, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.10, i32 10)
  %list_obj = call ptr @py_create_list(i32 3, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.11, i32 10)
  %binop_result = call ptr @py_object_multiply(ptr %list_obj, ptr %int_obj_from_str3), !py.type !3
  store ptr %binop_result, ptr %tmp.addr, align 8
  call void @py_incref(ptr %binop_result)
  %tmp_val = load ptr, ptr %tmp.addr, align 8
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.12, i32 10)
  %list_item = call ptr @py_list_get_item(ptr %tmp_val, ptr %int_obj_from_str4)
  call void @py_print_object(ptr %list_item)
  %tmp_val5 = load ptr, ptr %tmp.addr, align 8
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.13, i32 10)
  %list_item7 = call ptr @py_list_get_item(ptr %tmp_val5, ptr %int_obj_from_str6)
  call void @py_print_object(ptr %list_item7)
  %int_obj_from_str8 = call ptr @py_create_int_bystring(ptr @int_str_const.14, i32 10)
  ret ptr %int_obj_from_str8
}
 ('arr_test1.L24.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'arr_test1'...
Debug [CodeGenType]: Resolved static FunctionType for 'arr_test1' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'arr_test1'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'arr_test1.L24.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'arr_test1'. Value:   %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'arr_test1' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @arr_test1_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @arr_test1_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'arr_test1' to storage: @arr_test1_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'arr_test1'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'arr_test1'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 33 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'arr_test2'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'arr_test2' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'arr_test2'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'arr_test2'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'arr_test2.L33.C1' for Python name 'arr_test2'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'arr_test2'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'arr_test2.L33.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: arr_test2.L33.C1 with name 'arr_test2.L33.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436324704 -> LLVM Func arr_test2.L33.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'arr_test2.L33.C1'...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: arr_test2.L33.C1
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 26
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 26
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 28
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 29
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 30
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'arr_test2.L33.C1'. Last block: entry
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'arr_test2.L33.C1'...
[HdlFuncDef] CurFunc: arr_test2.L33.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'arr_test2.L33.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'arr_test2.L33.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'arr_test2' (LLVM: arr_test2.L33.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'arr_test2'. Got LLVM Func: define internal ptr @arr_test2.L33.C1() {
entry:
  %tmp.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.15)
  call void @py_print_object(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.16, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.17, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.18, i32 10)
  %list_obj = call ptr @py_create_list(i32 3, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.19, i32 10)
  %binop_result = call ptr @py_object_multiply(ptr %list_obj, ptr %int_obj_from_str3), !py.type !3
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.20, i32 10)
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.21, i32 10)
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.22, i32 10)
  %list_obj7 = call ptr @py_create_list(i32 3, i32 7)
  %3 = call ptr @py_list_append(ptr %list_obj7, ptr %int_obj_from_str4)
  %4 = call ptr @py_list_append(ptr %list_obj7, ptr %int_obj_from_str5)
  %5 = call ptr @py_list_append(ptr %list_obj7, ptr %int_obj_from_str6)
  %dict_obj = call ptr @py_create_dict(i32 8, i32 2)
  %double_obj_from_str = call ptr @py_create_double_bystring(ptr @double_str_const.23, i32 10, i64 0)
  %int_obj_from_str8 = call ptr @py_create_int_bystring(ptr @int_str_const.24, i32 10)
  %unaryop_result = call ptr @py_object_negate(ptr %int_obj_from_str8)
  call void @py_dict_set_item(ptr %dict_obj, ptr %double_obj_from_str, ptr %unaryop_result)
  %list_obj9 = call ptr @py_create_list(i32 3, i32 7)
  %6 = call ptr @py_list_append(ptr %list_obj9, ptr %binop_result)
  %7 = call ptr @py_list_append(ptr %list_obj9, ptr %list_obj7)
  %8 = call ptr @py_list_append(ptr %list_obj9, ptr %dict_obj)
  %int_obj_from_str10 = call ptr @py_create_int_bystring(ptr @int_str_const.25, i32 10)
  %binop_result11 = call ptr @py_object_multiply(ptr %list_obj9, ptr %int_obj_from_str10), !py.type !3
  store ptr %binop_result11, ptr %tmp.addr, align 8
  call void @py_incref(ptr %binop_result11)
  %tmp_val = load ptr, ptr %tmp.addr, align 8
  %int_obj_from_str12 = call ptr @py_create_int_bystring(ptr @int_str_const.26, i32 10)
  %list_item = call ptr @py_list_get_item(ptr %tmp_val, ptr %int_obj_from_str12)
  %int_obj_from_str13 = call ptr @py_create_int_bystring(ptr @int_str_const.27, i32 10)
  %index_result = call ptr @py_object_index(ptr %list_item, ptr %int_obj_from_str13)
  call void @py_print_object(ptr %index_result)
  %tmp_val14 = load ptr, ptr %tmp.addr, align 8
  %int_obj_from_str15 = call ptr @py_create_int_bystring(ptr @int_str_const.28, i32 10)
  %list_item16 = call ptr @py_list_get_item(ptr %tmp_val14, ptr %int_obj_from_str15)
  %double_obj_from_str17 = call ptr @py_create_double_bystring(ptr @double_str_const.29, i32 10, i64 0)
  %index_result18 = call ptr @py_object_index(ptr %list_item16, ptr %double_obj_from_str17)
  call void @py_print_object(ptr %index_result18)
  %int_obj_from_str19 = call ptr @py_create_int_bystring(ptr @int_str_const.30, i32 10)
  ret ptr %int_obj_from_str19
}
 ('arr_test2.L33.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'arr_test2'...
Debug [CodeGenType]: Resolved static FunctionType for 'arr_test2' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'arr_test2'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'arr_test2.L33.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'arr_test2'. Value:   %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'arr_test2' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @arr_test2_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @arr_test2_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'arr_test2' to storage: @arr_test2_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'arr_test2'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'arr_test2'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 43 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'list_modification_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'list_modification_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'list_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'list_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'list_modification_test.L43.C1' for Python name 'list_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'list_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'list_modification_test.L43.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: list_modification_test.L43.C1 with name 'list_modification_test.L43.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436328512 -> LLVM Func list_modification_test.L43.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'list_modification_test.L43.C1'...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: list_modification_test.L43.C1
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 35
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 35
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 37
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 37
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 39
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 39
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 41
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 43
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'list_modification_test.L43.C1'. Last block: entry
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'list_modification_test.L43.C1'...
[HdlFuncDef] CurFunc: list_modification_test.L43.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'list_modification_test.L43.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'list_modification_test.L43.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'list_modification_test' (LLVM: list_modification_test.L43.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'list_modification_test'. Got LLVM Func: define internal ptr @list_modification_test.L43.C1() {
entry:
  %my_list.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.31)
  call void @py_print_object(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.32, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.33, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.34, i32 10)
  %list_obj = call ptr @py_create_list(i32 3, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  store ptr %list_obj, ptr %my_list.addr, align 8
  call void @py_incref(ptr %list_obj)
  %my_list_val = load ptr, ptr %my_list.addr, align 8
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.35, i32 10)
  %list_item = call ptr @py_list_get_item(ptr %my_list_val, ptr %int_obj_from_str3)
  call void @py_print_object(ptr %list_item)
  %my_list_val4 = load ptr, ptr %my_list.addr, align 8
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.36, i32 10)
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.37, i32 10)
  call void @py_object_set_index(ptr %my_list_val4, ptr %int_obj_from_str5, ptr %int_obj_from_str6)
  %my_list_val7 = load ptr, ptr %my_list.addr, align 8
  %int_obj_from_str8 = call ptr @py_create_int_bystring(ptr @int_str_const.38, i32 10)
  %list_item9 = call ptr @py_list_get_item(ptr %my_list_val7, ptr %int_obj_from_str8)
  call void @py_print_object(ptr %list_item9)
  %my_list_val10 = load ptr, ptr %my_list.addr, align 8
  %int_obj_from_str11 = call ptr @py_create_int_bystring(ptr @int_str_const.39, i32 10)
  %my_list_val12 = load ptr, ptr %my_list.addr, align 8
  %int_obj_from_str13 = call ptr @py_create_int_bystring(ptr @int_str_const.40, i32 10)
  %list_item14 = call ptr @py_list_get_item(ptr %my_list_val12, ptr %int_obj_from_str13)
  call void @py_object_set_index(ptr %my_list_val10, ptr %int_obj_from_str11, ptr %list_item14)
  %my_list_val15 = load ptr, ptr %my_list.addr, align 8
  %int_obj_from_str16 = call ptr @py_create_int_bystring(ptr @int_str_const.41, i32 10)
  %list_item17 = call ptr @py_list_get_item(ptr %my_list_val15, ptr %int_obj_from_str16)
  call void @py_print_object(ptr %list_item17)
  %int_obj_from_str18 = call ptr @py_create_int_bystring(ptr @int_str_const.42, i32 10)
  ret ptr %int_obj_from_str18
}
 ('list_modification_test.L43.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'list_modification_test'...
Debug [CodeGenType]: Resolved static FunctionType for 'list_modification_test' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'list_modification_test'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'list_modification_test.L43.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'list_modification_test'. Value:   %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'list_modification_test' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @list_modification_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @list_modification_test_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'list_modification_test' to storage: @list_modification_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'list_modification_test'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'list_modification_test'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 59 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'dict_modification_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'dict_modification_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'dict_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'dict_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'dict_modification_test.L59.C1' for Python name 'dict_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'dict_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'dict_modification_test.L59.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: dict_modification_test.L59.C1 with name 'dict_modification_test.L59.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436334096 -> LLVM Func dict_modification_test.L59.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'dict_modification_test.L59.C1'...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: dict_modification_test.L59.C1
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 45
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 45
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 47
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 47
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 49
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 49
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 51
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 51
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 53
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 54
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 55
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 57
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 59
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'dict_modification_test.L59.C1'. Last block: entry
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'dict_modification_test.L59.C1'...
[HdlFuncDef] CurFunc: dict_modification_test.L59.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'dict_modification_test.L59.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'dict_modification_test.L59.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'dict_modification_test' (LLVM: dict_modification_test.L59.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'dict_modification_test'. Got LLVM Func: define internal ptr @dict_modification_test.L59.C1() {
entry:
  %new_key.addr = alloca ptr, align 8
  %my_dict.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.43)
  call void @py_print_object(ptr %str_obj)
  %dict_obj = call ptr @py_create_dict(i32 8, i32 4)
  %str_obj1 = call ptr @py_create_string(ptr @str_const.44)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.45, i32 10)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj1, ptr %int_obj_from_str)
  %str_obj2 = call ptr @py_create_string(ptr @str_const.46)
  %double_obj_from_str = call ptr @py_create_double_bystring(ptr @double_str_const.47, i32 10, i64 0)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj2, ptr %double_obj_from_str)
  store ptr %dict_obj, ptr %my_dict.addr, align 8
  call void @py_incref(ptr %dict_obj)
  %my_dict_val = load ptr, ptr %my_dict.addr, align 8
  %str_obj3 = call ptr @py_create_string(ptr @str_const.48)
  %dict_item = call ptr @py_dict_get_item(ptr %my_dict_val, ptr %str_obj3)
  call void @py_print_object(ptr %dict_item)
  %my_dict_val4 = load ptr, ptr %my_dict.addr, align 8
  %str_obj5 = call ptr @py_create_string(ptr @str_const.49)
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.50, i32 10)
  call void @py_object_set_index(ptr %my_dict_val4, ptr %str_obj5, ptr %int_obj_from_str6)
  %my_dict_val7 = load ptr, ptr %my_dict.addr, align 8
  %str_obj8 = call ptr @py_create_string(ptr @str_const.51)
  %dict_item9 = call ptr @py_dict_get_item(ptr %my_dict_val7, ptr %str_obj8)
  call void @py_print_object(ptr %dict_item9)
  %my_dict_val10 = load ptr, ptr %my_dict.addr, align 8
  %str_obj11 = call ptr @py_create_string(ptr @str_const.52)
  %str_obj12 = call ptr @py_create_string(ptr @str_const.53)
  call void @py_object_set_index(ptr %my_dict_val10, ptr %str_obj11, ptr %str_obj12)
  %my_dict_val13 = load ptr, ptr %my_dict.addr, align 8
  %str_obj14 = call ptr @py_create_string(ptr @str_const.54)
  %dict_item15 = call ptr @py_dict_get_item(ptr %my_dict_val13, ptr %str_obj14)
  call void @py_print_object(ptr %dict_item15)
  %my_dict_val16 = load ptr, ptr %my_dict.addr, align 8
  %str_obj17 = call ptr @py_create_string(ptr @str_const.55)
  %my_dict_val18 = load ptr, ptr %my_dict.addr, align 8
  %str_obj19 = call ptr @py_create_string(ptr @str_const.56)
  %dict_item20 = call ptr @py_dict_get_item(ptr %my_dict_val18, ptr %str_obj19)
  call void @py_object_set_index(ptr %my_dict_val16, ptr %str_obj17, ptr %dict_item20)
  %my_dict_val21 = load ptr, ptr %my_dict.addr, align 8
  %str_obj22 = call ptr @py_create_string(ptr @str_const.57)
  %dict_item23 = call ptr @py_dict_get_item(ptr %my_dict_val21, ptr %str_obj22)
  call void @py_print_object(ptr %dict_item23)
  %str_obj24 = call ptr @py_create_string(ptr @str_const.58)
  store ptr %str_obj24, ptr %new_key.addr, align 8
  call void @py_incref(ptr %str_obj24)
  %my_dict_val25 = load ptr, ptr %my_dict.addr, align 8
  %new_key_val = load ptr, ptr %new_key.addr, align 8
  %int_obj_from_str26 = call ptr @py_create_int_bystring(ptr @int_str_const.59, i32 10)
  call void @py_object_set_index(ptr %my_dict_val25, ptr %new_key_val, ptr %int_obj_from_str26)
  %my_dict_val27 = load ptr, ptr %my_dict.addr, align 8
  %str_obj28 = call ptr @py_create_string(ptr @str_const.60)
  %dict_item29 = call ptr @py_dict_get_item(ptr %my_dict_val27, ptr %str_obj28)
  call void @py_print_object(ptr %dict_item29)
  %int_obj_from_str30 = call ptr @py_create_int_bystring(ptr @int_str_const.61, i32 10)
  ret ptr %int_obj_from_str30
}
 ('dict_modification_test.L59.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'dict_modification_test'...
Debug [CodeGenType]: Resolved static FunctionType for 'dict_modification_test' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'dict_modification_test'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'dict_modification_test.L59.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'dict_modification_test'. Value:   %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'dict_modification_test' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @dict_modification_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @dict_modification_test_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'dict_modification_test' to storage: @dict_modification_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'dict_modification_test'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'dict_modification_test'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 78 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'nested_container_access_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'nested_container_access_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'nested_container_access_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'nested_container_access_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'nested_container_access_test.L78.C1' for Python name 'nested_container_access_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'nested_container_access_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'nested_container_access_test.L78.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: nested_container_access_test.L78.C1 with name 'nested_container_access_test.L78.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436346336 -> LLVM Func nested_container_access_test.L78.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'nested_container_access_test.L78.C1'...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: nested_container_access_test.L78.C1
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 61
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 61
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 63
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 64
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 65
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 66
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 66
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 68
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 68
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 70
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 71
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 73
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 74
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 76
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 78
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'nested_container_access_test.L78.C1'. Last block: entry
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'nested_container_access_test.L78.C1'...
[HdlFuncDef] CurFunc: nested_container_access_test.L78.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'nested_container_access_test.L78.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'nested_container_access_test.L78.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'nested_container_access_test' (LLVM: nested_container_access_test.L78.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'nested_container_access_test'. Got LLVM Func: define internal ptr @nested_container_access_test.L78.C1() {
entry:
  %nested_list.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.62)
  call void @py_print_object(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.63, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.64, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.65, i32 10)
  %list_obj = call ptr @py_create_list(i32 2, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %dict_obj = call ptr @py_create_dict(i32 8, i32 4)
  %str_obj3 = call ptr @py_create_string(ptr @str_const.66)
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.67, i32 10)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj3, ptr %int_obj_from_str4)
  %str_obj5 = call ptr @py_create_string(ptr @str_const.68)
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.69, i32 10)
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.70, i32 10)
  %list_obj8 = call ptr @py_create_list(i32 2, i32 7)
  %2 = call ptr @py_list_append(ptr %list_obj8, ptr %int_obj_from_str6)
  %3 = call ptr @py_list_append(ptr %list_obj8, ptr %int_obj_from_str7)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj5, ptr %list_obj8)
  %list_obj9 = call ptr @py_create_list(i32 3, i32 7)
  %4 = call ptr @py_list_append(ptr %list_obj9, ptr %int_obj_from_str)
  %5 = call ptr @py_list_append(ptr %list_obj9, ptr %list_obj)
  %6 = call ptr @py_list_append(ptr %list_obj9, ptr %dict_obj)
  store ptr %list_obj9, ptr %nested_list.addr, align 8
  call void @py_incref(ptr %list_obj9)
  %nested_list_val = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str10 = call ptr @py_create_int_bystring(ptr @int_str_const.71, i32 10)
  %list_item = call ptr @py_list_get_item(ptr %nested_list_val, ptr %int_obj_from_str10)
  call void @py_print_object(ptr %list_item)
  %nested_list_val11 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str12 = call ptr @py_create_int_bystring(ptr @int_str_const.72, i32 10)
  %list_item13 = call ptr @py_list_get_item(ptr %nested_list_val11, ptr %int_obj_from_str12)
  %int_obj_from_str14 = call ptr @py_create_int_bystring(ptr @int_str_const.73, i32 10)
  %index_result = call ptr @py_object_index(ptr %list_item13, ptr %int_obj_from_str14)
  call void @py_print_object(ptr %index_result)
  %nested_list_val15 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str16 = call ptr @py_create_int_bystring(ptr @int_str_const.74, i32 10)
  %list_item17 = call ptr @py_list_get_item(ptr %nested_list_val15, ptr %int_obj_from_str16)
  %str_obj18 = call ptr @py_create_string(ptr @str_const.75)
  %index_result19 = call ptr @py_object_index(ptr %list_item17, ptr %str_obj18)
  call void @py_print_object(ptr %index_result19)
  %nested_list_val20 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str21 = call ptr @py_create_int_bystring(ptr @int_str_const.76, i32 10)
  %list_item22 = call ptr @py_list_get_item(ptr %nested_list_val20, ptr %int_obj_from_str21)
  %str_obj23 = call ptr @py_create_string(ptr @str_const.77)
  %index_result24 = call ptr @py_object_index(ptr %list_item22, ptr %str_obj23)
  %int_obj_from_str25 = call ptr @py_create_int_bystring(ptr @int_str_const.78, i32 10)
  %index_result26 = call ptr @py_object_index(ptr %index_result24, ptr %int_obj_from_str25)
  call void @py_print_object(ptr %index_result26)
  %nested_list_val27 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str28 = call ptr @py_create_int_bystring(ptr @int_str_const.79, i32 10)
  %list_item29 = call ptr @py_list_get_item(ptr %nested_list_val27, ptr %int_obj_from_str28)
  %int_obj_from_str30 = call ptr @py_create_int_bystring(ptr @int_str_const.80, i32 10)
  %int_obj_from_str31 = call ptr @py_create_int_bystring(ptr @int_str_const.81, i32 10)
  call void @py_object_set_index(ptr %list_item29, ptr %int_obj_from_str30, ptr %int_obj_from_str31)
  %nested_list_val32 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str33 = call ptr @py_create_int_bystring(ptr @int_str_const.82, i32 10)
  %list_item34 = call ptr @py_list_get_item(ptr %nested_list_val32, ptr %int_obj_from_str33)
  %int_obj_from_str35 = call ptr @py_create_int_bystring(ptr @int_str_const.83, i32 10)
  %index_result36 = call ptr @py_object_index(ptr %list_item34, ptr %int_obj_from_str35)
  call void @py_print_object(ptr %index_result36)
  %nested_list_val37 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str38 = call ptr @py_create_int_bystring(ptr @int_str_const.84, i32 10)
  %list_item39 = call ptr @py_list_get_item(ptr %nested_list_val37, ptr %int_obj_from_str38)
  %str_obj40 = call ptr @py_create_string(ptr @str_const.85)
  %index_result41 = call ptr @py_object_index(ptr %list_item39, ptr %str_obj40)
  %int_obj_from_str42 = call ptr @py_create_int_bystring(ptr @int_str_const.86, i32 10)
  %int_obj_from_str43 = call ptr @py_create_int_bystring(ptr @int_str_const.87, i32 10)
  call void @py_object_set_index(ptr %index_result41, ptr %int_obj_from_str42, ptr %int_obj_from_str43)
  %nested_list_val44 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str45 = call ptr @py_create_int_bystring(ptr @int_str_const.88, i32 10)
  %list_item46 = call ptr @py_list_get_item(ptr %nested_list_val44, ptr %int_obj_from_str45)
  %str_obj47 = call ptr @py_create_string(ptr @str_const.89)
  %index_result48 = call ptr @py_object_index(ptr %list_item46, ptr %str_obj47)
  %int_obj_from_str49 = call ptr @py_create_int_bystring(ptr @int_str_const.90, i32 10)
  %index_result50 = call ptr @py_object_index(ptr %index_result48, ptr %int_obj_from_str49)
  call void @py_print_object(ptr %index_result50)
  %nested_list_val51 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str52 = call ptr @py_create_int_bystring(ptr @int_str_const.91, i32 10)
  %list_item53 = call ptr @py_list_get_item(ptr %nested_list_val51, ptr %int_obj_from_str52)
  %str_obj54 = call ptr @py_create_string(ptr @str_const.92)
  %int_obj_from_str55 = call ptr @py_create_int_bystring(ptr @int_str_const.93, i32 10)
  %int_obj_from_str56 = call ptr @py_create_int_bystring(ptr @int_str_const.94, i32 10)
  %list_obj57 = call ptr @py_create_list(i32 2, i32 7)
  %7 = call ptr @py_list_append(ptr %list_obj57, ptr %int_obj_from_str55)
  %8 = call ptr @py_list_append(ptr %list_obj57, ptr %int_obj_from_str56)
  call void @py_object_set_index(ptr %list_item53, ptr %str_obj54, ptr %list_obj57)
  %nested_list_val58 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str59 = call ptr @py_create_int_bystring(ptr @int_str_const.95, i32 10)
  %list_item60 = call ptr @py_list_get_item(ptr %nested_list_val58, ptr %int_obj_from_str59)
  %str_obj61 = call ptr @py_create_string(ptr @str_const.96)
  %index_result62 = call ptr @py_object_index(ptr %list_item60, ptr %str_obj61)
  %int_obj_from_str63 = call ptr @py_create_int_bystring(ptr @int_str_const.97, i32 10)
  %index_result64 = call ptr @py_object_index(ptr %index_result62, ptr %int_obj_from_str63)
  call void @py_print_object(ptr %index_result64)
  %nested_list_val65 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str66 = call ptr @py_create_int_bystring(ptr @int_str_const.98, i32 10)
  %list_item67 = call ptr @py_list_get_item(ptr %nested_list_val65, ptr %int_obj_from_str66)
  %str_obj68 = call ptr @py_create_string(ptr @str_const.99)
  %index_result69 = call ptr @py_object_index(ptr %list_item67, ptr %str_obj68)
  %int_obj_from_str70 = call ptr @py_create_int_bystring(ptr @int_str_const.100, i32 10)
  %int_obj_from_str71 = call ptr @py_create_int_bystring(ptr @int_str_const.101, i32 10)
  call void @py_object_set_index(ptr %index_result69, ptr %int_obj_from_str70, ptr %int_obj_from_str71)
  %nested_list_val72 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str73 = call ptr @py_create_int_bystring(ptr @int_str_const.102, i32 10)
  %list_item74 = call ptr @py_list_get_item(ptr %nested_list_val72, ptr %int_obj_from_str73)
  %str_obj75 = call ptr @py_create_string(ptr @str_const.103)
  %index_result76 = call ptr @py_object_index(ptr %list_item74, ptr %str_obj75)
  %int_obj_from_str77 = call ptr @py_create_int_bystring(ptr @int_str_const.104, i32 10)
  %index_result78 = call ptr @py_object_index(ptr %index_result76, ptr %int_obj_from_str77)
  call void @py_print_object(ptr %index_result78)
  %int_obj_from_str79 = call ptr @py_create_int_bystring(ptr @int_str_const.105, i32 10)
  ret ptr %int_obj_from_str79
}
 ('nested_container_access_test.L78.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'nested_container_access_test'...
Debug [CodeGenType]: Resolved static FunctionType for 'nested_container_access_test' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'nested_container_access_test'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'nested_container_access_test.L78.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'nested_container_access_test'. Value:   %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'nested_container_access_test' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @nested_container_access_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @nested_container_access_test_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'nested_container_access_test' to storage: @nested_container_access_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'nested_container_access_test'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'nested_container_access_test'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 97 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'container_assignment_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'container_assignment_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'container_assignment_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'container_assignment_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'container_assignment_test.L97.C1' for Python name 'container_assignment_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'container_assignment_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'container_assignment_test.L97.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: container_assignment_test.L97.C1 with name 'container_assignment_test.L97.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436351920 -> LLVM Func container_assignment_test.L97.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'container_assignment_test.L97.C1'...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: container_assignment_test.L97.C1
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 80
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 80
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 81
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 82
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 84
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 86
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 86
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 87
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 88
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 90
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 91
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 20 at line 91
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 93
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 95
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'container_assignment_test.L97.C1'. Last block: entry
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'container_assignment_test.L97.C1'...
[HdlFuncDef] CurFunc: container_assignment_test.L97.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'container_assignment_test.L97.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'container_assignment_test.L97.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'container_assignment_test' (LLVM: container_assignment_test.L97.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'container_assignment_test'. Got LLVM Func: define internal ptr @container_assignment_test.L97.C1() {
entry:
  %dict_b.addr = alloca ptr, align 8
  %dict_a.addr = alloca ptr, align 8
  %list_b.addr = alloca ptr, align 8
  %list_a.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.106)
  call void @py_print_object(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.107, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.108, i32 10)
  %list_obj = call ptr @py_create_list(i32 2, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  store ptr %list_obj, ptr %list_a.addr, align 8
  call void @py_incref(ptr %list_obj)
  %list_a_val = load ptr, ptr %list_a.addr, align 8
  store ptr %list_a_val, ptr %list_b.addr, align 8
  call void @py_incref(ptr %list_a_val)
  %list_b_val = load ptr, ptr %list_b.addr, align 8
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.109, i32 10)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.110, i32 10)
  call void @py_object_set_index(ptr %list_b_val, ptr %int_obj_from_str2, ptr %int_obj_from_str3)
  %list_a_val4 = load ptr, ptr %list_a.addr, align 8
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.111, i32 10)
  %list_item = call ptr @py_list_get_item(ptr %list_a_val4, ptr %int_obj_from_str5)
  call void @py_print_object(ptr %list_item)
  %list_b_val6 = load ptr, ptr %list_b.addr, align 8
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.112, i32 10)
  %list_item8 = call ptr @py_list_get_item(ptr %list_b_val6, ptr %int_obj_from_str7)
  call void @py_print_object(ptr %list_item8)
  %dict_obj = call ptr @py_create_dict(i32 8, i32 4)
  %str_obj9 = call ptr @py_create_string(ptr @str_const.113)
  %int_obj_from_str10 = call ptr @py_create_int_bystring(ptr @int_str_const.114, i32 10)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj9, ptr %int_obj_from_str10)
  store ptr %dict_obj, ptr %dict_a.addr, align 8
  call void @py_incref(ptr %dict_obj)
  %dict_a_val = load ptr, ptr %dict_a.addr, align 8
  store ptr %dict_a_val, ptr %dict_b.addr, align 8
  call void @py_incref(ptr %dict_a_val)
  %dict_b_val = load ptr, ptr %dict_b.addr, align 8
  %str_obj11 = call ptr @py_create_string(ptr @str_const.115)
  %int_obj_from_str12 = call ptr @py_create_int_bystring(ptr @int_str_const.116, i32 10)
  call void @py_object_set_index(ptr %dict_b_val, ptr %str_obj11, ptr %int_obj_from_str12)
  %dict_a_val13 = load ptr, ptr %dict_a.addr, align 8
  %str_obj14 = call ptr @py_create_string(ptr @str_const.117)
  %dict_item = call ptr @py_dict_get_item(ptr %dict_a_val13, ptr %str_obj14)
  call void @py_print_object(ptr %dict_item)
  %dict_b_val15 = load ptr, ptr %dict_b.addr, align 8
  %str_obj16 = call ptr @py_create_string(ptr @str_const.118)
  %dict_item17 = call ptr @py_dict_get_item(ptr %dict_b_val15, ptr %str_obj16)
  call void @py_print_object(ptr %dict_item17)
  %dict_b_val18 = load ptr, ptr %dict_b.addr, align 8
  %str_obj19 = call ptr @py_create_string(ptr @str_const.119)
  %int_obj_from_str20 = call ptr @py_create_int_bystring(ptr @int_str_const.120, i32 10)
  call void @py_object_set_index(ptr %dict_b_val18, ptr %str_obj19, ptr %int_obj_from_str20)
  %dict_a_val21 = load ptr, ptr %dict_a.addr, align 8
  %str_obj22 = call ptr @py_create_string(ptr @str_const.121)
  %dict_item23 = call ptr @py_dict_get_item(ptr %dict_a_val21, ptr %str_obj22)
  call void @py_print_object(ptr %dict_item23)
  %int_obj_from_str24 = call ptr @py_create_int_bystring(ptr @int_str_const.122, i32 10)
  ret ptr %int_obj_from_str24
}
 ('container_assignment_test.L97.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'container_assignment_test'...
Debug [CodeGenType]: Resolved static FunctionType for 'container_assignment_test' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'container_assignment_test'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'container_assignment_test.L97.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'container_assignment_test'. Value:   %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'container_assignment_test' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @container_assignment_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @container_assignment_test_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'container_assignment_test' to storage: @container_assignment_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'container_assignment_test'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'container_assignment_test'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 114 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'complex_list_while_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'complex_list_while_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'complex_list_while_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'complex_list_while_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'complex_list_while_test.L114.C1' for Python name 'complex_list_while_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'complex_list_while_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'complex_list_while_test.L114.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: complex_list_while_test.L114.C1 with name 'complex_list_while_test.L114.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436473472 -> LLVM Func complex_list_while_test.L114.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'complex_list_while_test.L114.C1'...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: complex_list_while_test.L114.C1
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 99
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 101
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 102
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 103
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 111
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: while.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval14 = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from while.body on   %condval14 = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement exists (not null). Kind: 11
DEBUG:        Else statement is NOT IfStmtAST. Treating as final 'else' block.
DEBUG:            Else statement is BlockStmtAST. Calling handleBlock(..., createNewScope=false)...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:            Returned from handleBlock for else block. Current block: else
DEBUG:        Final 'else' block (else) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 112
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 4 at line 114
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Checking for default return for 'complex_list_while_test.L114.C1'. Last block: while.end
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Cleaning up function resources for 'complex_list_while_test.L114.C1'...
[HdlFuncDef] CurFunc: complex_list_while_test.L114.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'complex_list_while_test.L114.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'complex_list_while_test.L114.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'complex_list_while_test' (LLVM: complex_list_while_test.L114.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'complex_list_while_test'. Got LLVM Func: define internal ptr @complex_list_while_test.L114.C1() {
entry:
  %limit.addr = alloca ptr, align 8
  %i.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.123)
  call void @py_print_object(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.124, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.125, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.126, i32 10)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.127, i32 10)
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.128, i32 10)
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.129, i32 10)
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.130, i32 10)
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.131, i32 10)
  %int_obj_from_str8 = call ptr @py_create_int_bystring(ptr @int_str_const.132, i32 10)
  %int_obj_from_str9 = call ptr @py_create_int_bystring(ptr @int_str_const.133, i32 10)
  %list_obj = call ptr @py_create_list(i32 10, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %3 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str3)
  %4 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str4)
  %5 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str5)
  %6 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str6)
  %7 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str7)
  %8 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str8)
  %9 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str9)
  store ptr %list_obj, ptr %data.addr, align 8
  call void @py_incref(ptr %list_obj)
  %int_obj_from_str10 = call ptr @py_create_int_bystring(ptr @int_str_const.134, i32 10)
  store ptr %int_obj_from_str10, ptr %i.addr, align 8
  call void @py_incref(ptr %int_obj_from_str10)
  %int_obj_from_str11 = call ptr @py_create_int_bystring(ptr @int_str_const.135, i32 10)
  store ptr %int_obj_from_str11, ptr %limit.addr, align 8
  call void @py_incref(ptr %int_obj_from_str11)
  %i_init = load ptr, ptr %i.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %ifcont, %entry
  %i.phi = phi ptr [ %i_init, %entry ], [ %i_latch_val, %ifcont ]
  %limit_val = load ptr, ptr %limit.addr, align 8
  %cmp_result = call ptr @py_object_compare(ptr %i.phi, ptr %limit_val, i32 2), !py.type !0
  %condval = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %data_val = load ptr, ptr %data.addr, align 8
  %i_val = load ptr, ptr %i.addr, align 8
  %list_item = call ptr @py_list_get_item(ptr %data_val, ptr %i_val)
  %int_obj_from_str12 = call ptr @py_create_int_bystring(ptr @int_str_const.136, i32 10)
  %any_op_result = call ptr @py_object_modulo(ptr %list_item, ptr %int_obj_from_str12), !py.type !2
  %int_obj_from_str13 = call ptr @py_create_int_bystring(ptr @int_str_const.137, i32 10)
  %any_cmp_result = call ptr @py_object_compare(ptr %any_op_result, ptr %int_obj_from_str13, i32 0), !py.type !0
  %condval14 = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval14, label %then, label %else

while.end:                                        ; preds = %while.cond
  %data_val34 = load ptr, ptr %data.addr, align 8
  call void @py_print_object(ptr %data_val34)
  %int_obj_from_str35 = call ptr @py_create_int_bystring(ptr @int_str_const.141, i32 10)
  ret ptr %int_obj_from_str35

ifcont:                                           ; preds = %else, %then
  %data_val29 = load ptr, ptr %data.addr, align 8
  %i_val30 = load ptr, ptr %i.addr, align 8
  %list_item31 = call ptr @py_list_get_item(ptr %data_val29, ptr %i_val30)
  call void @py_print_object(ptr %list_item31)
  %i_val32 = load ptr, ptr %i.addr, align 8
  %int_obj_from_str33 = call ptr @py_create_int_bystring(ptr @int_str_const.140, i32 10)
  %binop_result = call ptr @py_object_add(ptr %i_val32, ptr %int_obj_from_str33), !py.type !1
  %i_old = load ptr, ptr %i.addr, align 8
  call void @py_decref(ptr %i_old)
  store ptr %binop_result, ptr %i.addr, align 8
  call void @py_incref(ptr %binop_result)
  %i_latch_val = load ptr, ptr %i.addr, align 8
  br label %while.cond

then:                                             ; preds = %while.body
  %data_val15 = load ptr, ptr %data.addr, align 8
  %i_val16 = load ptr, ptr %i.addr, align 8
  %data_val17 = load ptr, ptr %data.addr, align 8
  %i_val18 = load ptr, ptr %i.addr, align 8
  %list_item19 = call ptr @py_list_get_item(ptr %data_val17, ptr %i_val18)
  %int_obj_from_str20 = call ptr @py_create_int_bystring(ptr @int_str_const.138, i32 10)
  %any_op_result21 = call ptr @py_object_multiply(ptr %list_item19, ptr %int_obj_from_str20), !py.type !2
  call void @py_object_set_index(ptr %data_val15, ptr %i_val16, ptr %any_op_result21)
  br label %ifcont

else:                                             ; preds = %while.body
  %data_val22 = load ptr, ptr %data.addr, align 8
  %i_val23 = load ptr, ptr %i.addr, align 8
  %data_val24 = load ptr, ptr %data.addr, align 8
  %i_val25 = load ptr, ptr %i.addr, align 8
  %list_item26 = call ptr @py_list_get_item(ptr %data_val24, ptr %i_val25)
  %int_obj_from_str27 = call ptr @py_create_int_bystring(ptr @int_str_const.139, i32 10)
  %any_op_result28 = call ptr @py_object_add(ptr %list_item26, ptr %int_obj_from_str27), !py.type !2
  call void @py_object_set_index(ptr %data_val22, ptr %i_val23, ptr %any_op_result28)
  br label %ifcont
}
 ('complex_list_while_test.L114.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'complex_list_while_test'...
Debug [CodeGenType]: Resolved static FunctionType for 'complex_list_while_test' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'complex_list_while_test'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'complex_list_while_test.L114.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'complex_list_while_test'. Value:   %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'complex_list_while_test' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @complex_list_while_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @complex_list_while_test_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'complex_list_while_test' to storage: @complex_list_while_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'complex_list_while_test'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'complex_list_while_test'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 144 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'complex_dict_while_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'complex_dict_while_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'complex_dict_while_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'complex_dict_while_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'complex_dict_while_test.L144.C1' for Python name 'complex_dict_while_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'complex_dict_while_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'complex_dict_while_test.L144.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: complex_dict_while_test.L144.C1 with name 'complex_dict_while_test.L144.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436482320 -> LLVM Func complex_dict_while_test.L144.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'complex_dict_while_test.L144.C1'...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: complex_dict_while_test.L144.C1
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 116
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 116
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 117
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 134
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 135
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 6 at line 136
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 3 at line 141
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: while.body34, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval47 = call i1 @py_object_to_bool(ptr %any_cmp_result46)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from while.body34 on   %condval47 = call i1 @py_object_to_bool(ptr %any_cmp_result46) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Body: Handling Stmt Kind 5 at line 142
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Body: Handling Stmt Kind 4 at line 144
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Checking for default return for 'complex_dict_while_test.L144.C1'. Last block: while.end35
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Cleaning up function resources for 'complex_dict_while_test.L144.C1'...
[HdlFuncDef] CurFunc: complex_dict_while_test.L144.C1, CurBlock: while.end35, CurIP: {Block: while.end35, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'complex_dict_while_test.L144.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'complex_dict_while_test.L144.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'complex_dict_while_test' (LLVM: complex_dict_while_test.L144.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'complex_dict_while_test'. Got LLVM Func: define internal ptr @complex_dict_while_test.L144.C1() {
entry:
  %j.addr = alloca ptr, align 8
  %current_count.addr = alloca ptr, align 8
  %key_str.addr = alloca ptr, align 8
  %i.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.142)
  call void @py_print_object(ptr %str_obj)
  %dict_obj = call ptr @py_create_dict(i32 8, i32 4)
  %str_obj1 = call ptr @py_create_string(ptr @str_const.143)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.144, i32 10)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj1, ptr %int_obj_from_str)
  %str_obj2 = call ptr @py_create_string(ptr @str_const.145)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.146, i32 10)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj2, ptr %int_obj_from_str3)
  %str_obj4 = call ptr @py_create_string(ptr @str_const.147)
  %dict_obj5 = call ptr @py_create_dict(i32 8, i32 7)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj4, ptr %dict_obj5)
  store ptr %dict_obj, ptr %data.addr, align 8
  call void @py_incref(ptr %dict_obj)
  %int_obj_from_str6 = call ptr @py_create_int_bystring(ptr @int_str_const.148, i32 10)
  store ptr %int_obj_from_str6, ptr %i.addr, align 8
  call void @py_incref(ptr %int_obj_from_str6)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %data_val = load ptr, ptr %data.addr, align 8
  %str_obj7 = call ptr @py_create_string(ptr @str_const.149)
  %dict_item = call ptr @py_dict_get_item(ptr %data_val, ptr %str_obj7)
  %data_val8 = load ptr, ptr %data.addr, align 8
  %str_obj9 = call ptr @py_create_string(ptr @str_const.150)
  %dict_item10 = call ptr @py_dict_get_item(ptr %data_val8, ptr %str_obj9)
  %any_cmp_result = call ptr @py_object_compare(ptr %dict_item, ptr %dict_item10, i32 2), !py.type !0
  %condval = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %str_obj11 = call ptr @py_create_string(ptr @str_const.151)
  store ptr %str_obj11, ptr %key_str.addr, align 8
  call void @py_incref(ptr %str_obj11)
  %data_val12 = load ptr, ptr %data.addr, align 8
  %str_obj13 = call ptr @py_create_string(ptr @str_const.152)
  %dict_item14 = call ptr @py_dict_get_item(ptr %data_val12, ptr %str_obj13)
  store ptr %dict_item14, ptr %current_count.addr, align 8
  call void @py_incref(ptr %dict_item14)
  %data_val15 = load ptr, ptr %data.addr, align 8
  %str_obj16 = call ptr @py_create_string(ptr @str_const.153)
  %dict_item17 = call ptr @py_dict_get_item(ptr %data_val15, ptr %str_obj16)
  %current_count_val = load ptr, ptr %current_count.addr, align 8
  %current_count_val18 = load ptr, ptr %current_count.addr, align 8
  %current_count_val19 = load ptr, ptr %current_count.addr, align 8
  %any_op_result = call ptr @py_object_multiply(ptr %current_count_val18, ptr %current_count_val19), !py.type !2
  call void @py_object_set_index(ptr %dict_item17, ptr %current_count_val, ptr %any_op_result)
  %data_val20 = load ptr, ptr %data.addr, align 8
  %str_obj21 = call ptr @py_create_string(ptr @str_const.154)
  %dict_item22 = call ptr @py_dict_get_item(ptr %data_val20, ptr %str_obj21)
  %current_count_val23 = load ptr, ptr %current_count.addr, align 8
  %index_result = call ptr @py_object_index(ptr %dict_item22, ptr %current_count_val23)
  call void @py_print_object(ptr %index_result)
  %data_val24 = load ptr, ptr %data.addr, align 8
  %str_obj25 = call ptr @py_create_string(ptr @str_const.155)
  %data_val26 = load ptr, ptr %data.addr, align 8
  %str_obj27 = call ptr @py_create_string(ptr @str_const.156)
  %dict_item28 = call ptr @py_dict_get_item(ptr %data_val26, ptr %str_obj27)
  %int_obj_from_str29 = call ptr @py_create_int_bystring(ptr @int_str_const.157, i32 10)
  %any_op_result30 = call ptr @py_object_add(ptr %dict_item28, ptr %int_obj_from_str29), !py.type !2
  call void @py_object_set_index(ptr %data_val24, ptr %str_obj25, ptr %any_op_result30)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %data_val31 = load ptr, ptr %data.addr, align 8
  call void @py_print_object(ptr %data_val31)
  %int_obj_from_str32 = call ptr @py_create_int_bystring(ptr @int_str_const.158, i32 10)
  store ptr %int_obj_from_str32, ptr %j.addr, align 8
  call void @py_incref(ptr %int_obj_from_str32)
  %j_init = load ptr, ptr %j.addr, align 8
  br label %while.cond33

while.cond33:                                     ; preds = %ifcont, %while.end
  %j.phi = phi ptr [ %j_init, %while.end ], [ %j_latch_val, %ifcont ]
  %data_val36 = load ptr, ptr %data.addr, align 8
  %str_obj37 = call ptr @py_create_string(ptr @str_const.159)
  %dict_item38 = call ptr @py_dict_get_item(ptr %data_val36, ptr %str_obj37)
  %any_cmp_result39 = call ptr @py_object_compare(ptr %j.phi, ptr %dict_item38, i32 2), !py.type !0
  %condval40 = call i1 @py_object_to_bool(ptr %any_cmp_result39)
  br i1 %condval40, label %while.body34, label %while.end35

while.body34:                                     ; preds = %while.cond33
  %data_val41 = load ptr, ptr %data.addr, align 8
  %str_obj42 = call ptr @py_create_string(ptr @str_const.160)
  %dict_item43 = call ptr @py_dict_get_item(ptr %data_val41, ptr %str_obj42)
  %j_val = load ptr, ptr %j.addr, align 8
  %index_result44 = call ptr @py_object_index(ptr %dict_item43, ptr %j_val)
  %int_obj_from_str45 = call ptr @py_create_int_bystring(ptr @int_str_const.161, i32 10)
  %any_cmp_result46 = call ptr @py_object_compare(ptr %index_result44, ptr %int_obj_from_str45, i32 4), !py.type !0
  %condval47 = call i1 @py_object_to_bool(ptr %any_cmp_result46)
  br i1 %condval47, label %then, label %else

while.end35:                                      ; preds = %while.cond33
  %data_val55 = load ptr, ptr %data.addr, align 8
  call void @py_print_object(ptr %data_val55)
  %int_obj_from_str56 = call ptr @py_create_int_bystring(ptr @int_str_const.165, i32 10)
  ret ptr %int_obj_from_str56

ifcont:                                           ; preds = %else, %then
  %j_val53 = load ptr, ptr %j.addr, align 8
  %int_obj_from_str54 = call ptr @py_create_int_bystring(ptr @int_str_const.164, i32 10)
  %binop_result = call ptr @py_object_add(ptr %j_val53, ptr %int_obj_from_str54), !py.type !1
  %j_old = load ptr, ptr %j.addr, align 8
  call void @py_decref(ptr %j_old)
  store ptr %binop_result, ptr %j.addr, align 8
  call void @py_incref(ptr %binop_result)
  %j_latch_val = load ptr, ptr %j.addr, align 8
  br label %while.cond33

then:                                             ; preds = %while.body34
  %data_val48 = load ptr, ptr %data.addr, align 8
  %str_obj49 = call ptr @py_create_string(ptr @str_const.162)
  %dict_item50 = call ptr @py_dict_get_item(ptr %data_val48, ptr %str_obj49)
  %j_val51 = load ptr, ptr %j.addr, align 8
  %int_obj_from_str52 = call ptr @py_create_int_bystring(ptr @int_str_const.163, i32 10)
  %unaryop_result = call ptr @py_object_negate(ptr %int_obj_from_str52)
  call void @py_object_set_index(ptr %dict_item50, ptr %j_val51, ptr %unaryop_result)
  br label %ifcont

else:                                             ; preds = %while.body34
  br label %ifcont
}
 ('complex_dict_while_test.L144.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'complex_dict_while_test'...
Debug [CodeGenType]: Resolved static FunctionType for 'complex_dict_while_test' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'complex_dict_while_test'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'complex_dict_while_test.L144.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'complex_dict_while_test'. Value:   %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'complex_dict_while_test' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @complex_dict_while_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @complex_dict_while_test_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'complex_dict_while_test' to storage: @complex_dict_while_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'complex_dict_while_test'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'complex_dict_while_test'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 163 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'nested_loop_modification_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'nested_loop_modification_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'nested_loop_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'nested_loop_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'nested_loop_modification_test.L163.C1' for Python name 'nested_loop_modification_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'nested_loop_modification_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'nested_loop_modification_test.L163.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: nested_loop_modification_test.L163.C1 with name 'nested_loop_modification_test.L163.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436491712 -> LLVM Func nested_loop_modification_test.L163.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'nested_loop_modification_test.L163.C1'...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: nested_loop_modification_test.L163.C1
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 146
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 147
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 148
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 149
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 150
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 157
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 158
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 159
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 161
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 4 at line 163
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Checking for default return for 'nested_loop_modification_test.L163.C1'. Last block: while.end
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Cleaning up function resources for 'nested_loop_modification_test.L163.C1'...
[HdlFuncDef] CurFunc: nested_loop_modification_test.L163.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'nested_loop_modification_test.L163.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'nested_loop_modification_test.L163.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'nested_loop_modification_test' (LLVM: nested_loop_modification_test.L163.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'nested_loop_modification_test'. Got LLVM Func: define internal ptr @nested_loop_modification_test.L163.C1() {
entry:
  %j.addr = alloca ptr, align 8
  %i.addr = alloca ptr, align 8
  %inner_limit.addr = alloca ptr, align 8
  %outer_limit.addr = alloca ptr, align 8
  %nested_list.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.166)
  call void @py_print_object(ptr %str_obj)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.167, i32 10)
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.168, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.169, i32 10)
  %list_obj = call ptr @py_create_list(i32 3, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.170, i32 10)
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.171, i32 10)
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.172, i32 10)
  %list_obj6 = call ptr @py_create_list(i32 3, i32 7)
  %3 = call ptr @py_list_append(ptr %list_obj6, ptr %int_obj_from_str3)
  %4 = call ptr @py_list_append(ptr %list_obj6, ptr %int_obj_from_str4)
  %5 = call ptr @py_list_append(ptr %list_obj6, ptr %int_obj_from_str5)
  %int_obj_from_str7 = call ptr @py_create_int_bystring(ptr @int_str_const.173, i32 10)
  %int_obj_from_str8 = call ptr @py_create_int_bystring(ptr @int_str_const.174, i32 10)
  %int_obj_from_str9 = call ptr @py_create_int_bystring(ptr @int_str_const.175, i32 10)
  %list_obj10 = call ptr @py_create_list(i32 3, i32 7)
  %6 = call ptr @py_list_append(ptr %list_obj10, ptr %int_obj_from_str7)
  %7 = call ptr @py_list_append(ptr %list_obj10, ptr %int_obj_from_str8)
  %8 = call ptr @py_list_append(ptr %list_obj10, ptr %int_obj_from_str9)
  %list_obj11 = call ptr @py_create_list(i32 3, i32 7)
  %9 = call ptr @py_list_append(ptr %list_obj11, ptr %list_obj)
  %10 = call ptr @py_list_append(ptr %list_obj11, ptr %list_obj6)
  %11 = call ptr @py_list_append(ptr %list_obj11, ptr %list_obj10)
  store ptr %list_obj11, ptr %nested_list.addr, align 8
  call void @py_incref(ptr %list_obj11)
  %int_obj_from_str12 = call ptr @py_create_int_bystring(ptr @int_str_const.176, i32 10)
  store ptr %int_obj_from_str12, ptr %outer_limit.addr, align 8
  call void @py_incref(ptr %int_obj_from_str12)
  %int_obj_from_str13 = call ptr @py_create_int_bystring(ptr @int_str_const.177, i32 10)
  store ptr %int_obj_from_str13, ptr %inner_limit.addr, align 8
  call void @py_incref(ptr %int_obj_from_str13)
  %int_obj_from_str14 = call ptr @py_create_int_bystring(ptr @int_str_const.178, i32 10)
  store ptr %int_obj_from_str14, ptr %i.addr, align 8
  call void @py_incref(ptr %int_obj_from_str14)
  %i_init = load ptr, ptr %i.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.end18, %entry
  %i.phi = phi ptr [ %i_init, %entry ], [ %i_latch_val, %while.end18 ]
  %outer_limit_val = load ptr, ptr %outer_limit.addr, align 8
  %cmp_result = call ptr @py_object_compare(ptr %i.phi, ptr %outer_limit_val, i32 2), !py.type !0
  %condval = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %int_obj_from_str15 = call ptr @py_create_int_bystring(ptr @int_str_const.179, i32 10)
  store ptr %int_obj_from_str15, ptr %j.addr, align 8
  call void @py_incref(ptr %int_obj_from_str15)
  %j_init = load ptr, ptr %j.addr, align 8
  br label %while.cond16

while.end:                                        ; preds = %while.cond
  %nested_list_val35 = load ptr, ptr %nested_list.addr, align 8
  call void @py_print_object(ptr %nested_list_val35)
  %nested_list_val36 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str37 = call ptr @py_create_int_bystring(ptr @int_str_const.183, i32 10)
  %list_item38 = call ptr @py_list_get_item(ptr %nested_list_val36, ptr %int_obj_from_str37)
  %int_obj_from_str39 = call ptr @py_create_int_bystring(ptr @int_str_const.184, i32 10)
  %nested_list_val40 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str41 = call ptr @py_create_int_bystring(ptr @int_str_const.185, i32 10)
  %list_item42 = call ptr @py_list_get_item(ptr %nested_list_val40, ptr %int_obj_from_str41)
  %int_obj_from_str43 = call ptr @py_create_int_bystring(ptr @int_str_const.186, i32 10)
  %index_result44 = call ptr @py_object_index(ptr %list_item42, ptr %int_obj_from_str43)
  %nested_list_val45 = load ptr, ptr %nested_list.addr, align 8
  %int_obj_from_str46 = call ptr @py_create_int_bystring(ptr @int_str_const.187, i32 10)
  %list_item47 = call ptr @py_list_get_item(ptr %nested_list_val45, ptr %int_obj_from_str46)
  %int_obj_from_str48 = call ptr @py_create_int_bystring(ptr @int_str_const.188, i32 10)
  %index_result49 = call ptr @py_object_index(ptr %list_item47, ptr %int_obj_from_str48)
  %any_op_result50 = call ptr @py_object_add(ptr %index_result44, ptr %index_result49), !py.type !2
  call void @py_object_set_index(ptr %list_item38, ptr %int_obj_from_str39, ptr %any_op_result50)
  %nested_list_val51 = load ptr, ptr %nested_list.addr, align 8
  call void @py_print_object(ptr %nested_list_val51)
  %int_obj_from_str52 = call ptr @py_create_int_bystring(ptr @int_str_const.189, i32 10)
  ret ptr %int_obj_from_str52

while.cond16:                                     ; preds = %while.body17, %while.body
  %j.phi = phi ptr [ %j_init, %while.body ], [ %j_latch_val, %while.body17 ]
  %inner_limit_val = load ptr, ptr %inner_limit.addr, align 8
  %cmp_result19 = call ptr @py_object_compare(ptr %j.phi, ptr %inner_limit_val, i32 2), !py.type !0
  %condval20 = call i1 @py_object_to_bool(ptr %cmp_result19)
  br i1 %condval20, label %while.body17, label %while.end18

while.body17:                                     ; preds = %while.cond16
  %nested_list_val = load ptr, ptr %nested_list.addr, align 8
  %i_val = load ptr, ptr %i.addr, align 8
  %list_item = call ptr @py_list_get_item(ptr %nested_list_val, ptr %i_val)
  %j_val = load ptr, ptr %j.addr, align 8
  %nested_list_val21 = load ptr, ptr %nested_list.addr, align 8
  %i_val22 = load ptr, ptr %i.addr, align 8
  %list_item23 = call ptr @py_list_get_item(ptr %nested_list_val21, ptr %i_val22)
  %j_val24 = load ptr, ptr %j.addr, align 8
  %index_result = call ptr @py_object_index(ptr %list_item23, ptr %j_val24)
  %i_val25 = load ptr, ptr %i.addr, align 8
  %int_obj_from_str26 = call ptr @py_create_int_bystring(ptr @int_str_const.180, i32 10)
  %binop_result = call ptr @py_object_add(ptr %i_val25, ptr %int_obj_from_str26), !py.type !1
  %any_op_result = call ptr @py_object_multiply(ptr %index_result, ptr %binop_result), !py.type !2
  %j_val27 = load ptr, ptr %j.addr, align 8
  %any_op_result28 = call ptr @py_object_add(ptr %any_op_result, ptr %j_val27), !py.type !2
  call void @py_object_set_index(ptr %list_item, ptr %j_val, ptr %any_op_result28)
  %j_val29 = load ptr, ptr %j.addr, align 8
  %int_obj_from_str30 = call ptr @py_create_int_bystring(ptr @int_str_const.181, i32 10)
  %binop_result31 = call ptr @py_object_add(ptr %j_val29, ptr %int_obj_from_str30), !py.type !1
  %j_old = load ptr, ptr %j.addr, align 8
  call void @py_decref(ptr %j_old)
  store ptr %binop_result31, ptr %j.addr, align 8
  call void @py_incref(ptr %binop_result31)
  %j_latch_val = load ptr, ptr %j.addr, align 8
  br label %while.cond16

while.end18:                                      ; preds = %while.cond16
  %i_val32 = load ptr, ptr %i.addr, align 8
  %int_obj_from_str33 = call ptr @py_create_int_bystring(ptr @int_str_const.182, i32 10)
  %binop_result34 = call ptr @py_object_add(ptr %i_val32, ptr %int_obj_from_str33), !py.type !1
  %i_old = load ptr, ptr %i.addr, align 8
  call void @py_decref(ptr %i_old)
  store ptr %binop_result34, ptr %i.addr, align 8
  call void @py_incref(ptr %binop_result34)
  %i_latch_val = load ptr, ptr %i.addr, align 8
  br label %while.cond
}
 ('nested_loop_modification_test.L163.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'nested_loop_modification_test'...
Debug [CodeGenType]: Resolved static FunctionType for 'nested_loop_modification_test' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'nested_loop_modification_test'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'nested_loop_modification_test.L163.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'nested_loop_modification_test'. Value:   %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'nested_loop_modification_test' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @nested_loop_modification_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @nested_loop_modification_test_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'nested_loop_modification_test' to storage: @nested_loop_modification_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'nested_loop_modification_test'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'nested_loop_modification_test'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 198 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'dict_list_interaction_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'dict_list_interaction_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'dict_list_interaction_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'dict_list_interaction_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'dict_list_interaction_test.L198.C1' for Python name 'dict_list_interaction_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'dict_list_interaction_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'dict_list_interaction_test.L198.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: dict_list_interaction_test.L198.C1 with name 'dict_list_interaction_test.L198.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436503888 -> LLVM Func dict_list_interaction_test.L198.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'dict_list_interaction_test.L198.C1'...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: dict_list_interaction_test.L198.C1
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 165
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 165
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 168
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 169
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 173
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 175
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 176
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 179
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 180
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 183
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 184
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 187
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 188
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 190
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 192
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 195
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 196
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 4 at line 198
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Checking for default return for 'dict_list_interaction_test.L198.C1'. Last block: while.end
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Cleaning up function resources for 'dict_list_interaction_test.L198.C1'...
[HdlFuncDef] CurFunc: dict_list_interaction_test.L198.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'dict_list_interaction_test.L198.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'dict_list_interaction_test.L198.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'dict_list_interaction_test' (LLVM: dict_list_interaction_test.L198.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'dict_list_interaction_test'. Got LLVM Func: define internal ptr @dict_list_interaction_test.L198.C1() {
entry:
  %limit.addr = alloca ptr, align 8
  %i.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.190)
  call void @py_print_object(ptr %str_obj)
  %dict_obj = call ptr @py_create_dict(i32 8, i32 4)
  %str_obj1 = call ptr @py_create_string(ptr @str_const.191)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.192, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.193, i32 10)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.194, i32 10)
  %list_obj = call ptr @py_create_list(i32 3, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str3)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj1, ptr %list_obj)
  %str_obj4 = call ptr @py_create_string(ptr @str_const.195)
  %str_obj5 = call ptr @py_create_string(ptr @str_const.196)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj4, ptr %str_obj5)
  %str_obj6 = call ptr @py_create_string(ptr @str_const.197)
  %dict_obj7 = call ptr @py_create_dict(i32 8, i32 4)
  %str_obj8 = call ptr @py_create_string(ptr @str_const.198)
  %int_obj_from_str9 = call ptr @py_create_int_bystring(ptr @int_str_const.199, i32 10)
  call void @py_dict_set_item(ptr %dict_obj7, ptr %str_obj8, ptr %int_obj_from_str9)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj6, ptr %dict_obj7)
  store ptr %dict_obj, ptr %data.addr, align 8
  call void @py_incref(ptr %dict_obj)
  %int_obj_from_str10 = call ptr @py_create_int_bystring(ptr @int_str_const.200, i32 10)
  store ptr %int_obj_from_str10, ptr %i.addr, align 8
  call void @py_incref(ptr %int_obj_from_str10)
  %int_obj_from_str11 = call ptr @py_create_int_bystring(ptr @int_str_const.201, i32 10)
  store ptr %int_obj_from_str11, ptr %limit.addr, align 8
  call void @py_incref(ptr %int_obj_from_str11)
  %i_init = load ptr, ptr %i.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %i.phi = phi ptr [ %i_init, %entry ], [ %i_latch_val, %while.body ]
  %limit_val = load ptr, ptr %limit.addr, align 8
  %cmp_result = call ptr @py_object_compare(ptr %i.phi, ptr %limit_val, i32 2), !py.type !0
  %condval = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %data_val = load ptr, ptr %data.addr, align 8
  %str_obj12 = call ptr @py_create_string(ptr @str_const.202)
  %dict_item = call ptr @py_dict_get_item(ptr %data_val, ptr %str_obj12)
  %i_val = load ptr, ptr %i.addr, align 8
  %data_val13 = load ptr, ptr %data.addr, align 8
  %str_obj14 = call ptr @py_create_string(ptr @str_const.203)
  %dict_item15 = call ptr @py_dict_get_item(ptr %data_val13, ptr %str_obj14)
  %i_val16 = load ptr, ptr %i.addr, align 8
  %index_result = call ptr @py_object_index(ptr %dict_item15, ptr %i_val16)
  %i_val17 = load ptr, ptr %i.addr, align 8
  %any_op_result = call ptr @py_object_add(ptr %index_result, ptr %i_val17), !py.type !2
  call void @py_object_set_index(ptr %dict_item, ptr %i_val, ptr %any_op_result)
  %i_val18 = load ptr, ptr %i.addr, align 8
  %int_obj_from_str19 = call ptr @py_create_int_bystring(ptr @int_str_const.204, i32 10)
  %binop_result = call ptr @py_object_add(ptr %i_val18, ptr %int_obj_from_str19), !py.type !1
  %i_old = load ptr, ptr %i.addr, align 8
  call void @py_decref(ptr %i_old)
  store ptr %binop_result, ptr %i.addr, align 8
  call void @py_incref(ptr %binop_result)
  %i_latch_val = load ptr, ptr %i.addr, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %data_val20 = load ptr, ptr %data.addr, align 8
  %str_obj21 = call ptr @py_create_string(ptr @str_const.205)
  %dict_item22 = call ptr @py_dict_get_item(ptr %data_val20, ptr %str_obj21)
  call void @py_print_object(ptr %dict_item22)
  %data_val23 = load ptr, ptr %data.addr, align 8
  %str_obj24 = call ptr @py_create_string(ptr @str_const.206)
  %str_obj25 = call ptr @py_create_string(ptr @str_const.207)
  call void @py_object_set_index(ptr %data_val23, ptr %str_obj24, ptr %str_obj25)
  %data_val26 = load ptr, ptr %data.addr, align 8
  %str_obj27 = call ptr @py_create_string(ptr @str_const.208)
  %dict_item28 = call ptr @py_dict_get_item(ptr %data_val26, ptr %str_obj27)
  call void @py_print_object(ptr %dict_item28)
  %data_val29 = load ptr, ptr %data.addr, align 8
  %str_obj30 = call ptr @py_create_string(ptr @str_const.209)
  %int_obj_from_str31 = call ptr @py_create_int_bystring(ptr @int_str_const.210, i32 10)
  %int_obj_from_str32 = call ptr @py_create_int_bystring(ptr @int_str_const.211, i32 10)
  %list_obj33 = call ptr @py_create_list(i32 2, i32 7)
  %3 = call ptr @py_list_append(ptr %list_obj33, ptr %int_obj_from_str31)
  %4 = call ptr @py_list_append(ptr %list_obj33, ptr %int_obj_from_str32)
  call void @py_object_set_index(ptr %data_val29, ptr %str_obj30, ptr %list_obj33)
  %data_val34 = load ptr, ptr %data.addr, align 8
  %str_obj35 = call ptr @py_create_string(ptr @str_const.212)
  %dict_item36 = call ptr @py_dict_get_item(ptr %data_val34, ptr %str_obj35)
  call void @py_print_object(ptr %dict_item36)
  %data_val37 = load ptr, ptr %data.addr, align 8
  %str_obj38 = call ptr @py_create_string(ptr @str_const.213)
  %dict_item39 = call ptr @py_dict_get_item(ptr %data_val37, ptr %str_obj38)
  %int_obj_from_str40 = call ptr @py_create_int_bystring(ptr @int_str_const.214, i32 10)
  %data_val41 = load ptr, ptr %data.addr, align 8
  %str_obj42 = call ptr @py_create_string(ptr @str_const.215)
  %dict_item43 = call ptr @py_dict_get_item(ptr %data_val41, ptr %str_obj42)
  %int_obj_from_str44 = call ptr @py_create_int_bystring(ptr @int_str_const.216, i32 10)
  %index_result45 = call ptr @py_object_index(ptr %dict_item43, ptr %int_obj_from_str44)
  call void @py_object_set_index(ptr %dict_item39, ptr %int_obj_from_str40, ptr %index_result45)
  %data_val46 = load ptr, ptr %data.addr, align 8
  %str_obj47 = call ptr @py_create_string(ptr @str_const.217)
  %dict_item48 = call ptr @py_dict_get_item(ptr %data_val46, ptr %str_obj47)
  call void @py_print_object(ptr %dict_item48)
  %data_val49 = load ptr, ptr %data.addr, align 8
  %str_obj50 = call ptr @py_create_string(ptr @str_const.218)
  %dict_item51 = call ptr @py_dict_get_item(ptr %data_val49, ptr %str_obj50)
  %str_obj52 = call ptr @py_create_string(ptr @str_const.219)
  %data_val53 = load ptr, ptr %data.addr, align 8
  %str_obj54 = call ptr @py_create_string(ptr @str_const.220)
  %dict_item55 = call ptr @py_dict_get_item(ptr %data_val53, ptr %str_obj54)
  %str_obj56 = call ptr @py_create_string(ptr @str_const.221)
  %index_result57 = call ptr @py_object_index(ptr %dict_item55, ptr %str_obj56)
  %int_obj_from_str58 = call ptr @py_create_int_bystring(ptr @int_str_const.222, i32 10)
  %any_op_result59 = call ptr @py_object_add(ptr %index_result57, ptr %int_obj_from_str58), !py.type !2
  call void @py_object_set_index(ptr %dict_item51, ptr %str_obj52, ptr %any_op_result59)
  %data_val60 = load ptr, ptr %data.addr, align 8
  %str_obj61 = call ptr @py_create_string(ptr @str_const.223)
  %dict_item62 = call ptr @py_dict_get_item(ptr %data_val60, ptr %str_obj61)
  %str_obj63 = call ptr @py_create_string(ptr @str_const.224)
  %index_result64 = call ptr @py_object_index(ptr %dict_item62, ptr %str_obj63)
  call void @py_print_object(ptr %index_result64)
  %data_val65 = load ptr, ptr %data.addr, align 8
  %str_obj66 = call ptr @py_create_string(ptr @str_const.225)
  %dict_item67 = call ptr @py_dict_get_item(ptr %data_val65, ptr %str_obj66)
  %str_obj68 = call ptr @py_create_string(ptr @str_const.226)
  %data_val69 = load ptr, ptr %data.addr, align 8
  %str_obj70 = call ptr @py_create_string(ptr @str_const.227)
  %dict_item71 = call ptr @py_dict_get_item(ptr %data_val69, ptr %str_obj70)
  %int_obj_from_str72 = call ptr @py_create_int_bystring(ptr @int_str_const.228, i32 10)
  %index_result73 = call ptr @py_object_index(ptr %dict_item71, ptr %int_obj_from_str72)
  call void @py_object_set_index(ptr %dict_item67, ptr %str_obj68, ptr %index_result73)
  %data_val74 = load ptr, ptr %data.addr, align 8
  %str_obj75 = call ptr @py_create_string(ptr @str_const.229)
  %dict_item76 = call ptr @py_dict_get_item(ptr %data_val74, ptr %str_obj75)
  call void @py_print_object(ptr %dict_item76)
  %data_val77 = load ptr, ptr %data.addr, align 8
  call void @py_print_object(ptr %data_val77)
  %int_obj_from_str78 = call ptr @py_create_int_bystring(ptr @int_str_const.230, i32 10)
  ret ptr %int_obj_from_str78
}
 ('dict_list_interaction_test.L198.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'dict_list_interaction_test'...
Debug [CodeGenType]: Resolved static FunctionType for 'dict_list_interaction_test' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'dict_list_interaction_test'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'dict_list_interaction_test.L198.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'dict_list_interaction_test'. Value:   %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'dict_list_interaction_test' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @dict_list_interaction_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @dict_list_interaction_test_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'dict_list_interaction_test' to storage: @dict_list_interaction_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'dict_list_interaction_test'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'dict_list_interaction_test'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 225 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'list_dict_interaction_test'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'list_dict_interaction_test' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'list_dict_interaction_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'list_dict_interaction_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'list_dict_interaction_test.L225.C1' for Python name 'list_dict_interaction_test'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'list_dict_interaction_test'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'list_dict_interaction_test.L225.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: list_dict_interaction_test.L225.C1 with name 'list_dict_interaction_test.L225.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436514144 -> LLVM Func list_dict_interaction_test.L225.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'list_dict_interaction_test.L225.C1'...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: list_dict_interaction_test.L225.C1
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 200
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 200
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 201
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 202
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 3 at line 218
DEBUG: -> Entering handleIfStmt (Public Entry)
DEBUG:    [1] Created finalMergeBB: ifcont
DEBUG:    [Pre] Original Insert BB: while.body, Terminated: No
DEBUG:    [2] Calling handleIfStmtRecursive...
DEBUG: -> Entering handleIfStmtRecursive
DEBUG:    Target finalMergeBB: ifcont
DEBUG:    [1] Handling condition...
DEBUG:    [1] Condition Value:   %condval25 = call i1 @py_object_to_bool(ptr %any_cmp_result)
DEBUG:    [2] Created blocks: thenBB=then, elseEntryBB=else
DEBUG:    [3] Creating CondBr from while.body on   %condval25 = call i1 @py_object_to_bool(ptr %any_cmp_result) ? then : else
DEBUG:    [4] Handling 'then' branch (Block: then)
DEBUG:        Set insert point to: then
DEBUG:        Calling handleBlock(..., createNewScope=false) for thenBody...
DEBUG: Scope: Skipping new scope creation in handleBlock (createNewScope=false).
DEBUG: Scope: Skipping scope pop in handleBlock (createNewScope=false).
DEBUG:        Returned from handleBlock for thenBody. Current block: then
DEBUG:        'then' block (then) did not terminate. Creating Br to finalMergeBB (ifcont)
DEBUG:    [5] Handling 'else'/'elif' part (Entry Block: else)
DEBUG:        Set insert point to: else
DEBUG:        Else statement is null (no else/elif). Creating direct Br from elseEntryBB (else) to finalMergeBB (ifcont)
DEBUG: <- Leaving handleIfStmtRecursive (normal exit)
DEBUG:    [2] Returned from handleIfStmtRecursive. Current block: else
DEBUG:    [3] Checking reachability of finalMergeBB (ifcont)
DEBUG:        Has Uses: Yes
DEBUG:        Has Predecessors: Yes
DEBUG:        finalMergeBB is reachable. Setting insert point.
DEBUG: <- Leaving handleIfStmt (Public Entry). Final insert point: ifcont
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 219
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 20 at line 220
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 5 at line 222
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Body: Handling Stmt Kind 4 at line 225
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Checking for default return for 'list_dict_interaction_test.L225.C1'. Last block: while.end
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Cleaning up function resources for 'list_dict_interaction_test.L225.C1'...
[HdlFuncDef] CurFunc: list_dict_interaction_test.L225.C1, CurBlock: while.end, CurIP: {Block: while.end, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'list_dict_interaction_test.L225.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'list_dict_interaction_test.L225.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'list_dict_interaction_test' (LLVM: list_dict_interaction_test.L225.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'list_dict_interaction_test'. Got LLVM Func: define internal ptr @list_dict_interaction_test.L225.C1() {
entry:
  %current_dict.addr = alloca ptr, align 8
  %limit.addr = alloca ptr, align 8
  %i.addr = alloca ptr, align 8
  %data.addr = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.231)
  call void @py_print_object(ptr %str_obj)
  %dict_obj = call ptr @py_create_dict(i32 8, i32 4)
  %str_obj1 = call ptr @py_create_string(ptr @str_const.232)
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.233, i32 10)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj1, ptr %int_obj_from_str)
  %str_obj2 = call ptr @py_create_string(ptr @str_const.234)
  %double_obj_from_str = call ptr @py_create_double_bystring(ptr @double_str_const.235, i32 10, i64 0)
  call void @py_dict_set_item(ptr %dict_obj, ptr %str_obj2, ptr %double_obj_from_str)
  %dict_obj3 = call ptr @py_create_dict(i32 8, i32 4)
  %str_obj4 = call ptr @py_create_string(ptr @str_const.236)
  %int_obj_from_str5 = call ptr @py_create_int_bystring(ptr @int_str_const.237, i32 10)
  call void @py_dict_set_item(ptr %dict_obj3, ptr %str_obj4, ptr %int_obj_from_str5)
  %str_obj6 = call ptr @py_create_string(ptr @str_const.238)
  %double_obj_from_str7 = call ptr @py_create_double_bystring(ptr @double_str_const.239, i32 10, i64 0)
  call void @py_dict_set_item(ptr %dict_obj3, ptr %str_obj6, ptr %double_obj_from_str7)
  %dict_obj8 = call ptr @py_create_dict(i32 8, i32 4)
  %str_obj9 = call ptr @py_create_string(ptr @str_const.240)
  %int_obj_from_str10 = call ptr @py_create_int_bystring(ptr @int_str_const.241, i32 10)
  call void @py_dict_set_item(ptr %dict_obj8, ptr %str_obj9, ptr %int_obj_from_str10)
  %str_obj11 = call ptr @py_create_string(ptr @str_const.242)
  %double_obj_from_str12 = call ptr @py_create_double_bystring(ptr @double_str_const.243, i32 10, i64 0)
  call void @py_dict_set_item(ptr %dict_obj8, ptr %str_obj11, ptr %double_obj_from_str12)
  %list_obj = call ptr @py_create_list(i32 3, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %dict_obj)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %dict_obj3)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %dict_obj8)
  store ptr %list_obj, ptr %data.addr, align 8
  call void @py_incref(ptr %list_obj)
  %int_obj_from_str13 = call ptr @py_create_int_bystring(ptr @int_str_const.244, i32 10)
  store ptr %int_obj_from_str13, ptr %i.addr, align 8
  call void @py_incref(ptr %int_obj_from_str13)
  %int_obj_from_str14 = call ptr @py_create_int_bystring(ptr @int_str_const.245, i32 10)
  store ptr %int_obj_from_str14, ptr %limit.addr, align 8
  call void @py_incref(ptr %int_obj_from_str14)
  %i_init = load ptr, ptr %i.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %ifcont, %entry
  %i.phi = phi ptr [ %i_init, %entry ], [ %i_latch_val, %ifcont ]
  %limit_val = load ptr, ptr %limit.addr, align 8
  %cmp_result = call ptr @py_object_compare(ptr %i.phi, ptr %limit_val, i32 2), !py.type !0
  %condval = call i1 @py_object_to_bool(ptr %cmp_result)
  br i1 %condval, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %data_val = load ptr, ptr %data.addr, align 8
  %i_val = load ptr, ptr %i.addr, align 8
  %list_item = call ptr @py_list_get_item(ptr %data_val, ptr %i_val)
  store ptr %list_item, ptr %current_dict.addr, align 8
  call void @py_incref(ptr %list_item)
  %current_dict_val = load ptr, ptr %current_dict.addr, align 8
  %str_obj15 = call ptr @py_create_string(ptr @str_const.246)
  %current_dict_val16 = load ptr, ptr %current_dict.addr, align 8
  %str_obj17 = call ptr @py_create_string(ptr @str_const.247)
  %index_result = call ptr @py_object_index(ptr %current_dict_val16, ptr %str_obj17)
  %int_obj_from_str18 = call ptr @py_create_int_bystring(ptr @int_str_const.248, i32 10)
  %any_op_result = call ptr @py_object_multiply(ptr %index_result, ptr %int_obj_from_str18), !py.type !2
  call void @py_object_set_index(ptr %current_dict_val, ptr %str_obj15, ptr %any_op_result)
  %current_dict_val19 = load ptr, ptr %current_dict.addr, align 8
  %str_obj20 = call ptr @py_create_string(ptr @str_const.249)
  %bool_obj = call ptr @py_create_bool(i1 true)
  call void @py_object_set_index(ptr %current_dict_val19, ptr %str_obj20, ptr %bool_obj)
  %current_dict_val21 = load ptr, ptr %current_dict.addr, align 8
  %str_obj22 = call ptr @py_create_string(ptr @str_const.250)
  %index_result23 = call ptr @py_object_index(ptr %current_dict_val21, ptr %str_obj22)
  %int_obj_from_str24 = call ptr @py_create_int_bystring(ptr @int_str_const.251, i32 10)
  %any_cmp_result = call ptr @py_object_compare(ptr %index_result23, ptr %int_obj_from_str24, i32 0), !py.type !0
  %condval25 = call i1 @py_object_to_bool(ptr %any_cmp_result)
  br i1 %condval25, label %then, label %else

while.end:                                        ; preds = %while.cond
  %data_val37 = load ptr, ptr %data.addr, align 8
  call void @py_print_object(ptr %data_val37)
  %data_val38 = load ptr, ptr %data.addr, align 8
  %int_obj_from_str39 = call ptr @py_create_int_bystring(ptr @int_str_const.255, i32 10)
  %list_item40 = call ptr @py_list_get_item(ptr %data_val38, ptr %int_obj_from_str39)
  %str_obj41 = call ptr @py_create_string(ptr @str_const.256)
  %data_val42 = load ptr, ptr %data.addr, align 8
  %int_obj_from_str43 = call ptr @py_create_int_bystring(ptr @int_str_const.257, i32 10)
  %list_item44 = call ptr @py_list_get_item(ptr %data_val42, ptr %int_obj_from_str43)
  %str_obj45 = call ptr @py_create_string(ptr @str_const.258)
  %index_result46 = call ptr @py_object_index(ptr %list_item44, ptr %str_obj45)
  %data_val47 = load ptr, ptr %data.addr, align 8
  %int_obj_from_str48 = call ptr @py_create_int_bystring(ptr @int_str_const.259, i32 10)
  %list_item49 = call ptr @py_list_get_item(ptr %data_val47, ptr %int_obj_from_str48)
  %str_obj50 = call ptr @py_create_string(ptr @str_const.260)
  %index_result51 = call ptr @py_object_index(ptr %list_item49, ptr %str_obj50)
  %any_op_result52 = call ptr @py_object_add(ptr %index_result46, ptr %index_result51), !py.type !2
  call void @py_object_set_index(ptr %list_item40, ptr %str_obj41, ptr %any_op_result52)
  %data_val53 = load ptr, ptr %data.addr, align 8
  %int_obj_from_str54 = call ptr @py_create_int_bystring(ptr @int_str_const.261, i32 10)
  %list_item55 = call ptr @py_list_get_item(ptr %data_val53, ptr %int_obj_from_str54)
  call void @py_print_object(ptr %list_item55)
  %int_obj_from_str56 = call ptr @py_create_int_bystring(ptr @int_str_const.262, i32 10)
  ret ptr %int_obj_from_str56

ifcont:                                           ; preds = %else, %then
  %data_val29 = load ptr, ptr %data.addr, align 8
  %i_val30 = load ptr, ptr %i.addr, align 8
  %current_dict_val31 = load ptr, ptr %current_dict.addr, align 8
  call void @py_object_set_index(ptr %data_val29, ptr %i_val30, ptr %current_dict_val31)
  %data_val32 = load ptr, ptr %data.addr, align 8
  %i_val33 = load ptr, ptr %i.addr, align 8
  %list_item34 = call ptr @py_list_get_item(ptr %data_val32, ptr %i_val33)
  call void @py_print_object(ptr %list_item34)
  %i_val35 = load ptr, ptr %i.addr, align 8
  %int_obj_from_str36 = call ptr @py_create_int_bystring(ptr @int_str_const.254, i32 10)
  %binop_result = call ptr @py_object_add(ptr %i_val35, ptr %int_obj_from_str36), !py.type !1
  %i_old = load ptr, ptr %i.addr, align 8
  call void @py_decref(ptr %i_old)
  store ptr %binop_result, ptr %i.addr, align 8
  call void @py_incref(ptr %binop_result)
  %i_latch_val = load ptr, ptr %i.addr, align 8
  br label %while.cond

then:                                             ; preds = %while.body
  %current_dict_val26 = load ptr, ptr %current_dict.addr, align 8
  %str_obj27 = call ptr @py_create_string(ptr @str_const.252)
  %str_obj28 = call ptr @py_create_string(ptr @str_const.253)
  call void @py_object_set_index(ptr %current_dict_val26, ptr %str_obj27, ptr %str_obj28)
  br label %ifcont

else:                                             ; preds = %while.body
  br label %ifcont
}
 ('list_dict_interaction_test.L225.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'list_dict_interaction_test'...
Debug [CodeGenType]: Resolved static FunctionType for 'list_dict_interaction_test' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'list_dict_interaction_test'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'list_dict_interaction_test.L225.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'list_dict_interaction_test'. Value:   %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'list_dict_interaction_test' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @list_dict_interaction_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @list_dict_interaction_test_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'list_dict_interaction_test' to storage: @list_dict_interaction_test_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'list_dict_interaction_test'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'list_dict_interaction_test'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 24 at line 257 in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDefStmt for Python func 'main'
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Defining FunctionAST 'main' in current symbol table scope.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling ModuleGen->handleFunctionDef for 'main'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Entering handleFunctionDef for Python func 'main'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generated unique LLVM name: 'main.L257.C1' for Python name 'main'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saving context...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Saved IP: {Block: entry, Point: end}, Saved Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolving return and param types for 'main'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved return type: int
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Resolved param types: []
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Creating LLVM function type and function using unique name 'main.L257.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Got LLVM function: main.L257.C1 with name 'main.L257.C1'
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Added/Updated functionCache for AST node 94351436520400 -> LLVM Func main.L257.C1
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Setting up entry block and params for 'main.L257.C1'...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set insert point to new entry block: entry
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Set current function to: main.L257.C1
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Scope pushed. Depth: 3. Handling params...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Params handled. Generating body stmts...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 227
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 228
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_return'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 229
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_return_listindex'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 229
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_list'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 231
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 6 at line 231
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_dict'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 233
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 234
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'func_fib'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 238
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'arr_test1'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'arr_test2'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 242
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'list_modification_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'dict_modification_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'nested_container_access_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'container_assignment_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 248
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'complex_list_while_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'complex_dict_while_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'nested_loop_modification_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'dict_list_interaction_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 7 at line 0
[HdlCallExpr] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'list_dict_interaction_test'
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 5 at line 255
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Body: Handling Stmt Kind 4 at line 257
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Finished handling body stmts. Popping scope...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Checking for default return for 'main.L257.C1'. Last block: entry
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - No default return needed (block already terminated).
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Cleaning up function resources for 'main.L257.C1'...
[HdlFuncDef] CurFunc: main.L257.C1, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restoring context. Target IP: {Block: entry, Point: end}, Target Func: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Restored IP.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Context restored. Current function: __llvmpy_entry
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying function 'main.L257.C1'...
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function verification PASSED for 'main.L257.C1'.
[HdlFuncDef] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDef for 'main' (LLVM: main.L257.C1)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - ModuleGen->handleFunctionDef SUCCEEDED for 'main'. Got LLVM Func: define internal ptr @main.L257.C1() {
entry:
  %callargs_array16 = alloca ptr, align 8
  %test4.addr = alloca ptr, align 8
  %callargs_array12 = alloca ptr, align 8
  %test3.addr = alloca ptr, align 8
  %callargs_array8 = alloca ptr, align 8
  %callargs_array5 = alloca ptr, i32 2, align 8
  %callargs_array = alloca ptr, align 8
  %str_obj = call ptr @py_create_string(ptr @str_const.263)
  call void @py_print_object(ptr %str_obj)
  %func_return_callable_loaded = load ptr, ptr @func_return_obj_gv, align 8
  %int_obj_from_str = call ptr @py_create_int_bystring(ptr @int_str_const.264, i32 10)
  call void @py_incref(ptr %int_obj_from_str)
  %arg_ptr_0 = getelementptr ptr, ptr %callargs_array, i32 0
  store ptr %int_obj_from_str, ptr %arg_ptr_0, align 8
  %call_result = call ptr @py_call_function(ptr %func_return_callable_loaded, i32 1, ptr %callargs_array)
  call void @py_print_object(ptr %call_result)
  %func_return_listindex_callable_loaded = load ptr, ptr @func_return_listindex_obj_gv, align 8
  %int_obj_from_str1 = call ptr @py_create_int_bystring(ptr @int_str_const.265, i32 10)
  %int_obj_from_str2 = call ptr @py_create_int_bystring(ptr @int_str_const.266, i32 10)
  %int_obj_from_str3 = call ptr @py_create_int_bystring(ptr @int_str_const.267, i32 10)
  %list_obj = call ptr @py_create_list(i32 3, i32 7)
  %0 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str1)
  %1 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str2)
  %2 = call ptr @py_list_append(ptr %list_obj, ptr %int_obj_from_str3)
  %int_obj_from_str4 = call ptr @py_create_int_bystring(ptr @int_str_const.268, i32 10)
  call void @py_incref(ptr %list_obj)
  call void @py_incref(ptr %int_obj_from_str4)
  %arg_ptr_06 = getelementptr ptr, ptr %callargs_array5, i32 0
  store ptr %list_obj, ptr %arg_ptr_06, align 8
  %arg_ptr_1 = getelementptr ptr, ptr %callargs_array5, i32 1
  store ptr %int_obj_from_str4, ptr %arg_ptr_1, align 8
  %call_result7 = call ptr @py_call_function(ptr %func_return_listindex_callable_loaded, i32 2, ptr %callargs_array5)
  call void @py_print_object(ptr %call_result7)
  %func_list_callable_loaded = load ptr, ptr @func_list_obj_gv, align 8
  %double_obj_from_str = call ptr @py_create_double_bystring(ptr @double_str_const.269, i32 10, i64 0)
  call void @py_incref(ptr %double_obj_from_str)
  %arg_ptr_09 = getelementptr ptr, ptr %callargs_array8, i32 0
  store ptr %double_obj_from_str, ptr %arg_ptr_09, align 8
  %call_result10 = call ptr @py_call_function(ptr %func_list_callable_loaded, i32 1, ptr %callargs_array8)
  store ptr %call_result10, ptr %test3.addr, align 8
  call void @py_incref(ptr %call_result10)
  %test3_val = load ptr, ptr %test3.addr, align 8
  call void @py_print_object(ptr %test3_val)
  %func_dict_callable_loaded = load ptr, ptr @func_dict_obj_gv, align 8
  %int_obj_from_str11 = call ptr @py_create_int_bystring(ptr @int_str_const.270, i32 10)
  call void @py_incref(ptr %int_obj_from_str11)
  %arg_ptr_013 = getelementptr ptr, ptr %callargs_array12, i32 0
  store ptr %int_obj_from_str11, ptr %arg_ptr_013, align 8
  %call_result14 = call ptr @py_call_function(ptr %func_dict_callable_loaded, i32 1, ptr %callargs_array12)
  store ptr %call_result14, ptr %test4.addr, align 8
  call void @py_incref(ptr %call_result14)
  %test4_val = load ptr, ptr %test4.addr, align 8
  call void @py_print_object(ptr %test4_val)
  %func_fib_callable_loaded = load ptr, ptr @func_fib_obj_gv, align 8
  %int_obj_from_str15 = call ptr @py_create_int_bystring(ptr @int_str_const.271, i32 10)
  call void @py_incref(ptr %int_obj_from_str15)
  %arg_ptr_017 = getelementptr ptr, ptr %callargs_array16, i32 0
  store ptr %int_obj_from_str15, ptr %arg_ptr_017, align 8
  %call_result18 = call ptr @py_call_function(ptr %func_fib_callable_loaded, i32 1, ptr %callargs_array16)
  call void @py_print_object(ptr %call_result18)
  %str_obj19 = call ptr @py_create_string(ptr @str_const.272)
  call void @py_print_object(ptr %str_obj19)
  %arr_test1_callable_loaded = load ptr, ptr @arr_test1_obj_gv, align 8
  %call_result20 = call ptr @py_call_function(ptr %arr_test1_callable_loaded, i32 0, ptr null)
  %arr_test2_callable_loaded = load ptr, ptr @arr_test2_obj_gv, align 8
  %call_result21 = call ptr @py_call_function(ptr %arr_test2_callable_loaded, i32 0, ptr null)
  %str_obj22 = call ptr @py_create_string(ptr @str_const.273)
  call void @py_print_object(ptr %str_obj22)
  %list_modification_test_callable_loaded = load ptr, ptr @list_modification_test_obj_gv, align 8
  %call_result23 = call ptr @py_call_function(ptr %list_modification_test_callable_loaded, i32 0, ptr null)
  %dict_modification_test_callable_loaded = load ptr, ptr @dict_modification_test_obj_gv, align 8
  %call_result24 = call ptr @py_call_function(ptr %dict_modification_test_callable_loaded, i32 0, ptr null)
  %nested_container_access_test_callable_loaded = load ptr, ptr @nested_container_access_test_obj_gv, align 8
  %call_result25 = call ptr @py_call_function(ptr %nested_container_access_test_callable_loaded, i32 0, ptr null)
  %container_assignment_test_callable_loaded = load ptr, ptr @container_assignment_test_obj_gv, align 8
  %call_result26 = call ptr @py_call_function(ptr %container_assignment_test_callable_loaded, i32 0, ptr null)
  %str_obj27 = call ptr @py_create_string(ptr @str_const.274)
  call void @py_print_object(ptr %str_obj27)
  %complex_list_while_test_callable_loaded = load ptr, ptr @complex_list_while_test_obj_gv, align 8
  %call_result28 = call ptr @py_call_function(ptr %complex_list_while_test_callable_loaded, i32 0, ptr null)
  %complex_dict_while_test_callable_loaded = load ptr, ptr @complex_dict_while_test_obj_gv, align 8
  %call_result29 = call ptr @py_call_function(ptr %complex_dict_while_test_callable_loaded, i32 0, ptr null)
  %nested_loop_modification_test_callable_loaded = load ptr, ptr @nested_loop_modification_test_obj_gv, align 8
  %call_result30 = call ptr @py_call_function(ptr %nested_loop_modification_test_callable_loaded, i32 0, ptr null)
  %dict_list_interaction_test_callable_loaded = load ptr, ptr @dict_list_interaction_test_obj_gv, align 8
  %call_result31 = call ptr @py_call_function(ptr %dict_list_interaction_test_callable_loaded, i32 0, ptr null)
  %list_dict_interaction_test_callable_loaded = load ptr, ptr @list_dict_interaction_test_obj_gv, align 8
  %call_result32 = call ptr @py_call_function(ptr %list_dict_interaction_test_callable_loaded, i32 0, ptr null)
  %str_obj33 = call ptr @py_create_string(ptr @str_const.275)
  call void @py_print_object(ptr %str_obj33)
  %int_obj_from_str34 = call ptr @py_create_int_bystring(ptr @int_str_const.276, i32 10)
  ret ptr %int_obj_from_str34
}
 ('main.L257.C1')
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling TypeGen->getFunctionObjectType for 'main'...
Debug [CodeGenType]: Resolved static FunctionType for 'main' as func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - TypeGen->getFunctionObjectType SUCCEEDED for 'main'. Type: func
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Calling RuntimeGen->createFunctionObject using LLVM func 'main.L257.C1'...
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
  %new_py_func_obj16 = call ptr @py_create_function(ptr @main.L257.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - RuntimeGen->createFunctionObject SUCCEEDED for 'main'. Value:   %new_py_func_obj16 = call ptr @py_create_function(ptr @main.L257.C1, i32 8)
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
  %new_py_func_obj16 = call ptr @py_create_function(ptr @main.L257.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Function 'main' is top-level. Looking for/Creating GlobalVariable.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
  %new_py_func_obj16 = call ptr @py_create_function(ptr @main.L257.C1, i32 8)
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Created GlobalVariable: @main_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
  %new_py_func_obj16 = call ptr @py_create_function(ptr @main.L257.C1, i32 8)
  store ptr %new_py_func_obj16, ptr @main_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Stored PyObject* into GlobalVariable: @main_obj_gv = internal global ptr null in block entry
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
  %new_py_func_obj16 = call ptr @py_create_function(ptr @main.L257.C1, i32 8)
  store ptr %new_py_func_obj16, ptr @main_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Binding/Rebinding SymbolTable entry for 'main' to storage: @main_obj_gv = internal global ptr null
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
  %new_py_func_obj16 = call ptr @py_create_function(ptr @main.L257.C1, i32 8)
  store ptr %new_py_func_obj16, ptr @main_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - SymbolTable binding confirmed/updated for 'main'.
[HdlFuncDefStmt] CurFunc: define i32 @__llvmpy_entry() {
entry:
  %new_py_func_obj = call ptr @py_create_function(ptr @func_return.L3.C1, i32 8)
  store ptr %new_py_func_obj, ptr @func_return_obj_gv, align 8
  %new_py_func_obj1 = call ptr @py_create_function(ptr @func_return_listindex.L5.C1, i32 8)
  store ptr %new_py_func_obj1, ptr @func_return_listindex_obj_gv, align 8
  %new_py_func_obj2 = call ptr @py_create_function(ptr @func_list.L7.C1, i32 8)
  store ptr %new_py_func_obj2, ptr @func_list_obj_gv, align 8
  %new_py_func_obj3 = call ptr @py_create_function(ptr @func_dict.L9.C1, i32 8)
  store ptr %new_py_func_obj3, ptr @func_dict_obj_gv, align 8
  %new_py_func_obj4 = call ptr @py_create_function(ptr @func_fib.L18.C1, i32 8)
  store ptr %new_py_func_obj4, ptr @func_fib_obj_gv, align 8
  %new_py_func_obj5 = call ptr @py_create_function(ptr @arr_test1.L24.C1, i32 8)
  store ptr %new_py_func_obj5, ptr @arr_test1_obj_gv, align 8
  %new_py_func_obj6 = call ptr @py_create_function(ptr @arr_test2.L33.C1, i32 8)
  store ptr %new_py_func_obj6, ptr @arr_test2_obj_gv, align 8
  %new_py_func_obj7 = call ptr @py_create_function(ptr @list_modification_test.L43.C1, i32 8)
  store ptr %new_py_func_obj7, ptr @list_modification_test_obj_gv, align 8
  %new_py_func_obj8 = call ptr @py_create_function(ptr @dict_modification_test.L59.C1, i32 8)
  store ptr %new_py_func_obj8, ptr @dict_modification_test_obj_gv, align 8
  %new_py_func_obj9 = call ptr @py_create_function(ptr @nested_container_access_test.L78.C1, i32 8)
  store ptr %new_py_func_obj9, ptr @nested_container_access_test_obj_gv, align 8
  %new_py_func_obj10 = call ptr @py_create_function(ptr @container_assignment_test.L97.C1, i32 8)
  store ptr %new_py_func_obj10, ptr @container_assignment_test_obj_gv, align 8
  %new_py_func_obj11 = call ptr @py_create_function(ptr @complex_list_while_test.L114.C1, i32 8)
  store ptr %new_py_func_obj11, ptr @complex_list_while_test_obj_gv, align 8
  %new_py_func_obj12 = call ptr @py_create_function(ptr @complex_dict_while_test.L144.C1, i32 8)
  store ptr %new_py_func_obj12, ptr @complex_dict_while_test_obj_gv, align 8
  %new_py_func_obj13 = call ptr @py_create_function(ptr @nested_loop_modification_test.L163.C1, i32 8)
  store ptr %new_py_func_obj13, ptr @nested_loop_modification_test_obj_gv, align 8
  %new_py_func_obj14 = call ptr @py_create_function(ptr @dict_list_interaction_test.L198.C1, i32 8)
  store ptr %new_py_func_obj14, ptr @dict_list_interaction_test_obj_gv, align 8
  %new_py_func_obj15 = call ptr @py_create_function(ptr @list_dict_interaction_test.L225.C1, i32 8)
  store ptr %new_py_func_obj15, ptr @list_dict_interaction_test_obj_gv, align 8
  %new_py_func_obj16 = call ptr @py_create_function(ptr @main.L257.C1, i32 8)
  store ptr %new_py_func_obj16, ptr @main_obj_gv, align 8
}
, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving handleFunctionDefStmt for 'main'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: Processing Stmt Kind 7 at line 0 in block entry
[HdlCallExpr] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - Generating runtime call via py_call_function for 'main'
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loop Iter: After handleStmt. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Preparing to call Python main. Current block: entry
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Found Python main function object: @main_obj_gv = internal global ptr null
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] 'main' object is a GlobalVariable, needs loading before call.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Loaded 'main' object:   %main_func_loaded = load ptr, ptr @main_obj_gv, align 8
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Generated call to Python main. Result object:   %call_result17 = call ptr @py_call_function_noargs(ptr %main_func_loaded)
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Generated conversion to exit code:   %exit_code = call i32 @py_object_to_exit_code(ptr %call_result17)
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Added return instruction for exit code.
[GenMod] CurFunc: __llvmpy_entry, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Finished statement loop and main call sequence.
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Restored context. Current function: <null Function>, IP=Block: entry, Point: end
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Verifying entry function '__llvmpy_entry'...
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - [EntryPt] Entry function verification PASSED.
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - Verifying entire module...
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - Module verification PASSED.
[GenMod] CurFunc: <null Function>, CurBlock: entry, CurIP: {Block: entry, Point: end} - Leaving generateModule.
成功将 /home/ljs/code/llvmpy/test.py 编译为 output.ll
