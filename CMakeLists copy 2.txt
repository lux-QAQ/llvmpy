cmake_minimum_required(VERSION 3.10.0)
project(llvmpy VERSION 0.1.0 LANGUAGES C CXX)


# 设置 RPATH 策略
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib:/usr/lib/x86_64-linux-gnu")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)  # 改为FALSE防止自动添加其他路径

# 明确设置查找库的路径优先级
list(REMOVE_ITEM CMAKE_SYSTEM_PREFIX_PATH "/home/ljs/miniconda3")
list(INSERT CMAKE_SYSTEM_LIBRARY_PATH 0 "/usr/lib/x86_64-linux-gnu")

# 查找依赖库，明确指定系统库路径
set(ZLIB_ROOT "/usr")  # 优先查找系统zlib
set(CMAKE_PREFIX_PATH "/usr" ${CMAKE_PREFIX_PATH})
find_package(ZLIB REQUIRED)
find_package(zstd QUIET)

# --- 使用 llvm-config 查找 LLVM 路径 ---
find_program(LLVM_CONFIG_EXECUTABLE llvm-config)
if(NOT LLVM_CONFIG_EXECUTABLE)
    message(FATAL_ERROR "llvm-config not found. Please ensure LLVM is installed and llvm-config is in your PATH.")
endif()

# 获取 LLVM 安装前缀
execute_process(
    COMMAND ${LLVM_CONFIG_EXECUTABLE} --prefix
    OUTPUT_VARIABLE LLVM_PREFIX
    OUTPUT_STRIP_TRAILING_WHITESPACE
    RESULT_VARIABLE LLVM_CONFIG_RESULT
)

if(NOT LLVM_CONFIG_RESULT EQUAL 0)
    message(FATAL_ERROR "llvm-config --prefix failed. Error code: ${LLVM_CONFIG_RESULT}")
endif()

# 设置 LLVM_DIR 指向 CMake 配置文件的预期位置
set(LLVM_DIR "${LLVM_PREFIX}/lib/cmake/llvm")
message(STATUS "Using llvm-config found LLVM prefix: ${LLVM_PREFIX}")
message(STATUS "Setting LLVM_DIR to: ${LLVM_DIR}")
# ------------------------------------------

# 查找LLVM包 (现在会优先使用上面设置的 LLVM_DIR)
find_package(LLVM REQUIRED CONFIG)

# 设置LLVM相关参数
message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}") # 确认路径是否正确

# 添加LLVM头文件
include_directories(${LLVM_INCLUDE_DIRS})
add_definitions(${LLVM_DEFINITIONS})

# 添加自己的include目录
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)



# 添加CodeGen源文件
file(GLOB CODEGEN_SOURCES
    "${CMAKE_CURRENT_SOURCE_DIR}/src/CodeGen/*.cpp"
)

# 添加RunTime源文件
file(GLOB RUNTIME_SOURCES
    "${CMAKE_CURRENT_SOURCE_DIR}/src/RunTime/*.cpp"
)

# 添加源文件
add_executable(llvmpy
    main.cpp
    #src/runtime.cpp
    src/lexer.cpp
    src/parser.cpp
    src/ast.cpp
    src/ObjectType.cpp
    src/ObjectRuntime.cpp
    src/TypeOperations.cpp
    src/ObjectLifecycle.cpp
    ${CODEGEN_SOURCES}
    ${RUNTIME_SOURCES}
)

# 运行时支持库 (编译为静态库)
add_library(llvmpy_runtime STATIC
    #src/runtime.cpp
    ${RUNTIME_SOURCES}
)

# 链接LLVM库
llvm_map_components_to_libnames(llvm_libs support core irreader analysis instcombine
    scalaropts passes ipo transformutils)
# 确保 LLVM 库变量被正确设置
if(NOT llvm_libs)
    message(WARNING "llvm_map_components_to_libnames did not find LLVM libraries. Check LLVM components and installation.")
endif()
# 显式添加 LLVM 库目录，以防万一
link_directories(${LLVM_LIBRARY_DIRS})
target_link_libraries(llvmpy PRIVATE ${llvm_libs} ZLIB::ZLIB llvmpy_runtime)


# 如果找到zstd，也链接它
if(zstd_FOUND)
    target_link_libraries(llvmpy PRIVATE zstd::libzstd_shared)
endif()

# 设置C++标准
set_target_properties(llvmpy PROPERTIES
    CXX_STANDARD 20
    CXX_STANDARD_REQUIRED ON
)